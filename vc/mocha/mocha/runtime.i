#line 1 "..\\..\\..\\src\\mocha\\roaster\\runtime\\runtime.cc"
#line 1 "Y:\\mocha\\src\\mocha/roaster/runtime/runtime.h"


#line 1 "Y:\\mocha\\src\\mocha/roaster/lib/unordered_map.h"


#line 1 "Y:\\mocha\\src\\useconfig.h"




#line 1 "Y:\\mocha\\src\\unconfig.h"


#pragma warning(disable:4624)








































































































































#line 6 "Y:\\mocha\\src\\useconfig.h"
#line 7 "Y:\\mocha\\src\\useconfig.h"
#line 4 "Y:\\mocha\\src\\mocha/roaster/lib/unordered_map.h"








#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered_map.hpp"












#pragma once
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered_map.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"












#pragma once
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"









#pragma once
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






















#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/user.hpp"



























































































 











 







 









 


#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 81 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"



#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"











#line 109 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_compiler_config.hpp"
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"




















#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"


#pragma warning( disable : 4503 ) 













#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"








































#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"









#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"




#line 95 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"



#line 99 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"




#line 104 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

















#line 122 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"



#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"







#line 134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"





#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"





#line 146 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"






#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"




#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"


#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"






#line 168 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"


#line 171 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"
















#line 188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"



#line 192 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"
























#line 217 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"


#line 220 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

























#line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"



#line 250 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

#line 252 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"

#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"



#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"
#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"








#line 274 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"








#line 283 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/compiler/visualc.hpp"
#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

#pragma once


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 





#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


















#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"














#pragma once
































































































































#line 145 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"


#line 148 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"





#line 154 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"


#line 1 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"












#pragma once








#line 23 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
#line 24 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"





typedef __w64 unsigned int   size_t;
#line 31 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 33 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
















#line 50 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


namespace vc_attributes
{
#line 55 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

enum YesNoMaybe
{
	
	No = 0x0fff0001,
	Maybe = 0x0fff0010,
	Yes = 0x0fff0100
};

typedef enum YesNoMaybe YesNoMaybe;

enum AccessType
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	ReadWrite = 3
};

typedef enum AccessType AccessType;



[repeatable]
[source_annotation_attribute( Parameter )]
struct PreAttribute
{

	PreAttribute();
#line 85 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	unsigned int Deref;
	YesNoMaybe Valid;
	YesNoMaybe Null;
	YesNoMaybe Tainted;
	AccessType Access;
	size_t ValidElementsConst;
	size_t ValidBytesConst;
	const wchar_t* ValidElements;
	const wchar_t* ValidBytes;
	const wchar_t* ValidElementsLength;
	const wchar_t* ValidBytesLength;
	size_t WritableElementsConst;
	size_t WritableBytesConst;
	const wchar_t* WritableElements;
	const wchar_t* WritableBytes;
	const wchar_t* WritableElementsLength;
	const wchar_t* WritableBytesLength;
	size_t ElementSizeConst;
	const wchar_t* ElementSize;
	YesNoMaybe NullTerminated;
	const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostAttribute
{

	PostAttribute();
#line 116 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	unsigned int Deref;
	YesNoMaybe Valid;
	YesNoMaybe Null;
	YesNoMaybe Tainted;
	AccessType Access;
	size_t ValidElementsConst;
	size_t ValidBytesConst;
	const wchar_t* ValidElements;
	const wchar_t* ValidBytes;
	const wchar_t* ValidElementsLength;
	const wchar_t* ValidBytesLength;
	size_t WritableElementsConst;
	size_t WritableBytesConst;
	const wchar_t* WritableElements;
	const wchar_t* WritableBytes;
	const wchar_t* WritableElementsLength;
	const wchar_t* WritableBytesLength;
	size_t ElementSizeConst;
	const wchar_t* ElementSize;
	YesNoMaybe NullTerminated;
	YesNoMaybe MustCheck;
	const wchar_t* Condition;
};

[source_annotation_attribute( Parameter )]
struct FormatStringAttribute
{

	FormatStringAttribute();
#line 147 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	const wchar_t* Style;
	const wchar_t* UnformattedAlternative;
};

[repeatable]
[source_annotation_attribute( ReturnValue )]
struct InvalidCheckAttribute
{

	InvalidCheckAttribute();
#line 159 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	long Value;
};

[source_annotation_attribute( Method )]
struct SuccessAttribute
{

	SuccessAttribute();
#line 169 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreBoundAttribute
{

	PreBoundAttribute();
#line 180 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostBoundAttribute
{

	PostBoundAttribute();
#line 190 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreRangeAttribute
{

	PreRangeAttribute();
#line 200 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
	const char* MinVal;
	const char* MaxVal;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostRangeAttribute
{

	PostRangeAttribute();
#line 212 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
	const char* MinVal;
	const char* MaxVal;
};

#line 218 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


};  
#line 222 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"






















typedef ::vc_attributes::YesNoMaybe SA_YesNoMaybe;
const ::vc_attributes::YesNoMaybe SA_Yes = ::vc_attributes::Yes;
const ::vc_attributes::YesNoMaybe SA_No = ::vc_attributes::No;
const ::vc_attributes::YesNoMaybe SA_Maybe = ::vc_attributes::Maybe;

typedef ::vc_attributes::AccessType SA_AccessType;
const ::vc_attributes::AccessType SA_NoAccess = ::vc_attributes::NoAccess;
const ::vc_attributes::AccessType SA_Read = ::vc_attributes::Read;
const ::vc_attributes::AccessType SA_Write = ::vc_attributes::Write;
const ::vc_attributes::AccessType SA_ReadWrite = ::vc_attributes::ReadWrite;


typedef ::vc_attributes::PreAttribute          SA_Pre;
typedef ::vc_attributes::PostAttribute         SA_Post;
typedef ::vc_attributes::FormatStringAttribute SA_FormatString;
typedef ::vc_attributes::InvalidCheckAttribute SA_InvalidCheck; 
typedef ::vc_attributes::SuccessAttribute      SA_Success;
typedef ::vc_attributes::PreBoundAttribute     SA_PreBound;
typedef ::vc_attributes::PostBoundAttribute    SA_PostBound;
typedef ::vc_attributes::PreRangeAttribute     SA_PreRange;
typedef ::vc_attributes::PostRangeAttribute    SA_PostRange;
#line 266 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"















#line 282 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 284 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"




















#line 305 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


#line 308 "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"







































































































































































































































































































































































































































































































































































































































































                                                




                                                


























































































































































































































#line 1034 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"































































































#line 1130 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



































































































#line 1230 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



















































#line 1282 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



















































































































































































































#line 1494 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
extern "C" {




#line 1500 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"




























































































































































































































#line 1721 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 1755 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



































































































































































































































    
    
#line 1985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"






#line 1992 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
#line 1993 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"


}
#line 1997 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#pragma pack(push,8)

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"












#pragma once






#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"








#pragma pack(push,8)


extern "C" {
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"








#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"





typedef __w64 unsigned int   uintptr_t;
#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"





typedef char *  va_list;
#line 59 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"





#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"











#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"


#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"













#line 96 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"












































#line 141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"


}
#line 145 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#pragma pack(pop)

#line 149 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"
#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


extern "C" {
#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 99 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 109 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"













#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 127 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 143 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 145 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 154 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 159 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 169 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 170 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 

#line 175 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
  
 #line 177 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 178 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 197 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 198 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

















#line 216 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 221 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"








#line 230 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 237 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 244 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 251 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 252 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 291 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 292 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 293 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 304 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 312 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 320 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 322 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 323 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



 
  
 



#line 333 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
  
 



#line 344 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 345 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
   
  

#line 353 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
 



#line 358 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 359 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
 



#line 368 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 369 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
 



#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 379 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 383 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 389 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 394 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 396 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 397 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"












typedef size_t rsize_t;

#line 412 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 413 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





typedef __w64 int            intptr_t;
#line 420 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 422 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














typedef __w64 int            ptrdiff_t;
#line 438 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 440 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 451 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


















typedef int errno_t;
#line 471 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef __w64 long __time32_t;   

#line 476 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef __int64 __time64_t;     

#line 481 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





typedef __time64_t time_t;      
#line 488 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 490 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 499 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 504 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 506 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 507 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 512 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 514 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 515 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 530 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 532 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 533 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"












  void __cdecl _invalid_parameter_noinfo(void);
  __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);
#line 548 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

 __declspec(noreturn)
void __cdecl _invoke_watson(   const wchar_t *,    const wchar_t *,    const wchar_t *, unsigned int, uintptr_t);






 







 
  
 #line 568 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 569 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 577 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


































































































































































#line 740 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 741 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1807 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"















































































































































#line 1951 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 1952 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;

#line 1973 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; 
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;

#line 2002 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


}
#line 2006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2010 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2012 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2016 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2018 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2022 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2024 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 2031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#pragma pack(pop)

#line 2039 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#pragma pack(push,8)









 
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"









































#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		





#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		


		




		

 
  

 

#line 91 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  
 #line 95 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
#line 99 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  
 #line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"













































	
	






		


			
		#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
	




		

#line 172 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
			
		#line 174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 175 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
	

#line 180 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
		
	#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"




#line 191 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


	
		#pragma detect_mismatch("_MSC_VER", "1600")
	#line 196 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
		
		     #pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
		





#line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 208 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"





#line 215 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"




#line 220 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 222 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 223 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



#line 227 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"









#line 237 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 239 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



 
#line 244 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 












#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
 

 #line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 









 









 









 
































#line 330 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 




#line 336 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 
 
#line 339 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
 

 #line 344 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"











#line 356 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"













#pragma once

















#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"










#pragma comment(lib,"libcpmt")


#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"
#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"
#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"
#line 358 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"







#line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"







#line 374 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 











 
  

#line 392 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 394 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 395 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






 










 
  

#line 416 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 418 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  

#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 427 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 

   


#line 435 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    
   #line 437 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 #line 439 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 445 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 448 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 454 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 456 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 457 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 463 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 465 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 466 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 

#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
   


     
   #line 477 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 478 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


    
#line 482 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



		

 
  
  
  




  
  
  

  







   
   
   
  #line 511 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 531 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 

 
namespace std {
typedef bool _Bool;
}
 #line 539 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		





		






typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;

		


 
  
 #line 562 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






 
#line 570 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		
 
#line 574 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 
  
typedef unsigned short char16_t;
typedef unsigned int char32_t;
 #line 579 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 #line 581 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class  _Lockit
	{	
public:
 

  
















#line 624 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit();	
  #line 628 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

    static  void __cdecl _Lockit_ctor(int);
    static  void __cdecl _Lockit_dtor(int);

private:
    static  void __cdecl _Lockit_ctor(_Lockit *);
    static  void __cdecl _Lockit_ctor(_Lockit *, int);
    static  void __cdecl _Lockit_dtor(_Lockit *);

	 _Lockit(const _Lockit&);				
	_Lockit&  operator=(const _Lockit&);	

	int _Locktype;

  











#line 655 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 741 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

class  _Mutex
	{	
public:

 
  
























#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    __thiscall _Mutex(_Uninitialized)
		{	
		}

    __thiscall _Mutex();
	__thiscall ~_Mutex();
	void __thiscall _Lock();
	void __thiscall _Unlock();
  #line 782 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

private:
    static  void __cdecl _Mutex_ctor(_Mutex *);
    static  void __cdecl _Mutex_dtor(_Mutex *);
    static  void __cdecl _Mutex_Lock(_Mutex *);
    static  void __cdecl _Mutex_Unlock(_Mutex *);

	 _Mutex(const _Mutex&);				
	_Mutex&  operator=(const _Mutex&);	
	void *_Mtx;

  







#line 802 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

class  _Init_locks
	{	
public:
 
      










#line 820 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    __thiscall _Init_locks();
	__thiscall ~_Init_locks();
  #line 823 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

private:
    static  void __cdecl _Init_locks_ctor(_Init_locks *);
    static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 837 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"





		

 void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;





 

 #pragma pack(pop)

#line 863 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






#line 6 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"







 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"














#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"


extern "C" {
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"







#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"




namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"





 extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(  int _Value);
errno_t __cdecl _get_errno(  int * _Value);
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"








#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"









#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);


}
#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"

#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"





#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"


#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"







#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"







#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/utility.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/utility.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

#pragma once





 
  
  
  
 #line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"



 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		
 

 
 
 
 
 

 
 

 



  
  

   
   

 
























#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

		


		
 
 

		

template<bool _Test,
	class _Ty1,
	class _Ty2>
	class _If
	{	
public:
	typedef _Ty2 _Type;
	};

template<class _Ty1,
	class _Ty2>
	class _If<true, _Ty1, _Ty2>
	{	
public:
	typedef _Ty1 _Type;
	};

 
  

	namespace tr1 {
typedef char (&_No)[1];
typedef char (&_Yes)[2];
	}	
 #line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

 

  

struct _Bool_struct
	{	
	int _Member;
	};

  









   

typedef int _Bool_struct::* _Bool_type;
  #line 127 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

 #line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

		
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
}


 #pragma warning(pop)
 #pragma pack(pop)

#line 157 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"
#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"

#pragma once










 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"














#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

























struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













#line 94 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"





















#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













 FILE * __cdecl __iob_func(void);
#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"



typedef __int64 fpos_t;




#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 152 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 155 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"






#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
























  int __cdecl _filbuf(   FILE * _File );
  int __cdecl _flsbuf(  int _Ch,    FILE * _File);




  FILE * __cdecl _fsopen(   const char * _Filename,    const char * _Mode,   int _ShFlag);
#line 194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 void __cdecl clearerr(   FILE * _File);

  errno_t __cdecl clearerr_s(   FILE * _File );
#line 199 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl fclose(   FILE * _File);
  int __cdecl _fcloseall(void);




  FILE * __cdecl _fdopen(  int _FileHandle,    const char * _Mode);
#line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  int __cdecl feof(  FILE * _File);
  int __cdecl ferror(  FILE * _File);
  int __cdecl fflush(   FILE * _File);
  int __cdecl fgetc(   FILE * _File);
  int __cdecl _fgetchar(void);
  int __cdecl fgetpos(   FILE * _File ,   fpos_t * _Pos);
  char * __cdecl fgets(    char * _Buf,   int _MaxCount,    FILE * _File);




  int __cdecl _fileno(  FILE * _File);
#line 221 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"




#line 226 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  char * __cdecl _tempnam(   const char * _DirName,    const char * _FilePrefix);



#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  int __cdecl _flushall(void);
   FILE * __cdecl fopen(   const char * _Filename,    const char * _Mode);

  errno_t __cdecl fopen_s(     FILE ** _File,    const char * _Filename,    const char * _Mode);
#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl fprintf(   FILE * _File,     const char * _Format, ...);

  int __cdecl fprintf_s(   FILE * _File,     const char * _Format, ...);
#line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl fputc(  int _Ch,    FILE * _File);
  int __cdecl _fputchar(  int _Ch);
  int __cdecl fputs(   const char * _Str,    FILE * _File);
  size_t __cdecl fread(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,    FILE * _File);

  size_t __cdecl fread_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,    FILE * _File);
#line 249 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
   FILE * __cdecl freopen(   const char * _Filename,    const char * _Mode,    FILE * _File);

  errno_t __cdecl freopen_s(     FILE ** _File,    const char * _Filename,    const char * _Mode,    FILE * _OldFile);
#line 253 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
   int __cdecl fscanf(   FILE * _File,     const char * _Format, ...);
   int __cdecl _fscanf_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fscanf_s(   FILE * _File,     const char * _Format, ...);
#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _fscanf_s_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
  int __cdecl fsetpos(   FILE * _File,   const fpos_t * _Pos);
  int __cdecl fseek(   FILE * _File,   long _Offset,   int _Origin);
  long __cdecl ftell(   FILE * _File);

  int __cdecl _fseeki64(   FILE * _File,   __int64 _Offset,   int _Origin);
  __int64 __cdecl _ftelli64(   FILE * _File);

  size_t __cdecl fwrite(   const void * _Str,   size_t _Size,   size_t _Count,    FILE * _File);
  int __cdecl getc(   FILE * _File);
  int __cdecl getchar(void);
  int __cdecl _getmaxstdio(void);

 char * __cdecl gets_s(    char * _Buf,   rsize_t _Size);
#line 276 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
  char * __cdecl gets(  char *_Buffer);
 int __cdecl _getw(   FILE * _File);


 void __cdecl perror(   const char * _ErrMsg);
#line 283 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _pclose(   FILE * _File);
  FILE * __cdecl _popen(   const char * _Command,    const char * _Mode);
  int __cdecl printf(    const char * _Format, ...);

  int __cdecl printf_s(    const char * _Format, ...);
#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl putc(  int _Ch,    FILE * _File);
  int __cdecl putchar(  int _Ch);
  int __cdecl puts(   const char * _Str);
  int __cdecl _putw(  int _Word,    FILE * _File);


 int __cdecl remove(   const char * _Filename);
  int __cdecl rename(   const char * _OldFilename,    const char * _NewFilename);
 int __cdecl _unlink(   const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details."))  int __cdecl unlink(   const char * _Filename);
#line 301 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 302 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 void __cdecl rewind(   FILE * _File);
  int __cdecl _rmtmp(void);
   int __cdecl scanf(    const char * _Format, ...);
   int __cdecl _scanf_l(    const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl scanf_s(    const char * _Format, ...);
#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _scanf_s_l(    const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
  void __cdecl setbuf(   FILE * _File,      char * _Buffer);
  int __cdecl _setmaxstdio(  int _Max);
  unsigned int __cdecl _set_output_format(  unsigned int _Format);
  unsigned int __cdecl _get_output_format(void);
  int __cdecl setvbuf(   FILE * _File,     char * _Buf,   int _Mode,   size_t _Size);
  int __cdecl _snprintf_s(    char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); } __pragma(warning(pop)); }

  int __cdecl sprintf_s(    char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, ...);
#line 323 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Dest)[_Size],     const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
  int __cdecl _scprintf(    const char * _Format, ...);
   int __cdecl sscanf(   const char * _Src,     const char * _Format, ...);
   int __cdecl _sscanf_l(   const char * _Src,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl sscanf_s(   const char * _Src,     const char * _Format, ...);
#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _sscanf_s_l(   const char * _Src,     const char * _Format,    _locale_t _Locale, ...);
   int __cdecl _snscanf(     const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
   int __cdecl _snscanf_l(     const char * _Src,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _snscanf_s(     const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _snscanf_s_l(     const char * _Src,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
   FILE * __cdecl tmpfile(void);

  errno_t __cdecl tmpfile_s(    FILE ** _File);
  errno_t __cdecl tmpnam_s(    char * _Buf,   rsize_t _Size);
#line 343 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
  char * __cdecl tmpnam(  char *_Buffer);
  int __cdecl ungetc(  int _Ch,    FILE * _File);
  int __cdecl vfprintf(   FILE * _File,     const char * _Format, va_list _ArgList);

  int __cdecl vfprintf_s(   FILE * _File,     const char * _Format, va_list _ArgList);
#line 350 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl vprintf(    const char * _Format, va_list _ArgList);

  int __cdecl vprintf_s(    const char * _Format, va_list _ArgList);
#line 354 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
   int __cdecl vsnprintf(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl vsnprintf_s(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#line 359 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _vsnprintf_s(    char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl _snprintf(   char *_Dest,   size_t _Count,     const char * _Format, ...);   int __cdecl _vsnprintf(   char *_Dest,   size_t _Count,     const char * _Format, va_list _Args);
#pragma warning(pop)

 int __cdecl vsprintf_s(    char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(  char (&_Dest)[_Size],     const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
#line 369 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl sprintf(  char *_Dest,  const char * _Format, ...);   int __cdecl vsprintf(  char *_Dest,  const char * _Format, va_list _Args);
#pragma warning(pop)
  int __cdecl _vscprintf(    const char * _Format, va_list _ArgList);
  int __cdecl _snprintf_c(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vsnprintf_c(  char *_DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl _fprintf_p(   FILE * _File,     const char * _Format, ...);
  int __cdecl _printf_p(    const char * _Format, ...);
  int __cdecl _sprintf_p(    char * _Dst,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vfprintf_p(   FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl _vprintf_p(    const char * _Format, va_list _ArgList);
  int __cdecl _vsprintf_p(    char * _Dst,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
  int __cdecl _scprintf_p(    const char * _Format, ...);
  int __cdecl _vscprintf_p(    const char * _Format, va_list _ArgList);
 int __cdecl _set_printf_count_output(  int _Value);
 int __cdecl _get_printf_count_output(void);

  int __cdecl _printf_l(    const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _printf_p_l(    const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _printf_s_l(    const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _vprintf_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_p_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_s_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);

  int __cdecl _fprintf_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _fprintf_p_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _fprintf_s_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _vfprintf_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_p_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_s_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);

   int __cdecl _sprintf_l(   char * _DstBuf,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _sprintf_p_l(    char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _sprintf_s_l(    char * _DstBuf,   size_t _DstSize,     const char * _Format,    _locale_t _Locale, ...);
   int __cdecl _vsprintf_l(   char * _DstBuf,    const char * _Format,    _locale_t, va_list _ArgList);
  int __cdecl _vsprintf_p_l(    char * _DstBuf,   size_t _MaxCount,     const char* _Format,    _locale_t _Locale,  va_list _ArgList);
  int __cdecl _vsprintf_s_l(    char * _DstBuf,   size_t _DstSize,     const char * _Format,    _locale_t _Locale, va_list _ArgList);

  int __cdecl _scprintf_l(    const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _scprintf_p_l(    const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _vscprintf_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vscprintf_p_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);

   int __cdecl _snprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _snprintf_c_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
  int __cdecl _snprintf_s_l(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
   int __cdecl _vsnprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_c_l(  char * _DstBuf,   size_t _MaxCount, const char *,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_s_l(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char* _Format,   _locale_t _Locale, va_list _ArgList);







#line 428 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"




  FILE * __cdecl _wfsopen(   const wchar_t * _Filename,    const wchar_t * _Mode,   int _ShFlag);
#line 434 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  wint_t __cdecl fgetwc(   FILE * _File);
  wint_t __cdecl _fgetwchar(void);
  wint_t __cdecl fputwc(  wchar_t _Ch,    FILE * _File);
  wint_t __cdecl _fputwchar(  wchar_t _Ch);
  wint_t __cdecl getwc(   FILE * _File);
  wint_t __cdecl getwchar(void);
  wint_t __cdecl putwc(  wchar_t _Ch,    FILE * _File);
  wint_t __cdecl putwchar(  wchar_t _Ch);
  wint_t __cdecl ungetwc(  wint_t _Ch,    FILE * _File);

  wchar_t * __cdecl fgetws(    wchar_t * _Dst,   int _SizeInWords,    FILE * _File);
  int __cdecl fputws(   const wchar_t * _Str,    FILE * _File);
  wchar_t * __cdecl _getws_s(    wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(  wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
  wchar_t * __cdecl _getws(  wchar_t *_String);
  int __cdecl _putws(   const wchar_t * _Str);

  int __cdecl fwprintf(   FILE * _File,     const wchar_t * _Format, ...);

  int __cdecl fwprintf_s(   FILE * _File,     const wchar_t * _Format, ...);
#line 456 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl wprintf(    const wchar_t * _Format, ...);

  int __cdecl wprintf_s(    const wchar_t * _Format, ...);
#line 460 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _scwprintf(    const wchar_t * _Format, ...);
  int __cdecl vfwprintf(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl vfwprintf_s(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);
#line 465 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl vwprintf(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl vwprintf_s(    const wchar_t * _Format, va_list _ArgList);
#line 469 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


 int __cdecl swprintf_s(    wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, ...);
#line 473 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl swprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

 int __cdecl vswprintf_s(    wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);
#line 477 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }

  int __cdecl _swprintf_c(    wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_c(    wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl _snwprintf_s(    wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); } __pragma(warning(pop)); }
  int __cdecl _vsnwprintf_s(    wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
  int __cdecl _snwprintf(   wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, ...);   int __cdecl _vsnwprintf(   wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

  int __cdecl _fwprintf_p(   FILE * _File,     const wchar_t * _Format, ...);
  int __cdecl _wprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vfwprintf_p(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl _vwprintf_p(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl _swprintf_p(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_p(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl _scwprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vscwprintf_p(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl _wprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _wprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _wprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _vwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  int __cdecl _fwprintf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _fwprintf_p_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _fwprintf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _vfwprintf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_p_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  int __cdecl _swprintf_c_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _swprintf_p_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _swprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _vswprintf_c_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_p_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  int __cdecl _scwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _scwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _vscwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

   int __cdecl _snwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _snwprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
   int __cdecl _vsnwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnwprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);










#line 540 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _swprintf(   wchar_t *_Dest,     const wchar_t * _Format, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _vswprintf(   wchar_t *_Dest,     const wchar_t * _Format, va_list _Args);
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __swprintf_l( wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __vswprintf_l( wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"












#pragma once







#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"










#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl vswprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning( pop )


#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl _vswprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int swprintf(   wchar_t * _String,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl vswprintf(   wchar_t * _String,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int _swprintf_l(   wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl _vswprintf_l(   wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )

#pragma warning( pop )

#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"
#line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#line 550 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 551 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  wchar_t * __cdecl _wtempnam(   const wchar_t * _Directory,    const wchar_t * _FilePrefix);



#line 571 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  int __cdecl _vscwprintf(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl _vscwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
   int __cdecl fwscanf(   FILE * _File,     const wchar_t * _Format, ...);
   int __cdecl _fwscanf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fwscanf_s(   FILE * _File,     const wchar_t * _Format, ...);
#line 581 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _fwscanf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
   int __cdecl swscanf(   const wchar_t * _Src,     const wchar_t * _Format, ...);
   int __cdecl _swscanf_l(   const wchar_t * _Src,     const wchar_t * _Format,    _locale_t _Locale, ...);

  int __cdecl swscanf_s(   const wchar_t *_Src,     const wchar_t * _Format, ...);
#line 587 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _swscanf_s_l(   const wchar_t * _Src,     const wchar_t * _Format,    _locale_t _Locale, ...);
   int __cdecl _snwscanf(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
   int __cdecl _snwscanf_l(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _snwscanf_s(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _snwscanf_s_l(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
   int __cdecl wscanf(    const wchar_t * _Format, ...);
   int __cdecl _wscanf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);

  int __cdecl wscanf_s(    const wchar_t * _Format, ...);
#line 597 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  int __cdecl _wscanf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)

  FILE * __cdecl _wfdopen(  int _FileHandle ,    const wchar_t * _Mode);
   FILE * __cdecl _wfopen(   const wchar_t * _Filename,    const wchar_t * _Mode);
  errno_t __cdecl _wfopen_s(     FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode);
   FILE * __cdecl _wfreopen(   const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);
  errno_t __cdecl _wfreopen_s(     FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);



 void __cdecl _wperror(   const wchar_t * _ErrMsg);
#line 610 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  FILE * __cdecl _wpopen(   const wchar_t *_Command,    const wchar_t * _Mode);
 int __cdecl _wremove(   const wchar_t * _Filename);
  errno_t __cdecl _wtmpnam_s(    wchar_t * _DstBuf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wtmpnam(  wchar_t *_Buffer);

  wint_t __cdecl _fgetwc_nolock(   FILE * _File);
  wint_t __cdecl _fputwc_nolock(  wchar_t _Ch,    FILE * _File);
  wint_t __cdecl _ungetwc_nolock(  wint_t _Ch,    FILE * _File);






#line 626 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
inline wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }   
inline wint_t __cdecl putwchar(wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }       
#line 631 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 642 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 645 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 648 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"















#line 664 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"











 void __cdecl _lock_file(   FILE * _File);
 void __cdecl _unlock_file(   FILE * _File);

  int __cdecl _fclose_nolock(   FILE * _File);
  int __cdecl _fflush_nolock(   FILE * _File);
  size_t __cdecl _fread_nolock(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,    FILE * _File);
  size_t __cdecl _fread_nolock_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,    FILE * _File);
  int __cdecl _fseek_nolock(   FILE * _File,   long _Offset,   int _Origin);
  long __cdecl _ftell_nolock(   FILE * _File);
  int __cdecl _fseeki64_nolock(   FILE * _File,   __int64 _Offset,   int _Origin);
  __int64 __cdecl _ftelli64_nolock(   FILE * _File);
  size_t __cdecl _fwrite_nolock(   const void * _DstBuf,   size_t _Size,   size_t _Count,    FILE * _File);
  int __cdecl _ungetc_nolock(  int _Ch,    FILE * _File);












#line 701 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"











#line 713 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details."))  char * __cdecl tempnam(   const char * _Directory,    const char * _FilePrefix);



#line 719 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details."))  int __cdecl fcloseall(void);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details."))  FILE * __cdecl fdopen(  int _FileHandle,    const char * _Format);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details."))  int __cdecl fgetchar(void);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details."))  int __cdecl fileno(  FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details."))  int __cdecl flushall(void);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details."))  int __cdecl fputchar(  int _Ch);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details."))  int __cdecl getw(   FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details."))  int __cdecl putw(  int _Ch,    FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details."))  int __cdecl rmtmp(void);

#line 731 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


}
#line 735 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

#pragma pack(pop)

#line 739 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"


 
 
 
 
 
 
 

 
 
 
 





typedef FILE _iobuf;

 
namespace std {
using :: _iobuf;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;
}
 #line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"

#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

#pragma once










 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"














#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


extern "C" {
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"




#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
















 void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
  const void *  __cdecl memchr(    const void * _Buf ,   int _Val,   size_t _MaxCount);
  int     __cdecl _memicmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
  int     __cdecl _memicmp_l(   const void * _Buf1,    const void * _Buf2,   size_t _Size,    _locale_t _Locale);
         int     __cdecl memcmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
         void *  __cdecl memcpy(    void * _Dst,    const void * _Src,   size_t _Size);

 errno_t  __cdecl memcpy_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);





















#line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"










#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
        void *  __cdecl memset(    void * _Dst,   int _Val,   size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(  void * _Dst,    const void * _Src,   int _Val,   size_t _Size);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))  int __cdecl memicmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
#line 95 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  errno_t __cdecl _strset_s(    char * _Dst,   size_t _DstSize,   int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(    char (&_Dest)[_Size],   int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
  char * __cdecl _strset(  char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src);
#line 104 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Dest)[_Size],    const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
  char * __cdecl strcpy(  char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src);
#line 109 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(    char (&_Dest)[_Size],    const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }
  char * __cdecl strcat(  char *_Dest,  const char * _Source);
         int     __cdecl strcmp(   const char * _Str1,    const char * _Str2);
         size_t  __cdecl strlen(   const char * _Str);
  size_t  __cdecl strnlen(   const char * _Str,   size_t _MaxCount);

 static __inline size_t  __cdecl strnlen_s(    const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 120 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  errno_t __cdecl memmove_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
#line 123 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"



#line 127 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
  void *  __cdecl memmove(    void * _Dst,    const void * _Src,   size_t _Size);
#line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"




#line 134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  char *  __cdecl _strdup(   const char * _Src);



#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  const char *  __cdecl strchr(   const char * _Str,   int _Val);
  int     __cdecl _stricmp(    const char * _Str1,     const char * _Str2);
  int     __cdecl _strcmpi(    const char * _Str1,     const char * _Str2);
  int     __cdecl _stricmp_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  int     __cdecl strcoll(    const char * _Str1,     const  char * _Str2);
  int     __cdecl _strcoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  int     __cdecl _stricoll(    const char * _Str1,     const char * _Str2);
  int     __cdecl _stricoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  int     __cdecl _strncoll  (   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
  int     __cdecl _strncoll_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);
  int     __cdecl _strnicoll (   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
  int     __cdecl _strnicoll_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);
  size_t  __cdecl strcspn(    const char * _Str,     const char * _Control);
   char *  __cdecl _strerror(   const char * _ErrMsg);
  errno_t __cdecl _strerror_s(    char * _Buf,   size_t _SizeInBytes,    const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],    const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
   char *  __cdecl strerror(  int);

  errno_t __cdecl strerror_s(    char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
  errno_t __cdecl _strlwr_s(    char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(    char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
  char * __cdecl _strlwr(  char *_String);
  errno_t __cdecl _strlwr_s_l(    char * _Str,   size_t _Size,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(    char (&_String)[_Size],    _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
  char * __cdecl _strlwr_l(    char *_String,    _locale_t _Locale);

  errno_t __cdecl strncat_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src,   rsize_t _MaxCount);
#line 171 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(    char (&_Dest)[_Size],    const char * _Source,   size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

  char * __cdecl strncat(    char *_Dest,    const char * _Source,   size_t _Count);
#pragma warning(pop)


#line 180 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
  int     __cdecl strncmp(   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
  int     __cdecl _strnicmp(   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
  int     __cdecl _strnicmp_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);

  errno_t __cdecl strncpy_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src,   rsize_t _MaxCount);
#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size],    const char * _Source,   size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
  char * __cdecl strncpy(   char *_Dest,    const char * _Source,   size_t _Count);
  errno_t __cdecl _strnset_s(    char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(    char (&_Dest)[_Size],   int _Val,   size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
  char * __cdecl _strnset(    char *_Dest,   int _Val,   size_t _Count);
  const char *  __cdecl strpbrk(   const char * _Str,    const char * _Control);
  const char *  __cdecl strrchr(   const char * _Str,   int _Ch);
 char *  __cdecl _strrev(    char * _Str);
  size_t  __cdecl strspn(   const char * _Str,    const char * _Control);
  const char *  __cdecl strstr(   const char * _Str,    const char * _SubStr);
   char *  __cdecl strtok(    char * _Str,    const char * _Delim);

  char *  __cdecl strtok_s(    char * _Str,    const char * _Delim,        char ** _Context);
#line 201 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
  errno_t __cdecl _strupr_s(    char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(    char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
  char * __cdecl _strupr(  char *_String);
  errno_t __cdecl _strupr_s_l(    char * _Str,   size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(    char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
  char * __cdecl _strupr_l(    char *_String,    _locale_t _Locale);
  size_t  __cdecl strxfrm (   char * _Dst,    const char * _Src,   size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(   char * _Dst,    const char * _Src,   size_t _MaxCount,    _locale_t _Locale);


extern "C++" {


 inline char * __cdecl strchr(   char * _Str,   int _Ch)
	{ return (char*)strchr((const char*)_Str, _Ch); }
 inline char * __cdecl strpbrk(   char * _Str,    const char * _Control)
	{ return (char*)strpbrk((const char*)_Str, _Control); }
 inline char * __cdecl strrchr(   char * _Str,   int _Ch)
	{ return (char*)strrchr((const char*)_Str, _Ch); }
 inline char * __cdecl strstr(   char * _Str,    const char * _SubStr)
	{ return (char*)strstr((const char*)_Str, _SubStr); }
#line 223 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


 inline void * __cdecl memchr(   void * _Pv,   int _C,   size_t _N)
	{ return (void*)memchr((const void*)_Pv, _C, _N); }
#line 228 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
}
#line 230 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"






#line 237 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details."))  char * __cdecl strdup(   const char * _Src);



#line 243 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details."))  int __cdecl strcmpi(   const char * _Str1,    const char * _Str2);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details."))  int __cdecl stricmp(   const char * _Str1,    const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details."))  char * __cdecl strlwr(    char * _Str);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details."))  int __cdecl strnicmp(   const char * _Str1,    const char * _Str,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details."))  char * __cdecl strnset(    char * _Str,   int _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details."))  char * __cdecl strrev(    char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details."))         char * __cdecl strset(    char * _Str,   int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details."))  char * __cdecl strupr(    char * _Str);

#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"









#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  wchar_t * __cdecl _wcsdup(   const wchar_t * _Str);



#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


  errno_t __cdecl wcscat_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src);
#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(    wchar_t (&_Dest)[_Size],    const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }
  wchar_t * __cdecl wcscat(  wchar_t *_Dest,  const wchar_t * _Source);
  const wchar_t * __cdecl wcschr(   const wchar_t * _Str, wchar_t _Ch);
  int __cdecl wcscmp(   const wchar_t * _Str1,    const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src);
#line 282 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size],    const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
  wchar_t * __cdecl wcscpy(  wchar_t *_Dest,  const wchar_t * _Source);
  size_t __cdecl wcscspn(   const wchar_t * _Str,    const wchar_t * _Control);
  size_t __cdecl wcslen(   const wchar_t * _Str);
  size_t __cdecl wcsnlen(   const wchar_t * _Src,   size_t _MaxCount);

 static __inline size_t __cdecl wcsnlen_s(   const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 293 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  errno_t __cdecl wcsncat_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src,   rsize_t _MaxCount);
#line 296 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(    wchar_t (&_Dest)[_Size],    const wchar_t * _Source,   size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
  wchar_t * __cdecl wcsncat(    wchar_t *_Dest,    const wchar_t * _Source,   size_t _Count);
#pragma warning(pop)
  int __cdecl wcsncmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src,   rsize_t _MaxCount);
#line 305 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size],    const wchar_t * _Source,   size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
  wchar_t * __cdecl wcsncpy(   wchar_t *_Dest,    const wchar_t * _Source,   size_t _Count);
  const wchar_t * __cdecl wcspbrk(   const wchar_t * _Str,    const wchar_t * _Control);
  const wchar_t * __cdecl wcsrchr(   const wchar_t * _Str,   wchar_t _Ch);
  size_t __cdecl wcsspn(   const wchar_t * _Str,    const wchar_t * _Control);
  const wchar_t * __cdecl wcsstr(   const wchar_t * _Str,    const wchar_t * _SubStr);
   wchar_t * __cdecl wcstok(    wchar_t * _Str,    const wchar_t * _Delim);

  wchar_t * __cdecl wcstok_s(    wchar_t * _Str,    const wchar_t * _Delim,        wchar_t ** _Context);
#line 315 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
   wchar_t * __cdecl _wcserror(  int _ErrNum);
  errno_t __cdecl _wcserror_s(    wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
   wchar_t * __cdecl __wcserror(   const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(    wchar_t * _Buffer,   size_t _SizeInWords,    const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],    const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

  int __cdecl _wcsicmp(   const wchar_t * _Str1,    const wchar_t * _Str2);
  int __cdecl _wcsicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
  int __cdecl _wcsnicmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
  int __cdecl _wcsnicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(    wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(    wchar_t (&_Dst)[_Size], wchar_t _Val,   size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
  wchar_t * __cdecl _wcsnset(    wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(    wchar_t * _Str);
  errno_t __cdecl _wcsset_s(    wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(    wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
  wchar_t * __cdecl _wcsset(    wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(    wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(    wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
  wchar_t * __cdecl _wcslwr(  wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(    wchar_t * _Str,   size_t _SizeInWords,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(    wchar_t (&_String)[_Size],    _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
  wchar_t * __cdecl _wcslwr_l(    wchar_t *_String,    _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(    wchar_t * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(    wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
  wchar_t * __cdecl _wcsupr(  wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(    wchar_t * _Str,   size_t _Size,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(    wchar_t (&_String)[_Size],    _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
  wchar_t * __cdecl _wcsupr_l(    wchar_t *_String,    _locale_t _Locale);
  size_t __cdecl wcsxfrm(   wchar_t * _Dst,    const wchar_t * _Src,   size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(   wchar_t * _Dst,    const wchar_t *_Src,   size_t _MaxCount,    _locale_t _Locale);
  int __cdecl wcscoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
  int __cdecl _wcscoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
  int __cdecl _wcsicoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
  int __cdecl _wcsicoll_l(   const wchar_t * _Str1,    const wchar_t *_Str2,    _locale_t _Locale);
  int __cdecl _wcsncoll(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
  int __cdecl _wcsncoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);
  int __cdecl _wcsnicoll(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
  int __cdecl _wcsnicoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);




extern "C++" {
 inline wchar_t * __cdecl wcschr(   wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
 inline wchar_t * __cdecl wcspbrk(   wchar_t *_Str,    const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
 inline wchar_t * __cdecl wcsrchr(   wchar_t *_Str,   wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
 inline wchar_t * __cdecl wcsstr(   wchar_t *_Str,    const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 371 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 372 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"






#line 379 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details."))  wchar_t * __cdecl wcsdup(   const wchar_t * _Str);



#line 385 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"





 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details."))  int __cdecl wcsicmp(   const wchar_t * _Str1,    const wchar_t * _Str2);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details."))  int __cdecl wcsnicmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details."))  wchar_t * __cdecl wcsnset(    wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details."))  wchar_t * __cdecl wcsrev(    wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details."))  wchar_t * __cdecl wcsset(    wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details."))  wchar_t * __cdecl wcslwr(    wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details."))  wchar_t * __cdecl wcsupr(    wchar_t * _Str);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details."))  int __cdecl wcsicoll(   const wchar_t * _Str1,    const wchar_t * _Str2);

#line 400 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"



}
#line 408 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

#line 410 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;

using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"





#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

#pragma once










 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





















































typedef unsigned long _fsize_t; 

#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



struct _wfinddata32_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata32i64_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        __int64     size;
        wchar_t     name[260];
};

struct _wfinddata64i32_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata64_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        __int64     size;
        wchar_t     name[260];
};



















#line 144 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 147 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"






























#line 178 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 180 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 181 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

 const unsigned short * __cdecl __pctype_func(void);

 extern const unsigned short *_pctype;


#line 188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





 extern const unsigned short _wctype[];
#line 197 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

 const wctype_t * __cdecl __pwctype_func(void);

 extern const wctype_t *_pwctype;


#line 204 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"







                                
















  int __cdecl iswalpha(  wint_t _C);
  int __cdecl _iswalpha_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswupper(  wint_t _C);
  int __cdecl _iswupper_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswlower(  wint_t _C);
  int __cdecl _iswlower_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswdigit(  wint_t _C);
  int __cdecl _iswdigit_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswxdigit(  wint_t _C);
  int __cdecl _iswxdigit_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswspace(  wint_t _C);
  int __cdecl _iswspace_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswpunct(  wint_t _C);
  int __cdecl _iswpunct_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswalnum(  wint_t _C);
  int __cdecl _iswalnum_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswprint(  wint_t _C);
  int __cdecl _iswprint_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswgraph(  wint_t _C);
  int __cdecl _iswgraph_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswcntrl(  wint_t _C);
  int __cdecl _iswcntrl_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl iswascii(  wint_t _C);
  int __cdecl isleadbyte(  int _C);
  int __cdecl _isleadbyte_l(  int _C,    _locale_t _Locale);

  wint_t __cdecl towupper(  wint_t _C);
  wint_t __cdecl _towupper_l(  wint_t _C,    _locale_t _Locale);
  wint_t __cdecl towlower(  wint_t _C);
  wint_t __cdecl _towlower_l(  wint_t _C,    _locale_t _Locale); 
  int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
  int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,    _locale_t _Locale);

  int __cdecl __iswcsymf(  wint_t _C);
  int __cdecl _iswcsymf_l(  wint_t _C,    _locale_t _Locale);
  int __cdecl __iswcsym(  wint_t _C);
  int __cdecl _iswcsym_l(  wint_t _C,    _locale_t _Locale);

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);


#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"












#line 285 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

    wchar_t * __cdecl _wgetcwd(  wchar_t * _DstBuf,   int _SizeInWords);
    wchar_t * __cdecl _wgetdcwd(  int _Drive,   wchar_t * _DstBuf,   int _SizeInWords);
   wchar_t * __cdecl _wgetdcwd_nolock(  int _Drive,   wchar_t * _DstBuf,   int _SizeInWords);





#line 295 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

  int __cdecl _wchdir(   const wchar_t * _Path);
  int __cdecl _wmkdir(   const wchar_t * _Path);
  int __cdecl _wrmdir(   const wchar_t * _Path);


#line 302 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



  int __cdecl _waccess(   const wchar_t * _Filename,   int _AccessMode);
  errno_t __cdecl _waccess_s(   const wchar_t * _Filename,   int _AccessMode);
  int __cdecl _wchmod(   const wchar_t * _Filename,   int _Mode);
   int __cdecl _wcreat(   const wchar_t * _Filename,   int _PermissionMode);
  intptr_t __cdecl _wfindfirst32(   const wchar_t * _Filename,   struct _wfinddata32_t * _FindData);
  int __cdecl _wfindnext32(  intptr_t _FindHandle,   struct _wfinddata32_t * _FindData);
 int __cdecl _wunlink(   const wchar_t * _Filename);
  int __cdecl _wrename(   const wchar_t * _OldFilename,    const wchar_t * _NewFilename);
 errno_t __cdecl _wmktemp_s(    wchar_t * _TemplateName,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
  wchar_t * __cdecl _wmktemp(  wchar_t *_TemplateName);

  intptr_t __cdecl _wfindfirst32i64(   const wchar_t * _Filename,   struct _wfinddata32i64_t * _FindData);
  intptr_t __cdecl _wfindfirst64i32(   const wchar_t * _Filename,   struct _wfinddata64i32_t * _FindData);
  intptr_t __cdecl _wfindfirst64(   const wchar_t * _Filename,   struct _wfinddata64_t * _FindData);
  int __cdecl _wfindnext32i64(  intptr_t _FindHandle,   struct _wfinddata32i64_t * _FindData);
  int __cdecl _wfindnext64i32(  intptr_t _FindHandle,   struct _wfinddata64i32_t * _FindData);
  int __cdecl _wfindnext64(  intptr_t _FindHandle,   struct _wfinddata64_t * _FindData);

  errno_t __cdecl _wsopen_s(  int * _FileHandle,    const wchar_t * _Filename,   int _OpenFlag,   int _ShareFlag,   int _PermissionFlag);






#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


extern "C++"   int __cdecl _wopen(   const wchar_t * _Filename,   int _OpenFlag,   int _PermissionMode = 0);
extern "C++"   int __cdecl _wsopen(   const wchar_t * _Filename,   int _OpenFlag,   int _ShareFlag, int _PermissionMode = 0);

#line 338 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 341 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





  wchar_t * __cdecl _wsetlocale(  int _Category,    const wchar_t * _Locale);


#line 350 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





 intptr_t __cdecl _wexecl(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexecle(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexeclp(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexeclpe(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexecv(   const wchar_t * _Filename,    const wchar_t * const * _ArgList);
 intptr_t __cdecl _wexecve(   const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);
 intptr_t __cdecl _wexecvp(   const wchar_t * _Filename,    const wchar_t * const * _ArgList);
 intptr_t __cdecl _wexecvpe(   const wchar_t * _Filename,    const wchar_t * const * _ArgList, 
           const wchar_t * const * _Env);
 intptr_t __cdecl _wspawnl(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnle(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnlp(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnlpe(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnv(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList);
 intptr_t __cdecl _wspawnve(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);
 intptr_t __cdecl _wspawnvp(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList);
 intptr_t __cdecl _wspawnvpe(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);


 int __cdecl _wsystem(   const wchar_t * _Command);
#line 379 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 382 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


































#line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


























#line 444 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"







typedef unsigned short _ino_t;      


typedef unsigned short ino_t;
#line 458 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 460 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


typedef unsigned int _dev_t;        


typedef unsigned int dev_t;
#line 467 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 469 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


typedef long _off_t;                


typedef long off_t;
#line 476 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 478 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



struct _stat32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };

#line 512 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

struct _stat32i64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };























#line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



#line 582 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





 int __cdecl _wstat32(   const wchar_t * _Name,   struct _stat32 * _Stat);

 int __cdecl _wstat32i64(   const wchar_t * _Name,   struct _stat32i64 * _Stat);
 int __cdecl _wstat64i32(   const wchar_t * _Name,   struct _stat64i32 * _Stat);
 int __cdecl _wstat64(   const wchar_t * _Name,   struct _stat64 * _Stat);


#line 595 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 597 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"










  errno_t __cdecl _cgetws_s(    wchar_t * _Buffer, size_t _SizeInWords,   size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
  wchar_t * __cdecl _cgetws(    wchar_t *_Buffer);
  wint_t __cdecl _getwch(void);
  wint_t __cdecl _getwche(void);
  wint_t __cdecl _putwch(wchar_t _WCh);
  wint_t __cdecl _ungetwch(wint_t _WCh);
  int __cdecl _cputws(   const wchar_t * _String);
  int __cdecl _cwprintf(    const wchar_t * _Format, ...);
  int __cdecl _cwprintf_s(    const wchar_t * _Format, ...);
   int __cdecl _cwscanf(    const wchar_t * _Format, ...);
   int __cdecl _cwscanf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _cwscanf_s(    const wchar_t * _Format, ...);
  int __cdecl _cwscanf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
  int __cdecl _vcwprintf(    const wchar_t *_Format, va_list _ArgList);
  int __cdecl _vcwprintf_s(    const wchar_t *_Format, va_list _ArgList);

  int __cdecl _cwprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vcwprintf_p(    const wchar_t*  _Format, va_list _ArgList);

 int __cdecl _cwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 int __cdecl _cwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 int __cdecl _vcwprintf_l(    const wchar_t *_Format,    _locale_t _Locale, va_list _ArgList);
 int __cdecl _vcwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 int __cdecl _cwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 int __cdecl _vcwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

 wint_t __cdecl _putwch_nolock(wchar_t _WCh);
 wint_t __cdecl _getwch_nolock(void);
 wint_t __cdecl _getwche_nolock(void);
 wint_t __cdecl _ungetwch_nolock(wint_t _WCh);


#line 641 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"































































































































































































































  errno_t __cdecl _itow_s (  int _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value,   wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _itow( int _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ltow_s (  long _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value,   wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _ltow( long _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ultow_s (  unsigned long _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value,   wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
  wchar_t * __cdecl _ultow( unsigned long _Value,   wchar_t *_Dest,  int _Radix);
  double __cdecl wcstod(   const wchar_t * _Str,     wchar_t ** _EndPtr);
  double __cdecl _wcstod_l(   const wchar_t *_Str,     wchar_t ** _EndPtr,    _locale_t _Locale);
  long   __cdecl wcstol(   const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
  long   __cdecl _wcstol_l(   const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
  unsigned long __cdecl wcstoul(   const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
  unsigned long __cdecl _wcstoul_l(   const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
   wchar_t * __cdecl _wgetenv(   const wchar_t * _VarName);
  errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,     wchar_t * _DstBuf,   size_t _DstSizeInWords,    const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,   wchar_t (&_Dest)[_Size],    const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }




#line 887 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

  errno_t __cdecl _wdupenv_s(    wchar_t **_Buffer,   size_t *_BufferSizeInWords,    const wchar_t *_VarName);



#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"




  double __cdecl _wtof(   const wchar_t *_Str);
  double __cdecl _wtof_l(   const wchar_t *_Str,    _locale_t _Locale);
  int __cdecl _wtoi(   const wchar_t *_Str);
  int __cdecl _wtoi_l(   const wchar_t *_Str,    _locale_t _Locale);
  long __cdecl _wtol(   const wchar_t *_Str);
  long __cdecl _wtol_l(   const wchar_t *_Str,    _locale_t _Locale);

  errno_t __cdecl _i64tow_s(  __int64 _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
  wchar_t * __cdecl _i64tow(  __int64 _Val,    wchar_t * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64tow_s(  unsigned __int64 _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
  wchar_t * __cdecl _ui64tow(  unsigned __int64 _Val,    wchar_t * _DstBuf,   int _Radix);
  __int64   __cdecl _wtoi64(   const wchar_t *_Str);
  __int64   __cdecl _wtoi64_l(   const wchar_t *_Str,    _locale_t _Locale);
  __int64   __cdecl _wcstoi64(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
  __int64   __cdecl _wcstoi64_l(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix,    _locale_t _Locale);
  unsigned __int64  __cdecl _wcstoui64(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
  unsigned __int64  __cdecl _wcstoui64_l(   const wchar_t *_Str ,     wchar_t ** _EndPtr,   int _Radix,    _locale_t _Locale);


#line 917 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"










#line 928 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

  wchar_t * __cdecl _wfullpath(    wchar_t * _FullPath,    const wchar_t * _Path,   size_t _SizeInWords);



#line 934 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

  errno_t __cdecl _wmakepath_s(    wchar_t * _PathResult,   size_t _SizeInBytes,    const wchar_t * _Drive,    const wchar_t * _Dir,    const wchar_t * _Filename,
           const wchar_t * _Ext);        
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(  wchar_t (&_ResultPath)[_Size],    const wchar_t * _Drive,    const wchar_t * _Dir,    const wchar_t * _Filename,    const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
  void __cdecl _wmakepath(  wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);




  int    __cdecl _wputenv(   const wchar_t * _EnvString);
  errno_t __cdecl _wputenv_s(   const wchar_t * _Name,    const wchar_t * _Value);
 errno_t __cdecl _wsearchenv_s(   const wchar_t * _Filename,    const wchar_t * _EnvVar,     wchar_t * _ResultPath,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(   const wchar_t * _Filename,    const wchar_t * _EnvVar,   wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
  void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,   wchar_t *_ResultPath);
  void   __cdecl _wsplitpath(   const wchar_t * _FullPath,    wchar_t * _Drive,    wchar_t * _Dir,    wchar_t * _Filename,    wchar_t * _Ext);
 errno_t __cdecl _wsplitpath_s(   const wchar_t * _FullPath, 
		    wchar_t * _Drive,   size_t _DriveSize, 
		    wchar_t * _Dir,   size_t _DirSize, 
		    wchar_t * _Filename,   size_t _FilenameSize, 
		    wchar_t * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(  const wchar_t *_Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }


#line 958 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"






















































































































































struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 1123 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"




 
  wchar_t * __cdecl _wasctime(  const struct tm * _Tm);
 errno_t __cdecl _wasctime_s(    wchar_t *_Buf,   size_t _SizeInWords,   const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

  wchar_t * __cdecl _wctime32(  const __time32_t *_Time);
 errno_t __cdecl _wctime32_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

 size_t __cdecl wcsftime(    wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t * _Format,    const struct tm * _Tm);
 size_t __cdecl _wcsftime_l(    wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t *_Format,   const struct tm *_Tm,    _locale_t _Locale);

 errno_t __cdecl _wstrdate_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wstrdate(  wchar_t *_Buffer);

 errno_t __cdecl _wstrtime_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
  wchar_t * __cdecl _wstrtime(  wchar_t *_Buffer);

  wchar_t * __cdecl _wctime64(  const __time64_t * _Time);
 errno_t __cdecl _wctime64_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"












#pragma once







#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"





#pragma warning(push)
#pragma warning(disable:4996)















static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _wctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl _wctime_s(wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}
#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"

#pragma warning(pop)

#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"
#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"
#line 1153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 1154 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 1157 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


typedef int mbstate_t;
typedef wchar_t _Wint_t;

 wint_t __cdecl btowc(int);
 size_t __cdecl mbrlen(     const char * _Ch,   size_t _SizeInBytes,
                                mbstate_t * _State);
 size_t __cdecl mbrtowc(   wchar_t * _DstCh,      const char * _SrcCh,
                                 size_t _SizeInBytes,   mbstate_t * _State);
 errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,     wchar_t * _Dst,   size_t _Size,        const char ** _PSrc,   size_t _N,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(  size_t * _Retval,   wchar_t (&_Dest)[_Size],        const char ** _PSource,   size_t _Count,   mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
  size_t __cdecl mbsrtowcs(  wchar_t *_Dest,  const char ** _PSrc,  size_t _Count,  mbstate_t * _State);

 errno_t __cdecl wcrtomb_s(  size_t * _Retval,     char * _Dst,
          size_t _SizeInBytes,   wchar_t _Ch,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(  size_t * _Retval,     char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
  size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t * _State);
 errno_t __cdecl wcsrtombs_s(  size_t * _Retval,     char * _Dst,
          size_t _SizeInBytes,        const wchar_t ** _Src,   size_t _Size,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(  size_t * _Retval,     char (&_Dest)[_Size],        const wchar_t ** _PSrc,   size_t _Count,   mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
  size_t __cdecl wcsrtombs(  char *_Dest,  const wchar_t ** _PSource,  size_t _Count,  mbstate_t * _State);
 int __cdecl wctob(  wint_t _WCh);






#line 1187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
  void *  __cdecl memmove(    void * _Dst,    const void * _Src,   size_t _Size);
#line 1189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
 void *  __cdecl memcpy(    void * _Dst,    const void * _Src,   size_t _Size);

 errno_t __cdecl memcpy_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
 errno_t __cdecl memmove_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
#line 1194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
__inline int __cdecl fwide(   FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit(   const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr(   const wchar_t *_S,   wchar_t _C,   size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp(   const wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }

__inline  wchar_t * __cdecl wmemcpy(  wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
            return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }

__inline  wchar_t * __cdecl wmemmove(    wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
#pragma warning( disable : 6387)
			
            return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }


errno_t __cdecl wmemcpy_s(    wchar_t *_S1,   rsize_t _N1,    const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s(    wchar_t *_S1,   rsize_t _N1,    const wchar_t *_S2,   rsize_t _N);
#line 1231 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

__inline wchar_t * __cdecl wmemset(    wchar_t *_S,   wchar_t _C,   size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr(   wchar_t *_S,   wchar_t _C,   size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}
#line 1248 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 1249 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


}       
#line 1253 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#pragma pack(pop)

#line 1257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t;
using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;

using :: wcstod; using :: wcstoul; using :: wcsstr;

using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;
}
 #line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"





#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"












#pragma once

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




#pragma pack(push,8)












extern "C" {
#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

 





typedef void *_HFILE; 























#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);



#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




 





 










typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

 





































 














typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);


#line 166 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


#line 169 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;


 











#line 194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



 













#line 212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 216 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 220 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 224 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"





























































































































































































































































































































































































































































































































































































































































































































































































































#line 1022 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


}



extern "C++" {



 







 
#pragma warning(suppress: 4985)
 void * __cdecl operator new[](size_t _Size);


 void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
 void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);

inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }
inline void __cdecl operator delete[](void * _P, int, const char *, int)
        { ::operator delete[](_P); }
#line 1067 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"
























































#line 1124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

}

#line 1128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#line 1130 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#pragma pack(pop)

#line 1134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  


extern   const streamoff _BADOFF;
  #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate(_Stz)
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	 static const _Statetype _Stz;	
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

	
template<class _Statetype>
	 const _Statetype fpos<_Statetype>::_Stz = _Statetype();

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		   const _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(   const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		   const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Dest_size >= _Count)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		   const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return ((int_type)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static int_type __cdecl eof()
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

 













#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		   const _Elem *_First2, size_t _Count)
		{	
		::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((wint_t)(0xFFFF));
		}
	};

 
		
template<> struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: wmemcmp((const wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemcpy((wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		   const _Elem *_First2, size_t _Count)
		{	
		::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: wmemchr((const wchar_t *)_First,
			_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemmove((wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((wint_t)(0xFFFF));
		}
	};
 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		   const _Elem *_First2, size_t _Count)
		{	
		::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return ((unsigned char)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 








#line 631 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;


 










#line 684 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 690 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 691 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"





#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"

#pragma once





 
extern "C" {
 #line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"


#pragma pack(push, 8)

		





		






		
typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
void __cdecl _Feraise(int);

		
 double __cdecl _Cosh(double, double);
 short __cdecl _Dtest(double *);
 short __cdecl _Exp(double *, double, short);
 double __cdecl _Sinh(double, double);
extern   _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
 float __cdecl _FCosh(float, float);
 short __cdecl _FDtest(float *);
 short __cdecl _FExp(float *, float, short);
 float __cdecl _FSinh(float, float);
extern   _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
 long double __cdecl _LCosh(long double, long double);
 short __cdecl _LDtest(long double *);
 short __cdecl _LExp(long double *, long double, short);
 long double __cdecl _LSinh(long double, long double);
extern   _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"


#pragma pack(pop)

#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"
#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"











#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"






























































#line 81 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"








#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"


extern "C" {
#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"











































  unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
   unsigned int __cdecl _controlfp(  unsigned int _NewValue,  unsigned int _Mask);
#pragma warning(pop)
  void __cdecl _set_controlfp(  unsigned int _NewValue,   unsigned int _Mask);
  errno_t __cdecl _controlfp_s(  unsigned int *_CurrentState,   unsigned int _NewValue,   unsigned int _Mask);
  unsigned int __cdecl _statusfp(void);
  void __cdecl _fpreset(void);


  void __cdecl _statusfp2(  unsigned int *_X86_status,   unsigned int *_SSE2_status);
#line 96 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"










































































#line 171 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

  unsigned int __cdecl _control87(  unsigned int _NewValue,  unsigned int _Mask);

  int __cdecl __control87_2(  unsigned int _NewValue,   unsigned int _Mask,
                                    unsigned int* _X86_cw,   unsigned int* _Sse2_cw);
#line 177 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"



  extern int * __cdecl __fpecode(void);































  double __cdecl _copysign (  double _Number,   double _Sign);
  double __cdecl _chgsign (  double _X);

#line 216 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
  double __cdecl _scalb(  double _X,   long _Y);
  double __cdecl _logb(  double _X);
  double __cdecl _nextafter(  double _X,   double _Y);
  int    __cdecl _finite(  double _X);
  int    __cdecl _isnan(  double _X);
  int    __cdecl _fpclass(  double _X);

























  void __cdecl fpreset(void);





























































#line 310 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"


}
#line 314 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

#line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"

#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"





#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\climits"

#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"














#pragma once

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
















#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"









































#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"






#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"







#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 94 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
































#line 127 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\climits"
#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\climits"





#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

#pragma once










 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"





#pragma pack(push,8)


extern "C" {
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"








struct _exception {
        int type;       
        char *name;     
        double arg1;    
        double arg2;    
        double retval;  
        } ;


#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"







struct _complex {
        double x,y; 
        } ;




#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"


#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"






















 extern double _HUGE;


#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"








        int     __cdecl abs(  int _X);
        long    __cdecl labs(  long _X);
        long long __cdecl llabs(  long long _X);
#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

        double  __cdecl acos(  double _X);
        double  __cdecl asin(  double _X);
        double  __cdecl atan(  double _X);
        double  __cdecl atan2(  double _Y,   double _X);





        double  __cdecl cos(  double _X);
        double  __cdecl cosh(  double _X);
        double  __cdecl exp(  double _X);
 double  __cdecl fabs(  double _X);
        double  __cdecl fmod(  double _X,   double _Y);
        double  __cdecl log(  double _X);
        double  __cdecl log10(  double _X);
        double  __cdecl pow(  double _X,   double _Y);
        double  __cdecl sin(  double _X);
        double  __cdecl sinh(  double _X);
        double  __cdecl tan(  double _X);
        double  __cdecl tanh(  double _X);
        double  __cdecl sqrt(  double _X);


  double  __cdecl atof(   const char *_String);
  double  __cdecl _atof_l(   const char *_String,    _locale_t _Locale);
#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

 double  __cdecl _cabs(  struct _complex _Complex_value);
 double  __cdecl ceil(  double _X);
 double  __cdecl floor(  double _X);
 double  __cdecl frexp(  double _X,   int * _Y);
 double  __cdecl _hypot(  double _X,   double _Y);
 float   __cdecl _hypotf(  float _X,   float _Y);
 double  __cdecl _j0(  double _X );
 double  __cdecl _j1(  double _X );
 double  __cdecl _jn(int _X,   double _Y);
 double  __cdecl ldexp(  double _X,   int _Y);




#line 149 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
        int     __cdecl _matherr(   struct _exception * _Except);
#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 152 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
 double  __cdecl modf(  double _X,   double * _Y);

 double  __cdecl _y0(  double _X);
 double  __cdecl _y1(  double _X);
 double  __cdecl _yn(  int _X,   double _Y);




static __inline double __cdecl hypot(  double _X,   double _Y)
{
    return _hypot(_X, _Y);
}

static __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

#line 172 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"



 int     __cdecl _set_SSE2_enable(  int _Flag);

#line 178 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"






































#line 217 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"











































#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"



































































inline long double acosl(  long double _X)
        {return (acos((double)_X)); }
inline long double asinl(  long double _X)
        {return (asin((double)_X)); }
inline long double atanl(  long double _X)
        {return (atan((double)_X)); }
inline long double atan2l(  long double _Y,   long double _X)
        {return (atan2((double)_Y, (double)_X)); }
inline long double ceill(  long double _X)
        {return (ceil((double)_X)); }
inline long double cosl(  long double _X)
        {return (cos((double)_X)); }
inline long double coshl(  long double _X)
        {return (cosh((double)_X)); }
inline long double expl(  long double _X)
        {return (exp((double)_X)); }
inline long double fabsl(  long double _X)
        {return (fabs((double)_X)); }
inline long double floorl(  long double _X)
        {return (floor((double)_X)); }
inline long double fmodl(  long double _X,   long double _Y)
        {return (fmod((double)_X, (double)_Y)); }
inline long double frexpl(  long double _X,   int *_Y)
        {return (frexp((double)_X, _Y)); }
inline long double ldexpl(  long double _X,   int _Y)
        {return (ldexp((double)_X, _Y)); }
inline long double logl(  long double _X)
        {return (log((double)_X)); }
inline long double log10l(  long double _X)
        {return (log10((double)_X)); }
inline long double modfl(  long double _X,   long double *_Y)
        {double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (long double)_Di;
        return (_Df); }
inline long double powl(  long double _X,   long double _Y)
        {return (pow((double)_X, (double)_Y)); }
inline long double sinl(  long double _X)
        {return (sin((double)_X)); }
inline long double sinhl(  long double _X)
        {return (sinh((double)_X)); }
inline long double sqrtl(  long double _X)
        {return (sqrt((double)_X)); }

inline long double tanl(  long double _X)
        {return (tan((double)_X)); }


#line 376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

inline long double tanhl(  long double _X)
        {return (tanh((double)_X)); }

inline long double _chgsignl(  long double _Number)
{
    return _chgsign(static_cast<double>(_Number)); 
}

inline long double _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign(static_cast<double>(_Number), static_cast<double>(_Sign)); 
}

inline float frexpf(  float _X,   int *_Y)
        {return ((float)frexp((double)_X, _Y)); }


inline float fabsf(  float _X)
        {return ((float)fabs((double)_X)); }
inline float ldexpf(  float _X,   int _Y)
        {return ((float)ldexp((double)_X, _Y)); }

inline float acosf(  float _X)
        {return ((float)acos((double)_X)); }
inline float asinf(  float _X)
        {return ((float)asin((double)_X)); }
inline float atanf(  float _X)
        {return ((float)atan((double)_X)); }
inline float atan2f(  float _Y,   float _X)
        {return ((float)atan2((double)_Y, (double)_X)); }
inline float ceilf(  float _X)
        {return ((float)ceil((double)_X)); }
inline float cosf(  float _X)
        {return ((float)cos((double)_X)); }
inline float coshf(  float _X)
        {return ((float)cosh((double)_X)); }
inline float expf(  float _X)
        {return ((float)exp((double)_X)); }
inline float floorf(  float _X)
        {return ((float)floor((double)_X)); }
inline float fmodf(  float _X,   float _Y)
        {return ((float)fmod((double)_X, (double)_Y)); }
inline float logf(  float _X)
        {return ((float)log((double)_X)); }
inline float log10f(  float _X)
        {return ((float)log10((double)_X)); }
inline float modff(  float _X,   float *_Y)
        { double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (float)_Di;
        return ((float)_Df); }
inline float powf(  float _X,   float _Y)
        {return ((float)pow((double)_X, (double)_Y)); }
inline float sinf(  float _X)
        {return ((float)sin((double)_X)); }
inline float sinhf(  float _X)
        {return ((float)sinh((double)_X)); }
inline float sqrtf(  float _X)
        {return ((float)sqrt((double)_X)); }
inline float tanf(  float _X)
        {return ((float)tan((double)_X)); }
inline float tanhf(  float _X)
        {return ((float)tanh((double)_X)); }
#line 440 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 441 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 442 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 443 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

















 extern double HUGE;


#line 464 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_cabs" ". See online help for details."))  double  __cdecl cabs(  struct _complex _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j0" ". See online help for details."))  double  __cdecl j0(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j1" ". See online help for details."))  double  __cdecl j1(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_jn" ". See online help for details."))  double  __cdecl jn(  int _X,   double _Y);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y0" ". See online help for details."))  double  __cdecl y0(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y1" ". See online help for details."))  double  __cdecl y1(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_yn" ". See online help for details."))  double  __cdecl yn(  int _X,   double _Y);

#line 474 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#line 476 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"


}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y)
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs(  double _X)
        {return (fabs(_X)); }
inline double __cdecl pow(  double _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs(  float _X)
        {return (fabsf(_X)); }
inline float __cdecl acos(  float _X)
        {return (acosf(_X)); }
inline float __cdecl asin(  float _X)
        {return (asinf(_X)); }
inline float __cdecl atan(  float _X)
        {return (atanf(_X)); }
inline float __cdecl atan2(  float _Y,   float _X)
        {return (atan2f(_Y, _X)); }
inline float __cdecl ceil(  float _X)
        {return (ceilf(_X)); }
inline float __cdecl cos(  float _X)
        {return (cosf(_X)); }
inline float __cdecl cosh(  float _X)
        {return (coshf(_X)); }
inline float __cdecl exp(  float _X)
        {return (expf(_X)); }
inline float __cdecl fabs(  float _X)
        {return (fabsf(_X)); }
inline float __cdecl floor(  float _X)
        {return (floorf(_X)); }
inline float __cdecl fmod(  float _X,   float _Y)
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp(  float _X,   int * _Y)
        {return (frexpf(_X, _Y)); }
inline float __cdecl ldexp(  float _X,   int _Y)
        {return (ldexpf(_X, _Y)); }
inline float __cdecl log(  float _X)
        {return (logf(_X)); }
inline float __cdecl log10(  float _X)
        {return (log10f(_X)); }
inline float __cdecl modf(  float _X,   float * _Y)
        {return (modff(_X, _Y)); }
inline float __cdecl pow(  float _X,   float _Y)
        {return (powf(_X, _Y)); }
inline float __cdecl pow(  float _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl sin(  float _X)
        {return (sinf(_X)); }
inline float __cdecl sinh(  float _X)
        {return (sinhf(_X)); }
inline float __cdecl sqrt(  float _X)
        {return (sqrtf(_X)); }
inline float __cdecl tan(  float _X)
        {return (tanf(_X)); }
inline float __cdecl tanh(  float _X)
        {return (tanhf(_X)); }
inline long double __cdecl abs(  long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl acos(  long double _X)
        {return (acosl(_X)); }
inline long double __cdecl asin(  long double _X)
        {return (asinl(_X)); }
inline long double __cdecl atan(  long double _X)
        {return (atanl(_X)); }
inline long double __cdecl atan2(  long double _Y,   long double _X)
        {return (atan2l(_Y, _X)); }
inline long double __cdecl ceil(  long double _X)
        {return (ceill(_X)); }
inline long double __cdecl cos(  long double _X)
        {return (cosl(_X)); }
inline long double __cdecl cosh(  long double _X)
        {return (coshl(_X)); }
inline long double __cdecl exp(  long double _X)
        {return (expl(_X)); }
inline long double __cdecl fabs(  long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl floor(  long double _X)
        {return (floorl(_X)); }
inline long double __cdecl fmod(  long double _X,   long double _Y)
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp(  long double _X,   int * _Y)
        {return (frexpl(_X, _Y)); }
inline long double __cdecl ldexp(  long double _X,   int _Y)
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl log(  long double _X)
        {return (logl(_X)); }
inline long double __cdecl log10(  long double _X)
        {return (log10l(_X)); }
inline long double __cdecl modf(  long double _X,   long double * _Y)
        {return (modfl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   long double _Y)
        {return (powl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl sin(  long double _X)
        {return (sinl(_X)); }
inline long double __cdecl sinh(  long double _X)
        {return (sinhl(_X)); }
inline long double __cdecl sqrt(  long double _X)
        {return (sqrtl(_X)); }
inline long double __cdecl tan(  long double _X)
        {return (tanl(_X)); }
inline long double __cdecl tanh(  long double _X)
        {return (tanhl(_X)); }

}
#line 598 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#pragma pack(pop)

#line 602 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"







































#line 642 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

 

namespace std {
using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: abs;

using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;
}
 #line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"





#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"



 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {










 

		
typedef enum
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct  _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static const bool has_denorm_loss = (bool)(false);
	static const bool has_infinity = (bool)(false);
	static const bool has_quiet_NaN = (bool)(false);
	static const bool has_signaling_NaN = (bool)(false);
	static const bool is_bounded = (bool)(false);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(false);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const bool is_specialized = (bool)(false);
	static const bool tinyness_before = (bool)(false);
	static const bool traps = (bool)(false);
	static const float_round_style round_style = (float_round_style)(round_toward_zero);
	static const int digits = (int)(0);
	static const int digits10 = (int)(0);

 
	static const int max_digits10 = (int)(0);
 #line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)(0);
	static const int max_exponent10 = (int)(0);
	static const int min_exponent = (int)(0);
	static const int min_exponent10 = (int)(0);
	static const int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static _Ty (__cdecl min)() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (_Ty(0));
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (_Ty(0));
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct  _Num_int_base
	: public _Num_base
	{	
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(true);
	static const bool is_integer = (bool)(true);
	static const bool is_modulo = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const int radix = (int)(2);
	};

		
struct  _Num_float_base
	: public _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static const bool has_denorm_loss = (bool)(true);
	static const bool has_infinity = (bool)(true);
	static const bool has_quiet_NaN = (bool)(true);
	static const bool has_signaling_NaN = (bool)(true);
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(true);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const bool tinyness_before = (bool)(true);
	static const bool traps = (bool)(true);
	static const float_round_style round_style = (float_round_style)(round_to_nearest);
	static const int radix = (int)(2);
	};

		
template<> class  numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (127);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 208 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)((-128) != 0);
	static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 243 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 247 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 248 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((_Ty)0x0000);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return ((_Ty)0xffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(0x0000 != 0);
	static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
#line 307 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 314 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<_Bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (false);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (true);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 339 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const int digits = (int)(1);
	static const int digits10 = (int)(0);

 
	static const int max_digits10 = (int)(0);
 #line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (127);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 - 1);
	static const int digits10 = (int)((8 - 1) * 301L / 1000);

 
	static const int max_digits10 = (int)(2 + (8 - 1) * 301L / 1000);
 #line 441 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 466 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8);
	static const int digits10 = (int)(8 * 301L / 1000);

 
	static const int max_digits10 = (int)(2 + (8) * 301L / 1000);
 #line 504 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-32768));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (32767);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 529 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (short) - 1);
	static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
#line 564 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (short) - 1) * 301L / 1000);
#line 568 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 569 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

 
		
template<> class  numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 595 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned short));
	static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
#line 630 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned short)) * 301L / 1000);
#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 635 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};
 #line 637 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 



























































#line 699 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

		
template<> class  numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-2147483647 - 1));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (2147483647);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 723 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (int) - 1);
	static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
#line 758 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (int) - 1) * 301L / 1000);
#line 762 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 763 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 788 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned int));
	static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
#line 823 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned int)) * 301L / 1000);
#line 827 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 828 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-2147483647L - 1));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (2147483647L);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 853 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (long) - 1);
	static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
#line 888 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (long) - 1) * 301L / 1000);
#line 892 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffffUL);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 918 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned long));
	static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
#line 953 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned long)) * 301L / 1000);
#line 957 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 958 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

 



























































#line 1021 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
		
template<> class  numeric_limits<__int64>
	: public _Num_int_base
	{	
public:
	typedef __int64 _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0x7fffffffffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 1046 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (__int64) - 1);
	static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);
#line 1081 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (__int64) - 1) * 301L / 1000);
#line 1085 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 1086 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class  numeric_limits<unsigned __int64>
	: public _Num_int_base
	{	
public:
	typedef unsigned __int64 _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffffffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 1111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned __int64));
	static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);
#line 1146 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned __int64)) * 301L / 1000);
#line 1150 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 1151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};
 #line 1153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

		
template<> class  numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (1.175494351e-38F);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (3.402823466e+38F);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1177 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (1.192092896e-07F);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _FDenorm._Float);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _FInf._Float);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _FNan._Float);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _FSnan._Float);
		}

	static const int digits = (int)(24);
	static const int digits10 = (int)(6);

 
	static const int max_digits10 = (int)(2 + 6);
 #line 1214 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)128);
	static const int max_exponent10 = (int)((int)38);
	static const int min_exponent = (int)((int)(-125));
	static const int min_exponent10 = (int)((int)(-37));
	};

		
template<> class  numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1244 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _Denorm._Double);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _Inf._Double);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _Nan._Double);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _Snan._Double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

 
	static const int max_digits10 = (int)(2 + 15);
 #line 1281 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

		
template<> class  numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _LDenorm._Long_double);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _LInf._Long_double);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _LNan._Long_double);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _LSnan._Long_double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

 
	static const int max_digits10 = (int)(2 + 15);
 #line 1348 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

  
























































































































































































































































































#line 1637 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 1642 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1643 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\limits"






#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 

 

#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

  

	



































































































































namespace std {		
	
template<class _T1,
	class _Ret>
	struct unary_function;

	
template<class _T1,
	class _T2,
	class _Ret>
	struct binary_function;

	namespace tr1 {	
	
struct _Nil
	{	
	};
static _Nil _Nil_obj;

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static const _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _First,
	bool _Second>
	struct _Or;
template<>
	struct _Or<false, false>
		: false_type
		{	
		};

template<>
	struct _Or<false, true>
		: true_type
		{	
		};

template<>
	struct _Or<true, false>
		: true_type
		{	
		};

template<>
	struct _Or<true, true>
		: true_type
		{	
		};

	
template<bool>
	struct _Cat_base;
template<>
	struct _Cat_base<false>
	: false_type
	{	
	};

template<>
	struct _Cat_base<true>
	: true_type
	{	
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<__int64>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned __int64>
		: true_type
	{	
	};
 #line 315 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct _Remove_reference
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_reference<_Ty&>
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_reference<_Ty&&>
	{	
	typedef _Ty _Type;
	};

	
template<class _Ty>
	struct _Remove_rvalue_reference
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_rvalue_reference<_Ty&&>
	{	
	typedef _Ty _Type;
	};

	
template<class _Tgt,
	class _Src>
	struct _Copy_cv
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef const _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, volatile _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef volatile _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const volatile _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef const volatile _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, _Src&>
	{	
	typedef typename _Copy_cv<_Tgt, _Src>::_Type _Type;
	};

	
 






	
_No _Has_result_type(...);

template<class _Ty>
	_Yes _Has_result_type(_Ty *,
		typename _Remove_reference<typename _Ty::result_type>::_Type * = 0);



	}	
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 436 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"
#line 437 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"





#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)

	


  

  


  
  
  
  


  
  
  
  
  

  

  

  

  


  

  

  

  


namespace std {
	namespace tr1 {	
	
template<class _Ty>
	struct _Ptr_traits
	{	
	};

template<class _Ty>
	struct _Ptr_traits<_Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<const _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<volatile _Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Ptr_traits<const volatile _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Is_funptr
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_memfunptr
		: false_type
	{	
	};

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret      >
	struct _Is_funptr<_Ret (*)(    )>
	: true_type
	{	
	};

template<class _Ret      >
	struct _Is_funptr<_Ret (*)(     ...)>
	: true_type
	{	
	};

 















































#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0    >
	struct _Is_funptr<_Ret (*)(_Arg0    )>
	: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_funptr<_Ret (*)(_Arg0     ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  )>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_funptr<_Ret (*)(_Arg0 ,   _Arg1)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_funptr<_Ret (*)(_Arg0 ,   _Arg1 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 100 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_const<const _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_volatile<volatile _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

template<class _Ty>
	struct add_const<_Ty&>
	{	
	typedef _Ty& type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

template<class _Ty>
	struct add_volatile<_Ty&>
	{	
	typedef _Ty& type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef typename add_const<typename add_volatile<_Ty>::type>::type type;
	};

	
template<class _Ty>
	struct remove_reference
	: _Remove_reference<_Ty>
	{	
	typedef typename _Remove_reference<_Ty>::_Type type;
	};

	
template<class _Ty>
	struct add_reference
	{	
	typedef typename _Remove_reference<_Ty>::_Type& type;
	};

template<>
	struct add_reference<void>
	{	
	typedef void type;
	};

template<>
	struct add_reference<const void>
	{	
	typedef const void type;
	};

template<>
	struct add_reference<volatile void>
	{	
	typedef volatile void type;
	};

template<>
	struct add_reference<const volatile void>
	{	
	typedef const volatile void type;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename add_reference<_Ty>::type type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef _Ty && type;
	};

template<class _Ty>
	struct add_rvalue_reference<_Ty&>
	{	
	typedef _Ty& type;
	};

template<>
	struct add_rvalue_reference<void>
	{	
	typedef void type;
	};

template<>
	struct add_rvalue_reference<const void>
	{	
	typedef const void type;
	};

template<>
	struct add_rvalue_reference<volatile void>
	{	
	typedef volatile void type;
	};

template<>
	struct add_rvalue_reference<const volatile void>
	{	
	typedef const volatile void type;
	};

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *const>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *volatile>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *const volatile>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct add_pointer
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

	
	
template<class _Ty>
	struct _Is_void
	: false_type
	{	
	};

template<>
	struct _Is_void<void>
	: true_type
	{	
	};

template<class _Ty>
	struct is_void
	: _Is_void<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_integral
	: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_floating_point
	: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_array
	: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
	: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
	: true_type
	{	
	};

 
	
template<class _Ty>
	struct is_lvalue_reference
	: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
	: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
	: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
	: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
	: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};

 












#line 454 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct _Is_member_object_pointer
	: false_type
	{	
	};

template<class _Ty1, class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*>
	: _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
	{	
	};

template<class _Ty>
	struct is_member_object_pointer
	: _Is_member_object_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
	: _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
	: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
	: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
	: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_union : _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class : _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_function
	: _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
	{	
	};

template<class _Ty>
	struct is_function<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct is_arithmetic
	: _Cat_base<is_integral<_Ty>::value
		|| is_floating_point<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
	: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
	: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From, class _To>
	struct is_convertible : _Cat_base<is_void<_From>::value && is_void<_To>::value || __is_convertible_to(_From, _To)>
	{	
	};

	

template<class _Ty>
	struct is_enum : _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
	: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
	: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
	: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value>
	{	
	};

template<class _Ty>
	struct is_scalar<_Ty&>
	: false_type
	{
	};

	
template<class _Ty>
	struct is_const
	: _Cat_base<_Ptr_traits<_Ty *>::_Is_const
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<_Ty[_Nx]>
	: false_type
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<const _Ty[_Nx]>
	: true_type
	{	
	};

template<class _Ty>
	struct is_const<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
	: _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty>
	struct is_volatile<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct _Is_pod : _Cat_base<is_void<_Ty>::value || is_scalar<_Ty>::value || __has_trivial_constructor(_Ty) && __is_pod(_Ty)>
	{	
	};

template<class _Ty>
	struct is_pod
	: _Is_pod<typename ::std:: tr1::remove_all_extents<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_empty : _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract : _Cat_base<__is_abstract(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct is_standard_layout : is_pod<_Ty>
	{	
	};

	
template<class _Ty>
	struct is_trivial : is_pod<_Ty>
	{	
	};
 #line 679 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_trivial_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_copy : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct has_trivial_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
	{	
	};
 #line 705 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_trivial_assign : _Cat_base<is_pod<_Ty>::value || __has_trivial_assign(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_destructor : _Cat_base<!is_void<_Ty>::value && (is_pod<_Ty>::value || __has_trivial_destructor(_Ty))>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct has_nothrow_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
	{	
	};
 #line 743 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_nothrow_assign : _Cat_base<is_pod<_Ty>::value || __has_nothrow_assign(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor : _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct _Has_signed_vals
	: _Cat_base<(typename remove_cv<_Ty>::type)(-1)
		< (typename remove_cv<_Ty>::type)(0)>
	{	
	};

template<class _Ty>
	struct is_signed
	: _Cat_base<is_floating_point<_Ty>::value || is_integral<_Ty>::value
		&& _Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
	{	
	};

	
template<class _Ty>
	struct is_unsigned
	: _Cat_base<is_integral<_Ty>::value
		&& !_Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
	{	
	};

	
template<class _Ty>
	struct make_signed
	{	
	static const size_t _Bytes = sizeof (_Ty);

	typedef typename _If<is_signed<_Ty>::value, _Ty,
		typename _If<_Bytes <= sizeof (char), signed char,
			typename _If<_Bytes <= sizeof (short), short,
				typename _If<_Bytes <= sizeof (int), int,
					typename _If<_Bytes <= sizeof (long), long,
						_Longlong>::_Type>::_Type>::_Type>
							::_Type>::_Type type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	static const size_t _Bytes = sizeof (_Ty);

	typedef typename _If<is_unsigned<_Ty>::value, _Ty,
		typename _If<_Bytes <= sizeof (char), unsigned char,
			typename _If<_Bytes <= sizeof (short), unsigned short,
				typename _If<_Bytes <= sizeof (int), unsigned int,
					typename _If<_Bytes <= sizeof (long), unsigned long,
						_ULonglong>::_Type>::_Type>::_Type>
							::_Type>::_Type type;
	};

	
template<class _Ty>
	struct _Get_align
	{	
	_Ty _Elt0;
	char _Elt1;
	_Ty _Elt2;
	};



template<class _Ty>
	struct alignment_of
	: integral_constant<size_t, (sizeof(_Get_align<_Ty>) - 2 * sizeof(_Ty))>
	{	
	};

template<class _Ty>
	struct alignment_of<_Ty&>
	: integral_constant<size_t, (sizeof(_Get_align<_Ty *>) - 2 * sizeof(_Ty *))>
	{	
	};

	




template<class _Ty, size_t _Len> union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len, size_t _Align, class _Ty, bool _Ok>
	struct _Aligned;

template<size_t _Len, size_t _Align, class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, long, false>
	{	
	typedef _Align_type<double, _Len> _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, long, _Align == (sizeof(_Get_align<long>) - 2 * sizeof(long))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align == (sizeof(_Get_align<int>) - 2 * sizeof(int))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align == (sizeof(_Get_align<short>) - 2 * sizeof(short))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align == (sizeof(_Get_align<char>) - 2 * sizeof(char))>::_Type type;
	};





	
template<class _Ty>
	struct rank
	: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct rank<_Ty[_Ix]>
	: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
	: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
	: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], 0>
	: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
	: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
	: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
	: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Ty1, class _Ty2>
	struct is_same
	: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
	: true_type
	{	
	};

	
template<class _Base, class _Der>
	struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};


	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::_Type>::_Type type;
	};

	
template<bool _Test,
	class _Type = void>
	struct enable_if
	{	
	};

template<class _Type>
	struct enable_if<true, _Type>
	{	
	typedef _Type type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	}	

 
using tr1::add_const;
using tr1::add_cv;
using tr1::add_pointer;
using tr1::add_lvalue_reference;
using tr1::add_reference;	
using tr1::add_rvalue_reference;
using tr1::add_volatile;
using tr1::aligned_storage;
using tr1::alignment_of;
using tr1::conditional;
using tr1::decay;
using tr1::enable_if;
using tr1::extent;
using tr1::false_type;
using tr1::has_nothrow_assign;
using tr1::has_nothrow_constructor;	
using tr1::has_nothrow_copy;	
using tr1::has_nothrow_copy_constructor;
using tr1::has_nothrow_default_constructor;
using tr1::has_trivial_assign;
using tr1::has_trivial_constructor;	
using tr1::has_trivial_copy;	
using tr1::has_trivial_copy_constructor;
using tr1::has_trivial_default_constructor;
using tr1::has_trivial_destructor;
using tr1::has_virtual_destructor;
using tr1::integral_constant;
using tr1::is_abstract;
using tr1::is_arithmetic;
using tr1::is_array;
using tr1::is_base_of;
using tr1::is_class;
using tr1::is_compound;
using tr1::is_const;
using tr1::is_convertible;
using tr1::is_empty;
using tr1::is_enum;
using tr1::is_floating_point;
using tr1::is_function;
using tr1::is_fundamental;
using tr1::is_integral;
using tr1::is_lvalue_reference;
using tr1::is_member_function_pointer;
using tr1::is_member_object_pointer;
using tr1::is_member_pointer;
using tr1::is_object;
using tr1::is_pod;
using tr1::is_pointer;
using tr1::is_polymorphic;
using tr1::is_reference;
using tr1::is_rvalue_reference;
using tr1::is_same;
using tr1::is_scalar;
using tr1::is_signed;
using tr1::is_standard_layout;
using tr1::is_trivial;
using tr1::is_union;
using tr1::is_unsigned;
using tr1::is_void;
using tr1::is_volatile;
using tr1::make_signed;
using tr1::make_unsigned;
using tr1::rank;
using tr1::remove_all_extents;
using tr1::remove_const;
using tr1::remove_cv;
using tr1::remove_extent;
using tr1::remove_pointer;
using tr1::remove_reference;
using tr1::_Remove_rvalue_reference;
using tr1::remove_volatile;
using tr1::true_type;
 #line 1076 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

 

template<class _Ty>
	struct _Arithmetic_traits;

template<>
	struct _Arithmetic_traits<bool>
	{	
	static const int _Rank = 1;
	};

template<>
	struct _Arithmetic_traits<char>
	{	
	static const int _Rank = _Arithmetic_traits<bool>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<signed char>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank;
	};

template<>
	struct _Arithmetic_traits<unsigned char>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank;
	};

template<>
	struct _Arithmetic_traits<short>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned short>
	{	
	static const int _Rank = _Arithmetic_traits<short>::_Rank;
	};

template<>
	struct _Arithmetic_traits<int>
	{	
	static const int _Rank = _Arithmetic_traits<short>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned int>
	{	
	static const int _Rank = _Arithmetic_traits<int>::_Rank;
	};

template<>
	struct _Arithmetic_traits<long>
	{	
	static const int _Rank = _Arithmetic_traits<int>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned long>
	{	
	static const int _Rank = _Arithmetic_traits<long>::_Rank;
	};

template<>
	struct _Arithmetic_traits<long long>
	{	
	static const int _Rank = _Arithmetic_traits<long>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned long long>
	{	
	static const int _Rank = _Arithmetic_traits<long long>::_Rank;
	};

template<>
	struct _Arithmetic_traits<float>
	{
	static const int _Rank = _Arithmetic_traits<long long>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<double>
	{
	static const int _Rank = _Arithmetic_traits<float>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<long double>
	{
	static const int _Rank = _Arithmetic_traits<double>::_Rank + 1;
	};

template<bool _Unsigned> struct _Pickinteger
	{	
	typedef int _Type;
	};

template<>
	struct _Pickinteger<true>
	{	
	typedef unsigned int _Type;
	};

template<class _Ty,
	bool _Small>
	struct _Promote_to_int;

template<class _Ty>
	struct _Promote_to_int<_Ty, true>
	{	
	typedef int _Type;
	};

template<class _Ty>
	struct _Promote_to_int<_Ty, false>
	{	
	typedef typename _Pickinteger<tr1::is_unsigned<_Ty>::value>::_Type _Type;
	};

template<class _Ty,
	bool _Small>
	struct _Maybepromote;

template<class _Ty>
	struct _Maybepromote<_Ty, false>
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Maybepromote<_Ty, true>
	{	
	typedef typename _Promote_to_int<_Ty, sizeof(_Ty) < sizeof(int)>::_Type
		_Type;
	};

template<class _Ty>
	struct _Ipromo
	{	
	static const bool _Lessthan =
		_Arithmetic_traits<_Ty>::_Rank < _Arithmetic_traits<int>::_Rank;
	typedef typename _Maybepromote<_Ty, _Lessthan>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1,
	bool _Second>
	struct _Common_typeX
	{	
	typedef _Ty1 _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct _Common_typeX<_Ty0, _Ty1, false>
	{	
	typedef _Ty0 _Type;
	};

template<class _Ty0,
	class _Ty1,
	bool _Uns0,
	bool _Uns1>
	struct _Common_typeY
	{	
	typedef _Ty0 _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct _Common_typeY<_Ty0, _Ty1, false, true>
	{	
	typedef _Ty1 _Type;
	};

template<class _Ty0,
	class _Ty1,
	int _Rank0,
	int _Rank1>
	struct _Common_type
	{	
	typedef typename _Common_typeX<_Ty0, _Ty1, _Rank0 < _Rank1>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1,
	int _Rank>
	struct _Common_type<_Ty0, _Ty1, _Rank, _Rank>
	{	
	typedef typename _Common_typeY<_Ty0, _Ty1,
		tr1::is_unsigned<_Ty0>::value,
		tr1::is_unsigned<_Ty1>::value>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type
	{	
	typedef typename _Ipromo<_Ty0>::_Type _PromoTy0;
	typedef typename _Ipromo<_Ty1>::_Type _PromoTy1;
	typedef typename _Common_type<_PromoTy0, _PromoTy1,
		_Arithmetic_traits<_PromoTy0>::_Rank,
		_Arithmetic_traits<_PromoTy1>::_Rank>::_Type type;
	};

 #line 1286 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 1291 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
#line 1292 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"






#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4180 4512)

namespace std {
	namespace tr1 {
	
template<class _Type>
	class reference_wrapper;

 
template<class _Type>
	struct _Unrefwrap
	{	
	typedef typename decay<_Type>::type type;
	};

template<class _Type>
	struct _Unrefwrap<reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<const reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<volatile reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<const volatile reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

 





#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"
	}	
using tr1::_Unrefwrap;

	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};

	
template<class _Ty> inline
	_Ty&& forward(typename identity<_Ty>::type& _Arg)
	{	
	return ((_Ty&&)_Arg);
	}

	
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		move(_Ty&& _Arg)
	{	
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

	
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		_Move(_Ty&& _Arg)
	{	
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

		
template<class _Ty> inline
	void swap(_Ty& _Left, _Ty& _Right)
	{	
	_Ty _Tmp = _Move(_Left);
	_Left = _Move(_Right);
	_Right = _Move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
	{	
	swap(_Left, _Right);
	}

		

template<class _Ty1,
	class _Ty2>
	struct _Pair_base
	{	
	typedef _Pair_base<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	_Pair_base()
		: first(_Ty1()), second(_Ty2())
		{	
		}

	_Pair_base(const _Pair_base<_Ty1, _Ty2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	_Pair_base(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

	_Pair_base(_Ty1x&& _Val1, _Ty2x&& _Val2)
		: first(::std:: move(_Val1)),
			second(::std:: move(_Val2))
		{	
		}

	_Pair_base(const _Ty1x& _Val1, _Ty2x&& _Val2)
		: first(_Val1), second(::std:: move(_Val2))
		{	
		}

	_Pair_base(_Ty1x&& _Val1, const _Ty2x& _Val2)
		: first(::std:: move(_Val1)), second(_Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Pair_base(_Other1&& _Val1, _Other2&& _Val2)
		: first(::std:: forward<_Other1>(_Val1)),
			second(::std:: forward<_Other2>(_Val2))
		{	
		}

	_Ty1 first;	
	_Ty2 second;	
	};

template<class _Ty1,
	class _Ty2>
	struct pair
		: public _Pair_base<_Ty1, _Ty2>
	{	
	typedef _Pair_base<_Ty1, _Ty2> _Mybase;

	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	pair()
		: _Mybase()
		{	
		}

	pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: _Mybase(_Val1, _Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(pair<_Other1, _Other2>& _Right)
		: _Mybase(_Right.first, _Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(const pair<_Other1, _Other2>& _Right)
		: _Mybase(_Right.first, _Right.second)
		{	
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->first, _Right.first);
			_Swap_adl(this->second, _Right.second);
			}
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		this->first = _Right.first;
		this->second = _Right.second;
		return (*this);
		}

	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

	pair(_Ty1x&& _Val1, _Ty2x&& _Val2)
		: _Mybase(::std:: move(_Val1),
			::std:: move(_Val2))
		{	
		}

	pair(const _Ty1x& _Val1, _Ty2x&& _Val2)
		: _Mybase(_Val1,
			::std:: move(_Val2))
		{	
		}

	pair(_Ty1x&& _Val1, const _Ty2x& _Val2)
		: _Mybase(::std:: move(_Val1),
			_Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(_Other1&& _Val1, _Other2&& _Val2)
		: _Mybase(::std:: forward<_Other1>(_Val1),
			::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(pair<_Other1, _Other2>&& _Right)
		: _Mybase(::std:: forward<_Other1>(_Right.first),
			::std:: forward<_Other2>(_Right.second))
		{	
		}

	pair& operator=(pair<_Ty1, _Ty2>&& _Right)
		{	
		this->first = ::std:: move(_Right.first);
		this->second = ::std:: move(_Right.second);
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			this->first = ::std:: move(_Right.first);
			this->second = ::std:: move(_Right.second);
			}
		}
	};

		

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>&& _Right)
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>&& _Left, pair<_Ty1, _Ty2>& _Right)
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		!(_Right.first < _Left.first) && _Left.second < _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(const _Ty1& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
		::std:: forward<_Ty2>(_Val2)));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, const _Ty2& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		(typename _Unrefwrap<_Ty2>::type)_Val2));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(const _Ty1& _Val1, const _Ty2& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
		(typename _Unrefwrap<_Ty2>::type)_Val2));
	}

 
template<class _InIt> inline
	_InIt begin(const pair<_InIt, _InIt>& _Pair)
	{	
	return (_Pair.first);
	}

template<class _InIt> inline
	_InIt end(const pair<_InIt, _InIt>& _Pair)
	{	
	return (_Pair.second);
	}
 #line 412 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

 
namespace std {
	namespace tr1 {	
	
template<class _Tuple>
	struct tuple_size;
template<size_t _Idx,
	class _Tuple>
	struct tuple_element;
template<class _Ty1,
	class _Ty2>
	struct tuple_size<::std:: pair<_Ty1, _Ty2> >
	{	
	static const int value = 2;
	};

template<int _Idx,
	class _Ty>
	struct _Pair_data;
template<class _Ty1,
	class _Ty2>
	struct _Pair_data<0, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1& _Type;
	typedef const _Ty1& _CType;

	static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}

	static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}
	};

template<class _Ty1,
	class _Ty2>
	struct _Pair_data<1, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2& _Type;
	typedef const _Ty2& _CType;

	static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}

	static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<int _Idx,
	class _Ty1,
	class _Ty2>
	typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Type
		get(::std:: pair<_Ty1, _Ty2>& _Pr)
	{	
	return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
	}

template<int _Idx,
	class _Ty1,
	class _Ty2>
	typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_CType
		get(const ::std:: pair<_Ty1, _Ty2>& _Pr)
	{	
	return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
	}
	}	
}
 #line 531 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 
namespace std {
using tr1::get;
using tr1::tuple_element;
using tr1::tuple_size;
}
 #line 539 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 #pragma warning(pop)
 #pragma pack(pop)

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"
#line 545 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\utility"






















#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/utility.hpp"




#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/utility.hpp"

#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/utility.hpp"
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"





#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"








#line 81 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"

#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_stdlib_config.hpp"



#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"



   
   


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"


#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"









#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"



#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"



















#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"








#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"







#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"





#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"














#pragma once






 
 
 #line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#pragma pack(push,8)

 



 

#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:
 
	size_t hash_code() const throw ()
		{	
		const char *_Keyval = name();
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = :: strlen(_Keyval);
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
 #line 59 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

    


    virtual ~type_info();
     bool  operator==(const type_info& _Rhs) const;
     bool  operator!=(const type_info& _Rhs) const;
     int  before(const type_info& _Rhs) const;
     const char*  name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
     const char*  raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];
     type_info(const type_info& _Rhs);
    type_info&  operator=(const type_info& _Rhs);
     static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
     static void __cdecl _Type_info_dtor(type_info *);
};

 

 namespace std {

using ::type_info;

 }



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)










namespace std {

  


  



  



}

 

 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"












#pragma once

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"








#pragma pack(push,8)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();





#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"








struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);
#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"

 __declspec(noreturn) void __cdecl terminate(void);
 void __cdecl unexpected(void);

 int __cdecl _is_exception_typeof(  const type_info &_Type,   struct _EXCEPTION_POINTERS * _ExceptionPtr);



 terminate_function __cdecl set_terminate(   terminate_function _NewPtFunc);
extern "C"  terminate_function __cdecl _get_terminate(void);
 unexpected_function __cdecl set_unexpected(   unexpected_function _NewPtFunc);
extern "C"  unexpected_function __cdecl _get_unexpected(void);
#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"



 _se_translator_function __cdecl _set_se_translator(   _se_translator_function _NewPtFunc);
#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
 bool __cdecl __uncaught_exception();









#pragma pack(pop)
#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"














#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"



















typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"



































#line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"



    __declspec(noalias) __declspec(restrict)    void * __cdecl calloc(  size_t _Count,   size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl free( void * _Memory);
    __declspec(noalias) __declspec(restrict)                              void * __cdecl malloc(  size_t _Size);

   __declspec(noalias) __declspec(restrict)                           void * __cdecl realloc( void * _Memory,   size_t _NewSize);

   __declspec(noalias) __declspec(restrict)                       void * __cdecl _recalloc( void * _Memory,   size_t _Count,   size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl _aligned_free( void * _Memory);
   __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_malloc(  size_t _Size,   size_t _Alignment);
   __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_malloc(  size_t _Size,   size_t _Alignment,   size_t _Offset);

   __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_realloc( void * _Memory,   size_t _NewSize,   size_t _Alignment);

   __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_recalloc( void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment);

   __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_realloc( void * _Memory,   size_t _NewSize,   size_t _Alignment,   size_t _Offset);

   __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_offset_recalloc( void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment,   size_t _Offset);
                                                   size_t __cdecl _aligned_msize( void * _Memory,   size_t _Alignment,   size_t _Offset);
#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
















#line 141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

 int     __cdecl _resetstkoflw (void);



 unsigned long __cdecl _set_malloc_crt_max_wait(  unsigned long _NewValue);








#line 156 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

   void *  __cdecl _expand( void * _Memory,   size_t _NewSize);
  size_t  __cdecl _msize( void * _Memory);




#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

 void *          __cdecl _alloca(  size_t _Size);
  int     __cdecl _heapadd(  void * _Memory,   size_t _Size);
  int     __cdecl _heapchk(void);
  int     __cdecl _heapmin(void);
 int     __cdecl _heapset(  unsigned int _Fill);
  int     __cdecl _heapwalk(   _HEAPINFO * _EntryInfo);
 size_t  __cdecl _heapused(size_t * _Used, size_t * _Commit);

 intptr_t __cdecl _get_heap_handle(void);











#line 186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

typedef char __static_assert_t[ (sizeof(unsigned int) <= 8) ];


#pragma warning(push)
#pragma warning(disable:6540)
__inline void *_MarkAllocaS(   void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
}
#pragma warning(pop)
#line 203 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"








#line 212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"






#line 219 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"








__declspec(noalias) __inline void __cdecl _freea( void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 8;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }

        else if (_Marker != 0xCCCC)
        {
            ((void)0);
        }
#line 244 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
    }
}
#line 247 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
#line 248 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"




#line 253 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"






















}
#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#pragma pack(pop)

#line 283 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
 

 

#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 



































#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 namespace std {





 
#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

class  exception
    {   
public:
      exception();
     explicit  exception(const char * const &);
      exception(const char * const &, int);
      exception(const exception&);
     exception&  operator=(const exception&);
     virtual  ~exception();
     virtual const char *  what() const;

private:
     void  _Copy_str(const char *);
     void  _Tidy();

    const char * _Mywhat;
    bool _Mydofree;
    };

















































































using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

 bool __cdecl uncaught_exception();

}

 










































































































#line 308 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"


namespace std {


#line 314 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

		
class bad_exception : public exception
	{	
public:
	 bad_exception(const char *_Message = "bad exception")
		throw ()
		: exception(_Message)
		{	
		}

	virtual  ~bad_exception() throw ()
		{	
		}

 





#line 336 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

	};

		
class bad_alloc : public exception
	{	
public:
	 bad_alloc(const char *_Message) throw ()
		: exception(_Message)
		{	
		}

	 bad_alloc() throw ()
		: exception("bad allocation", 1)
		{	
		}

	virtual  ~bad_alloc() throw ()
		{	
		}

 





#line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

	};


		
class bad_array_new_length
	: public bad_alloc
	{	
public:

	bad_array_new_length() throw ()
		: bad_alloc("bad array new length")
		{	
		}
	};
#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"


}









#line 393 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 void __cdecl __ExceptionPtrCreate(  void* );
 void __cdecl __ExceptionPtrDestroy(   void* );
 void __cdecl __ExceptionPtrCopy(  void*,   const void* );
 void __cdecl __ExceptionPtrAssign(   void*,   const void* );
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);

 void __cdecl __ExceptionPtrCurrentException(  void*);
 void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(   void*,   const void*,   const void*);

namespace std {


typedef ::std:: nullptr_t _Null_type;


#line 411 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

class _Exception_ptr
	{
public:
	_Exception_ptr()
		{
		__ExceptionPtrCreate(this);
		}
	_Exception_ptr(_Null_type)
		{
		__ExceptionPtrCreate(this);
		}
	~_Exception_ptr()
		{
		__ExceptionPtrDestroy(this);
		}
	_Exception_ptr(  const _Exception_ptr& _Rhs)
		{
		__ExceptionPtrCopy(this, const_cast<_Exception_ptr*>(&_Rhs));
		}
	_Exception_ptr& operator=(  const _Exception_ptr& _Rhs)
		{
		__ExceptionPtrAssign(this, const_cast<_Exception_ptr*>(&_Rhs));
		return *this;
		}
	_Exception_ptr& operator=(_Null_type)
		{
		_Exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	void _RethrowException() const
		{
		__ExceptionPtrRethrow(const_cast<_Exception_ptr*>(this));
		}

	static _Exception_ptr _Current_exception()
		{
		_Exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}
	static _Exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		_Exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}
private:
	void* _Data1;
	void* _Data2;
	};

inline bool operator==(  const _Exception_ptr& _Lhs,   const _Exception_ptr& _Rhs)
	{
	return __ExceptionPtrCompare(const_cast<_Exception_ptr*>(&_Lhs),const_cast<_Exception_ptr*>(&_Rhs));
	}

inline bool operator==(_Null_type,   const _Exception_ptr& _Rhs)
	{
	_Exception_ptr _Ptr;
	return __ExceptionPtrCompare(&_Ptr,const_cast<_Exception_ptr*>(&_Rhs));
	}

inline bool operator==(  const _Exception_ptr& _Lhs, _Null_type)
	{
	return operator==(0,_Lhs);
	}

typedef _Exception_ptr exception_ptr;

inline exception_ptr current_exception()
	{
	return _Exception_ptr::_Current_exception();
	}

inline void rethrow_exception(  exception_ptr _P)
	{
	_P._RethrowException();
	}

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr copy_exception(_E _Except)
	{
	return _Exception_ptr::_Copy_exception(&_Except, __GetExceptionInfo(_Except));
	}

}







 #pragma warning(pop)
 #pragma pack(pop)

#line 517 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
#line 518 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"





#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

 namespace std {

class  bad_cast : public exception {
public:










     bad_cast(const char * _Message = "bad cast");
     bad_cast(const bad_cast &);
    virtual  ~bad_cast();
#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"
};

class  bad_typeid : public exception {
public:










     bad_typeid(const char * _Message = "bad typeid");
     bad_typeid(const bad_typeid &);
    virtual  ~bad_typeid();
#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

};

class  __non_rtti_object : public bad_typeid {
public:










     __non_rtti_object(const char * _Message);
     __non_rtti_object(const __non_rtti_object &);
    virtual  ~__non_rtti_object();
#line 145 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"
};

 }
 

 























































#line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#pragma pack(pop)

#line 213 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"







#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"


#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"

















#line 111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"



#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"















#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"





#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/stdlib/dinkumware.hpp"









#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"

























































#line 99 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/select_platform_config.hpp"



#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"

















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"



#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"









#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"






#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"





#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"
















#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"






#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/platform/win32.hpp"
#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"
#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"

































#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"












#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"














#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"













#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 120 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 145 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 172 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 196 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 203 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 210 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 217 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 224 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 231 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"








#line 248 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"









#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 276 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"


























#line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"



#line 315 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 322 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 329 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 336 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 344 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"


#line 347 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 354 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 361 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 368 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"



#line 372 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"













#line 386 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







#line 394 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"



#line 398 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"
















#line 415 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"











#line 427 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"

























#line 453 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"


#line 456 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"















#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"










#line 483 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"
















#line 500 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"





#line 506 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"







namespace boost{




   typedef long long long_long_type;
   typedef unsigned long long ulong_long_type;
#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"
}
#line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






























































#line 586 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"














#line 601 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"






#line 608 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"















































#line 656 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"










#line 667 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"



#line 671 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/suffix.hpp"

#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"

#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"











#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

#pragma once










 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"






#pragma pack(push,8)


extern "C" {
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



















typedef int (__cdecl * _onexit_t)(void);



#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"




#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;


#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 121 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"












 extern int __mb_cur_max;



#line 168 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 int __cdecl ___mb_cur_max_func(void);
 int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 171 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





































typedef void (__cdecl *_purecall_handler)(void); 


 _purecall_handler __cdecl _set_purecall_handler(   _purecall_handler _Handler);
 _purecall_handler __cdecl _get_purecall_handler(void);
#line 214 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


extern "C++"
{




#line 223 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
}
#line 225 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t); 


 _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(   _invalid_parameter_handler _Handler);
 _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


extern "C++"
{




#line 243 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
}
#line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"











 unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(  unsigned long _Value);
errno_t __cdecl _get_doserrno(  unsigned long * _Value);


  char ** __cdecl __sys_errlist(void);


  int * __cdecl __sys_nerr(void);













#line 281 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


 extern int __argc;          
 extern char ** __argv;      
 extern wchar_t ** __wargv;  







#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





 extern char ** _environ;    
 extern wchar_t ** _wenviron;    
#line 302 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  extern char * _pgmptr;      
  extern wchar_t * _wpgmptr;  














#line 320 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

errno_t __cdecl _get_pgmptr(     char ** _Value);
errno_t __cdecl _get_wpgmptr(     wchar_t ** _Value);



  extern int _fmode;          



#line 331 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 errno_t __cdecl _set_fmode(  int _Mode);
 errno_t __cdecl _get_fmode(  int * _PMode);





#line 340 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 347 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
#line 348 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





 __declspec(noreturn) void __cdecl exit(  int _Code);
 __declspec(noreturn) void __cdecl _exit(  int _Code);
 void __cdecl abort(void);
#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 unsigned int __cdecl _set_abort_behavior(  unsigned int _Flags,   unsigned int _Mask);








        __int64    __cdecl _abs64(__int64);















#line 384 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"













#line 398 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 400 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





   int    __cdecl atoi(   const char *_Str);
  int    __cdecl _atoi_l(   const char *_Str,    _locale_t _Locale);
  long   __cdecl atol(   const char *_Str);
  long   __cdecl _atol_l(   const char *_Str,    _locale_t _Locale);



  void * __cdecl bsearch_s(  const void * _Key,    const void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 416 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
  void * __cdecl bsearch(  const void * _Key,    const void * _Base, 
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));


 void __cdecl qsort_s(   void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 425 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 void __cdecl qsort(   void * _Base, 
	  size_t _NumOfElements,   size_t _SizeOfElements, 
          int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 429 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
         unsigned short __cdecl _byteswap_ushort(  unsigned short _Short);
         unsigned long  __cdecl _byteswap_ulong (  unsigned long _Long);
         unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Int64);
  div_t  __cdecl div(  int _Numerator,   int _Denominator);
   char * __cdecl getenv(   const char * _VarName);

  errno_t __cdecl getenv_s(  size_t * _ReturnSize,     char * _DstBuf,   rsize_t _DstSize,    const char * _VarName);
#line 437 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t * _ReturnSize, char (&_Dest)[_Size],    const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }



#line 442 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  errno_t __cdecl _dupenv_s(    char **_PBuffer,   size_t * _PBufferSizeInBytes,    const char * _VarName);



#line 448 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  errno_t __cdecl _itoa_s(  int _Value,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(  int _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _itoa( int _Value,   char *_Dest,  int _Radix);
  errno_t __cdecl _i64toa_s(  __int64 _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
  char * __cdecl _i64toa(  __int64 _Val,    char * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64toa_s(  unsigned __int64 _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
  char * __cdecl _ui64toa(  unsigned __int64 _Val,    char * _DstBuf,   int _Radix);
  __int64 __cdecl _atoi64(   const char * _String);
  __int64 __cdecl _atoi64_l(   const char * _String,    _locale_t _Locale);
  __int64 __cdecl _strtoi64(   const char * _String,     char ** _EndPtr,   int _Radix);
  __int64 __cdecl _strtoi64_l(   const char * _String,     char ** _EndPtr,   int _Radix,    _locale_t _Locale);
  unsigned __int64 __cdecl _strtoui64(   const char * _String,     char ** _EndPtr,   int _Radix);
  unsigned __int64 __cdecl _strtoui64_l(   const char * _String,     char ** _EndPtr,   int  _Radix,    _locale_t _Locale);
  ldiv_t __cdecl ldiv(  long _Numerator,   long _Denominator);
  lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

extern "C++"
{
    inline long abs(long _X)
    {
        return labs(_X);
    }
    inline long long abs(long long _X)
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2)
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2)
    {
        return lldiv(_A1, _A2);
    }
}
#line 485 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
  errno_t __cdecl _ltoa_s(  long _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _ltoa( long _Value,   char *_Dest,  int _Radix);
  int    __cdecl mblen(     const char * _Ch,   size_t _MaxCount);
  int    __cdecl _mblen_l(     const char * _Ch,   size_t _MaxCount,    _locale_t _Locale);
  size_t __cdecl _mbstrlen(   const char * _Str);
  size_t __cdecl _mbstrlen_l(   const char *_Str,    _locale_t _Locale);
  size_t __cdecl _mbstrnlen(   const char *_Str,   size_t _MaxCount);
  size_t __cdecl _mbstrnlen_l(   const char *_Str,   size_t _MaxCount,    _locale_t _Locale);
 int    __cdecl mbtowc(   wchar_t * _DstCh,      const char * _SrcCh,   size_t _SrcSizeInBytes);
 int    __cdecl _mbtowc_l(   wchar_t * _DstCh,      const char * _SrcCh,   size_t _SrcSizeInBytes,    _locale_t _Locale);
  errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,     wchar_t * _DstBuf,   size_t _SizeInWords,      const char * _SrcBuf,   size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],    const char * _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
  size_t __cdecl mbstowcs(  wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

  errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted,     wchar_t * _DstBuf,   size_t _SizeInWords,      const char * _SrcBuf,   size_t _MaxCount,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size],    const char * _Source,   size_t _MaxCount,    _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
  size_t __cdecl _mbstowcs_l(    wchar_t *_Dest,    const char * _Source,   size_t _MaxCount,    _locale_t _Locale);

  int    __cdecl rand(void);


#line 508 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  int    __cdecl _set_error_mode(  int _Mode);

 void   __cdecl srand(  unsigned int _Seed);
  double __cdecl strtod(   const char * _Str,     char ** _EndPtr);
  double __cdecl _strtod_l(   const char * _Str,     char ** _EndPtr,    _locale_t _Locale);
  long   __cdecl strtol(   const char * _Str,     char ** _EndPtr,   int _Radix );
  long   __cdecl _strtol_l(   const char *_Str,     char **_EndPtr,   int _Radix,    _locale_t _Locale);
  unsigned long __cdecl strtoul(   const char * _Str,     char ** _EndPtr,   int _Radix);
  unsigned long __cdecl _strtoul_l(const char * _Str,     char **_EndPtr,   int _Radix,    _locale_t _Locale);


 int __cdecl system(   const char * _Command);
#line 522 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
  errno_t __cdecl _ultoa_s(  unsigned long _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
  char * __cdecl _ultoa( unsigned long _Value,   char *_Dest,  int _Radix);
  int    __cdecl wctomb(    char * _MbCh,   wchar_t _WCh);
  int    __cdecl _wctomb_l(   char * _MbCh,   wchar_t _WCh,    _locale_t _Locale);

  errno_t __cdecl wctomb_s(  int * _SizeConverted,     char * _MbCh,   rsize_t _SizeInBytes,   wchar_t _WCh);
#line 530 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
  errno_t __cdecl _wctomb_s_l(  int * _SizeConverted,     char * _MbCh,   size_t _SizeInBytes,   wchar_t _WCh,    _locale_t _Locale);
  errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,     char * _Dst,   size_t _DstSizeInBytes,    const wchar_t * _Src,   size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],    const wchar_t * _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
  size_t __cdecl wcstombs(  char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
  errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,     char * _Dst,   size_t _DstSizeInBytes,    const wchar_t * _Src,   size_t _MaxCountInBytes,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],    const wchar_t * _Source,   size_t _MaxCount,    _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
  size_t __cdecl _wcstombs_l(    char *_Dest,    const wchar_t * _Source,   size_t _MaxCount,    _locale_t _Locale);

























#line 563 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"




















































































































































#line 712 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  char * __cdecl _fullpath(    char * _FullPath,    const char * _Path,   size_t _SizeInBytes);





#line 720 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

  errno_t __cdecl _ecvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDights,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   char * __cdecl _ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  errno_t __cdecl _fcvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   char * __cdecl _fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
 errno_t __cdecl _gcvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
  char * __cdecl _gcvt(  double _Val,   int _NumOfDigits,    char * _DstBuf);

  int __cdecl _atodbl(  _CRT_DOUBLE * _Result,    char * _Str);
  int __cdecl _atoldbl(  _LDOUBLE * _Result,    char * _Str);
  int __cdecl _atoflt(  _CRT_FLOAT * _Result,    char * _Str);
  int __cdecl _atodbl_l(  _CRT_DOUBLE * _Result,    char * _Str,    _locale_t _Locale);
  int __cdecl _atoldbl_l(  _LDOUBLE * _Result,    char * _Str,    _locale_t _Locale);
  int __cdecl _atoflt_l(  _CRT_FLOAT * _Result,    char * _Str,    _locale_t _Locale);
         unsigned long __cdecl _lrotl(  unsigned long _Val,   int _Shift);
         unsigned long __cdecl _lrotr(  unsigned long _Val,   int _Shift);
  errno_t   __cdecl _makepath_s(    char * _PathResult,   size_t _SizeInWords,    const char * _Drive,    const char * _Dir,    const char * _Filename,
           const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size],    const char * _Drive,    const char * _Dir,    const char * _Filename,    const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
  void __cdecl _makepath(  char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 756 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"












#line 769 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        _onexit_t __cdecl _onexit(   _onexit_t _Func);
#line 771 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        





#pragma warning (push)
#pragma warning (disable:6540) 
  int    __cdecl _putenv(   const char * _EnvString);
  errno_t __cdecl _putenv_s(   const char * _Name,    const char * _Value);
         unsigned int __cdecl _rotl(  unsigned int _Val,   int _Shift);
         unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Val,   int _Shift);
         unsigned int __cdecl _rotr(  unsigned int _Val,   int _Shift);
         unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Val,   int _Shift);
#pragma warning (pop)

 errno_t __cdecl _searchenv_s(   const char * _Filename,    const char * _EnvVar,     char * _ResultPath,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(   const char * _Filename,    const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
  void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,   char *_ResultPath);

  void   __cdecl _splitpath(   const char * _FullPath,    char * _Drive,    char * _Dir,    char * _Filename,    char * _Ext);
  errno_t  __cdecl _splitpath_s(   const char * _FullPath, 
		    char * _Drive,   size_t _DriveSize, 
		    char * _Dir,   size_t _DirSize, 
		    char * _Filename,   size_t _FilenameSize, 
		    char * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(  const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

 void   __cdecl _swab(     char * _Buf1,      char * _Buf2, int _SizeInBytes);









































__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))  void __cdecl _seterrormode(  int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))  void __cdecl _beep(  unsigned _Frequency,   unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))  void __cdecl _sleep(  unsigned long _Duration);

#line 846 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
















#pragma warning(push)
#pragma warning(disable: 4141)  
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details."))   char * __cdecl ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details."))   char * __cdecl fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) 		 char * __cdecl gcvt(  double _Val,   int _NumOfDigits,    char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) 		 char * __cdecl itoa(  int _Val,    char * _DstBuf,   int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) 		 char * __cdecl ltoa(  long _Val,    char * _DstBuf,   int _Radix);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details."))  int    __cdecl putenv(   const char * _EnvString);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details."))										 void   __cdecl swab(    char * _Buf1,    char * _Buf2,   int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) 	 char * __cdecl ultoa(  unsigned long _Val,    char * _Dstbuf,   int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(   _onexit_t _Func);

#line 876 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#line 878 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


}

#line 883 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#pragma pack(pop)

#line 887 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

 

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;

using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free; using :: getenv;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul; using :: system;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

using :: llabs; using :: lldiv;
}
 #line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 

  








#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

namespace std {

		
 




typedef void (__cdecl * new_handler) ();
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"
 #line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
struct nothrow_t
	{	
	};

extern const nothrow_t nothrow;	
 #line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

		
 new_handler __cdecl set_new_handler(   new_handler)
	throw ();	
}

		
void __cdecl operator delete(void *) throw ();
#pragma warning (suppress: 4985)
 void *__cdecl operator new(size_t _Size) throw (...);

 
  
inline void *__cdecl operator new(size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete(void *, void *) throw ()
	{	
	}
 #line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
  
inline void *__cdecl operator new[](size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete[](void *, void *) throw ()
	{	
	}
 #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

void __cdecl operator delete[](void *) throw ();	

 void *__cdecl operator new[](size_t _Size)
	throw (...);	

 
  
 void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
	throw ();

 void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
	throw ();	
 #line 96 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"


 
using ::std:: new_handler;
 #line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"
#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\new"





#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		

 












#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
  
 #line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
struct  _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

struct _Container_base12;
struct _Iterator_base12;

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct  _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12()
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy != _Right._Myproxy)
			_Adopt(_Right._Myproxy->_Mycont);
		return (*this);
		}

	~_Iterator_base12()
		{	
 


#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent != 0)
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 








#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
			_Myproxy = _Parent_proxy;
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 











#line 186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 









#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 

#line 213 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;
 


#line 231 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		

 


::std:: tr1::_No _Has_unchecked_type(...);

template<class _Ty>
	::std:: tr1::_Yes _Has_unchecked_type(_Ty *,
		typename _Ty::_Unchecked_type * = 0);

template<class _Iter,
	bool>
	struct _Unchecked_helper
	{	
	typedef _Iter type;
	};

template<class _Iter>
	struct _Unchecked_helper<_Iter, true>
	{	
	typedef typename _Iter::_Unchecked_type type;
	};

template<class _Iter>
	struct _Get_unchecked_type
	{	
	typedef typename _Unchecked_helper<_Iter,
		(sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>::type type;
	};

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		
template<class _Iter>
	struct _Is_checked_helper
	: public ::std:: tr1::integral_constant<bool, (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

		
template<class _Iter> inline
	_Is_checked_helper<_Iter> _Is_checked(_Iter)
	{	
	return (_Is_checked_helper<_Iter>());
	}

		
		
struct input_iterator_tag
	{	
	};

struct output_iterator_tag
	{	
	};

struct forward_iterator_tag
	: public input_iterator_tag, output_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: public forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: public bidirectional_iterator_tag
	{	
	};

struct _Int_iterator_tag
	{	
	};

		
struct _Nonscalar_ptr_iterator_tag
	{	
	};
struct _Scalar_ptr_iterator_tag
	{	
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};

struct _Outit
	: public iterator<output_iterator_tag, void, void,
		void, void>
	{	
	};

		
template<class _Iter>
	struct iterator_traits
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;
	typedef difference_type distance_type;	
	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

template<> struct iterator_traits<_Bool>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<signed char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

 
template<> struct iterator_traits<wchar_t>
	{	
	typedef _Int_iterator_tag iterator_category;
	};
 #line 429 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

template<> struct iterator_traits<short>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned short>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<int>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned int>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<long>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned long>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

 
template<> struct iterator_traits<__int64>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned __int64>
	{	
	typedef _Int_iterator_tag iterator_category;
	};
 #line 471 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _Iter> inline
	typename iterator_traits<_Iter>::iterator_category
		_Iter_cat(const _Iter&)
	{	
	typename iterator_traits<_Iter>::iterator_category _Cat;
	return (_Cat);
	}

		
template<class _Iter1,
	class _Iter2> inline
	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
	{	
	_Nonscalar_ptr_iterator_tag _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2>
	struct _Ptr_cat_helper
	{	
	typedef _Nonscalar_ptr_iterator_tag _Type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef typename ::std:: tr1::conditional<
		::std:: tr1::is_scalar<_Elem>::value,
			_Scalar_ptr_iterator_tag,
			_Nonscalar_ptr_iterator_tag>::type _Type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Scalar_ptr_iterator_tag _Type;
	};

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
		_Ptr_cat(_Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
		_Ptr_cat(const _Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
	return (_Cat);
	}

		

 
  
  
  
  
  
  
  
  

 















































































































































































































































#line 783 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
		

template<class _Iter> inline
	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
	_Advance(_Where, _Off, _Iter_cat(_Where));
	}

template<class _InIt,
	class _Diff> inline
	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 


#line 809 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _FI,
	class _Diff> inline
	void _Advance(_FI& _Where, _Diff _Off, forward_iterator_tag)
	{	
 


#line 822 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BI,
	class _Diff> inline
	void _Advance(_BI& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RI,
	class _Diff> inline
	void _Advance(_RI& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

		

template<class _Iter> inline
	typename iterator_traits<_Iter>::difference_type
		*_Dist_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
			input_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _FwdIt,
	class _Diff> inline
		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
			forward_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _BidIt,
	class _Diff> inline
		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
			bidirectional_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _RanIt,
	class _Diff> inline
		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
			random_access_iterator_tag)
	{	
 





#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	_Off += _Last - _First;
	}

template<class _InIt> inline
	typename iterator_traits<_InIt>::difference_type
		distance(_InIt _First, _InIt _Last)
	{	
	typename iterator_traits<_InIt>::difference_type _Off = 0;
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	return (_Off);
	}

template<class _InIt,
	class _Diff> inline
		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
	{	
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	}

 
		
template<class _InIt,
	class _Diff> inline
		_InIt _Increment(_InIt _First, _Diff _Off,
			input_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _FwdIt,
	class _Diff> inline
		_FwdIt _Increment(_FwdIt _First, _Diff _Off,
			forward_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _BidIt,
	class _Diff> inline
		_BidIt _Increment(_BidIt _First, _Diff _Off,
			bidirectional_iterator_tag)
	{	
	for (; _Off < 0; ++_Off)
		--_First;
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _RanIt,
	class _Diff> inline
		_RanIt _Increment(_RanIt _First, _Diff _Off,
			random_access_iterator_tag)
	{	
	return (_First + _Off);
	}

template<class _InIt> inline
	_InIt next(_InIt _First,
		typename iterator_traits<_InIt>::difference_type _Off = 1)
	{	
	return (_Increment(_First, _Off, _Iter_cat(_First)));
	}

template<class _InIt> inline
	_InIt prev(_InIt _First,
		typename iterator_traits<_InIt>::difference_type _Off = 1)
	{	
	return (_Increment(_First, -_Off, _Iter_cat(_First)));
	}

template<class _Container> inline
	typename _Container::iterator begin(_Container& _Cont)
	{	
	return (_Cont.begin());
	}

template<class _Container> inline
	typename _Container::const_iterator begin(const _Container& _Cont)
	{	
	return (_Cont.begin());
	}

template<class _Container> inline
	typename _Container::iterator end(_Container& _Cont)
	{	
	return (_Cont.end());
	}

template<class _Container> inline
	typename _Container::const_iterator end(const _Container& _Cont)
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *begin(_Ty (&_Array)[_Size])
	{	
	return (&_Array[0]);
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *end(_Ty (&_Array)[_Size])
	{	
	return (&_Array[0] + _Size);
	}
 #line 1007 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _RanIt,
	class _Base>
	class _Revranit
		: public _Base
	{	
public:
	typedef _Revranit<_RanIt, _Base> _Myt;
 	typedef typename _Base::difference_type difference_type;
	typedef typename _Base::pointer pointer;
	typedef typename _Base::reference reference;
	typedef _RanIt iterator_type;

	_Revranit()
		{	
		}

	explicit _Revranit(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2,
		class _Base2>
		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
		: current(_Right.base())
		{	
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	template<class _RanIt2,
		class _Base2>
		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	template<class _RanIt2,
		class _Base2>
		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (_Right.base() < current);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Right.base() - current);
		}

protected:
	_RanIt current;	
	};

		
template<class _RanIt,
	class _Base,
	class _Diff> inline
	_Revranit<_RanIt, _Base>
		operator+(_Diff _Off,
		const _Revranit<_RanIt, _Base>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	typename _Base1::difference_type operator-(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator==(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator!=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt>
	class reverse_iterator
		: public _Revranit<_RanIt, iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference> >
	{	
	typedef reverse_iterator<_RanIt> _Myt;
	typedef _Revranit<_RanIt, iterator<
		typename iterator_traits<_RanIt>::iterator_category,
		typename iterator_traits<_RanIt>::value_type,
		typename iterator_traits<_RanIt>::difference_type,
		typename iterator_traits<_RanIt>::pointer,
		typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
 	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: _Mybase(_Right.base())
		{	
		}

	reverse_iterator(_Mybase _Right)
		: _Mybase(_Right)
		{	
		}

	_Myt& operator++()
		{	
		++*((_Mybase *)this);
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--*((_Mybase *)this);
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		*((_Mybase *)this) += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		*((_Mybase *)this) -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
	: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	reverse_iterator<_RanIt> operator+(_Diff _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2> inline
	typename reverse_iterator<_RanIt1>::difference_type
		operator-(const reverse_iterator<_RanIt1>& _Left,
			const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _BidIt,
	class _Ty,
	class _Reference = _Ty&,
	class _Pointer = _Ty *,
	class _Diff = ptrdiff_t>
	class reverse_bidirectional_iterator
		: public iterator<bidirectional_iterator_tag, _Ty, _Diff,
			_Pointer, _Reference>
	{	
public:
	typedef reverse_bidirectional_iterator<_BidIt, _Ty, _Reference,
		_Pointer, _Diff> _Myt;
	typedef _BidIt iterator_type;

	reverse_bidirectional_iterator()
		{	
		}

	explicit reverse_bidirectional_iterator(_BidIt _Right)
		: current(_Right)
		{	
		}

	_BidIt base() const
		{	
		return (current);
		}

	_Reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	_Pointer operator->() const
		{	
		_Reference _Tmp = **this;
		return (&_Tmp);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (current == _Right.current);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

protected:
	_BidIt current;	
	};

		
template<class _BidIt,
	class _BidIt2 = _BidIt>
	class _Revbidit
		: public iterator<
			typename iterator_traits<_BidIt>::iterator_category,
			typename iterator_traits<_BidIt>::value_type,
			typename iterator_traits<_BidIt>::difference_type,
			typename iterator_traits<_BidIt>::pointer,
			typename iterator_traits<_BidIt>::reference>
	{	
public:
	typedef _Revbidit<_BidIt, _BidIt2> _Myt;
	typedef typename iterator_traits<_BidIt>::difference_type _Diff;
	typedef typename iterator_traits<_BidIt>::pointer _Pointer;
	typedef typename iterator_traits<_BidIt>::reference _Reference;
	typedef _BidIt iterator_type;

	_Revbidit()
		{	
		}

	explicit _Revbidit(_BidIt _Right)
		: current(_Right)
		{	
		}

	_Revbidit(const _Revbidit<_BidIt2>& _Other)
		: current (_Other.base())
		{	
		}

	_BidIt base() const
		{	
		return (current);
		}

	_Reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	_Pointer operator->() const
		{	
		_Reference _Tmp = **this;
		return (&_Tmp);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (current == _Right.current);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

protected:
	_BidIt current;
	};

		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

 
	_Array_const_iterator()
		{	
		_Ptr = 0;
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		{	
		_Ptr = _Parg + _Off;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 








































































































































































































#line 1907 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
		
template<class _Ty> inline
	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Left) < (_Right)) ? _Right : _Left);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Left, _Right) ? _Right : _Left);
	}

		
template<class _Ty> inline
	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Right) < (_Left)) ? _Right : _Left);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left) ? _Right : _Left);
	}

		
  

template<class _Ty> inline
	pair<const _Ty, const _Ty>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty, const _Ty>(_Right, _Left)
		: pair<const _Ty, const _Ty>(_Left, _Right));
	}

		
template<class _Ty,
	class _Pr> inline
	pair<const _Ty, const _Ty>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty, const _Ty>(_Right, _Left)
		: pair<const _Ty, const _Ty>(_Left, _Right));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Copy_impl(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 2241 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

 
		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	*_Dest = *_First;	
	while (0 < --_Count)
		*++_Dest = *++_First;
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Copy_n(_Unchecked(_First), _Count,
				_Unchecked(_Dest))));
	}

 




















































































































#line 2431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
 #line 2432 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2506 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 2611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2685 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _FwdIt,
	class _Ty> inline
	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

inline void _Fill(char *_First, char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(signed char *_First, signed char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(unsigned char *_First, unsigned char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Val;
	}

inline void _Fill_n(char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

inline void _Fill_n(signed char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

inline void _Fill_n(unsigned char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

 
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	_Fill_n(_Unchecked(_Dest), _Count, _Val);
	}

 



























































#line 2813 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	for (; _First1 != _Last1 && *_First1 == *_First2; )
		++_First1, ++_First2;
	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

 
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
		::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
			_First2));
	return (::std:: pair<_InIt1, _InIt2>(
		_Rechecked(_First1, _Ans.first),
		_Ans.second));
	}

 




















































#line 2895 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
		++_First1, ++_First2;
	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
		::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Pred));
	return (::std:: pair<_InIt1, _InIt2>(
		_Rechecked(_First1, _Ans.first),
		_Ans.second));
	}

 
























































#line 2983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!(*_First1 == *_First2))
			return (false);
	return (true);
	}

inline bool _Equal(const char *_First1, const char *_Last1,
	const char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
	const signed char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

 
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2)));
	}

 







































#line 3064 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Pred));
	}

 











































#line 3134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (((*_First1) < (*_First2)))
			return (true);
		else if (*_First2 < *_First1)
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

inline bool _Lexicographical_compare(
	const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2, const unsigned char *_Last2)
	{	
	ptrdiff_t _Num1 = _Last1 - _First1;
	ptrdiff_t _Num2 = _Last2 - _First2;
	int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
	}

 









#line 3170 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2)));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _BidIt> inline
	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
	}

		
template<class _FwdIt> inline
	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			if (++_Next == _Last)
				break;	
			else
				_Mid = _Next;	
		else if (++_Next == _Last)
			_Next = _Mid;	
		}
	}

template<class _BidIt> inline
	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	::std:: reverse(_First, _Mid);
	::std:: reverse(_Mid, _Last);
	::std:: reverse(_First, _Last);
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Shift = _Mid - _First;
	_Diff _Count = _Last - _First;

	for (_Diff _Factor = _Shift; _Factor != 0; )
		{	
		_Diff _Tmp = _Count % _Factor;
		_Count = _Factor;
		_Factor = _Tmp;
		}

	if (_Count < _Last - _First)
		for (; 0 < _Count; --_Count)
			{	
			_RanIt _Hole = _First + _Count;
			_RanIt _Next = _Hole;
			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
			for (; ; )
				{	
				iter_swap(_Next, _Next1);
				_Next = _Next1;
				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
					: _First + (_Shift - (_Last - _Next1));
				if (_Next1 == _Hole)
					break;
				}
			}
	}

template<class _RanIt> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		{	
		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
			_Iter_cat(_First));
		::std:: advance(_First, ::std:: distance(_Mid, _Last));
		}
	return (_First);
	}

		
template<class _Elem>
	class  _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right)
					* sizeof (_Elem);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 3356 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}
		return (*this);
		}

	 ~_Yarn()
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 #line 3400 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

 __declspec(noreturn) void __cdecl _Xinvalid_argument(   const char *);
 __declspec(noreturn) void __cdecl _Xlength_error(   const char *);
 __declspec(noreturn) void __cdecl _Xout_of_range(   const char *);
 __declspec(noreturn) void __cdecl _Xoverflow_error(   const char *);
 __declspec(noreturn) void __cdecl _Xruntime_error(   const char *);
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 3418 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
#line 3419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"























#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

 #pragma pack(push,8)
 #pragma warning(push,3)

 

 
 

 #pragma warning(disable: 4100)


 
 
 
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

namespace std {
		
template<class _Ty> inline
	_Ty  *_Allocate(size_t _Count, _Ty  *)
	{	
	void *_Ptr = 0;

	if (_Count <= 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
		throw bad_alloc(0);

	return ((_Ty  *)_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1  *_Ptr, _Ty2&& _Val)
	{	
	void  *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1  *_Ptr)
	{	
	void  *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Ty> inline
	void _Destroy(_Ty  *_Ptr)
	{	
	_Ptr->~_Ty();
	}

template<> inline
	void _Destroy(char  *)
	{	
	}

template<> inline
	void _Destroy(wchar_t  *)
	{	
	}

 
template<> inline
	void _Destroy(unsigned short  *)
	{	
	}
 #line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

		
template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al)
	{	
	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		_Dest_val(_Al, _First);
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Scalar_ptr_iterator_tag)
	{	
	}

		
template<class _Ty> inline
	_Ty * addressof(_Ty& _Val)
	{	
	return ((_Ty *) &(char&)_Val);
	}

		
template<class _Ty>
	struct _Allocator_base
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	struct _Allocator_base<const _Ty>
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	class allocator
		: public _Allocator_base<_Ty>
	{	
public:
	typedef _Allocator_base<_Ty> _Mybase;
	typedef typename _Mybase::value_type value_type;

	typedef value_type  *pointer;
	typedef value_type & reference;
	typedef const value_type  *const_pointer;
	typedef const value_type & const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const
		{	
		return ((pointer) &(char&)_Val);
		}

	const_pointer address(const_reference _Val) const
		{	
		return ((const_pointer) &(char&)_Val);
		}

	allocator() throw ()
		{	
		}

	allocator(const allocator<_Ty>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type)
		{	
		::operator delete(_Ptr);
		}

	pointer allocate(size_type _Count)
		{	
		return (_Allocate(_Count, (pointer)0));
		}

	pointer allocate(size_type _Count, const void  *)
		{	
		return (allocate(_Count));
		}

	void construct(pointer _Ptr, const _Ty& _Val)
		{	
		_Construct(_Ptr, _Val);
		}

	void construct(pointer _Ptr, _Ty&& _Val)
		{	
		::new ((void  *)_Ptr) _Ty(::std:: forward<_Ty>(_Val));
		}

	template<class _Other>
		void construct(pointer _Ptr, _Other&& _Val)
		{	
		::new ((void  *)_Ptr) _Ty(::std:: forward<_Other>(_Val));
		}

	void destroy(pointer _Ptr)
		{	
		_Destroy(_Ptr);
		}

	size_t max_size() const throw ()
		{	
		size_t _Count = (size_t)(-1) / sizeof (_Ty);
		return (0 < _Count ? _Count : 1);
		}
	};

		
template<> class allocator<void>
	{	
public:
	typedef void _Ty;
	typedef _Ty  *pointer;
	typedef const _Ty  *const_pointer;
	typedef _Ty value_type;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() throw ()
		{	
		}

	allocator(const allocator<_Ty>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) throw ()
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

		
template<class _Alloc,
	class _Ty1,
	class _Ty2>
	void _Cons_val(_Alloc& _Alval, _Ty1 *_Pdest, _Ty2&& _Src)
	{	
	_Alval.construct(_Pdest, ::std:: forward<_Ty2>(_Src));
	}

template<class _Alloc,
	class _Ty1>
	void _Dest_val(_Alloc& _Alval, _Ty1 *_Pdest)
	{	
	_Alval.destroy(_Pdest);
	}
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 297 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"
#line 298 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"






















#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4700)

namespace std {
		
template<class _Ty> inline
	pair<_Ty  *, ptrdiff_t>

		get_temporary_buffer(ptrdiff_t _Count)

	{	
	_Ty  *_Pbuf;

	if (_Count < 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count))
		throw bad_alloc(0);
	for (_Pbuf = 0; 0 < _Count; _Count /= 2)
		if ((_Pbuf = (_Ty  *)operator new(
			(size_t)_Count * sizeof (_Ty), nothrow)) != 0)
			break;

	return (pair<_Ty  *, ptrdiff_t>(_Pbuf, _Count));
	}

		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_Pbuf)
	{	
	operator delete(_Pbuf);
	}

		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, input_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	_Construct(&*_Dest, *_First);	
	while (0 < --_Count)
		_Construct(&*++_Dest, *++_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, forward_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Uninitialized_copy_n(_First, _Count,
				_Unchecked(_Dest))));
	}

 




















































































































#line 249 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy0(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 362 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Cons_val(_Al, _Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_copy(_First, _Last, _Dest,
		_Al, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2> inline
	_Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		allocator<_Ty2>&, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_copy(_First, _Last, _Dest, _Al,
		_Ptr_cat(_First, _Dest)));
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Cons_val(_Al, _Dest, (_Valty &&)*_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_move(_First, _Last, _Dest,
		_Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2,
	class _Valty> inline
	_Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		allocator<_Ty2>&, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_move(_First, _Last, _Dest, _Al,
		_Val_type(_First), _Ptr_cat(_First, _Dest)));
	}

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
	;
	_FwdIt _Next = _First;

	try {
	for (; _First != _Last; ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	}

template<class _Ty,
	class _Tval> inline
	void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	::std:: fill(_First, _Last, _Val);
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	_Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
 


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	}

template<class _Ty,
	class _Diff,
	class _Tval> inline
	void _Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	::std:: _Fill_n(_First, _Count, _Val);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	void uninitialized_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val)
	{	
	_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 563 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Cons_val(_Al, _First, *_Pval);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_fill_n(_First, _Count,
		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Tval,
	class _Valty> inline
	void _Uninit_fill_n(_Ty *_First, _Diff _Count,
		const _Tval *_Pval, allocator<_Ty>&,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, *_Pval);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc> inline
	void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al)
	{	
	_Uninit_fill_n(_First, _Count, _Pval, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *, _Alloc& _Al,
			_Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 625 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)

		_Cons_val(_Al, _First, _Valty());

	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_def_fill_n(_First, _Count,
		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Tval,
	class _Valty> inline
	void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
		const _Tval *, allocator<_Ty>&,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, (_Valty)0);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc> inline
	void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al)
	{	
	_Uninit_def_fill_n(_First, _Count, _Pval, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Ty>
	class raw_storage_iterator
		: public _Outit
	{	
public:
	typedef _FwdIt iterator_type;	
	typedef _FwdIt iter_type;	
	typedef _Ty element_type;	

	explicit raw_storage_iterator(_FwdIt _First)
		: _Next(_First)
		{	
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator=(const _Ty& _Val)
		{	
		_Construct(&*_Next, _Val);
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty> operator++(int)
		{	
		raw_storage_iterator<_FwdIt, _Ty> _Ans = *this;
		++_Next;
		return (_Ans);
		}

private:
	_FwdIt _Next;	
	};

		
template<class _Ty>
	class _Temp_iterator
		: public _Outit
	{	
public:
	typedef _Ty  *_Pty;

	_Temp_iterator(ptrdiff_t _Count = 0)
		{	
		_Buf._Begin = 0;
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = _Count;	
		_Pbuf = &_Buf;
		}

	_Temp_iterator(const _Temp_iterator<_Ty>& _Right)
		{	
		_Buf._Begin = 0;	
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = 0;
		*this = _Right;
		}

	~_Temp_iterator()
		{	
		if (_Buf._Begin != 0)
			{	
			for (_Pty _Next = _Buf._Begin;
				_Next != _Buf._Hiwater; ++_Next)
				_Destroy(&*_Next);
			::std:: return_temporary_buffer(_Buf._Begin);
			}
		}

	_Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
		{	
		_Pbuf = _Right._Pbuf;
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(const _Ty& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ = _Val;	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, _Val);
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(_Ty&& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ =
				::std:: forward<_Ty>(_Val);	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, ::std:: forward<_Ty>(_Val));
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator*()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++(int)
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& _Init()
		{	
		_Pbuf->_Current = _Pbuf->_Begin;
		return (*this);
		}

	_Pty _First() const
		{	
		return (_Pbuf->_Begin);
		}

	_Pty _Last() const
		{	
		return (_Pbuf->_Current);
		}

	ptrdiff_t _Maxlen()
		{	
		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
			{	
			pair<_Pty, ptrdiff_t> _Pair =

				::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

			_Pbuf->_Begin = _Pair.first;
			_Pbuf->_Current = _Pair.first;
			_Pbuf->_Hiwater = _Pair.first;
			_Pbuf->_Size = _Pair.second;
			}
		return (_Pbuf->_Size);
		}

private:
	struct _Bufpar
		{	
		_Pty _Begin;	
		_Pty _Current;	
		_Pty _Hiwater;	
		ptrdiff_t _Size;	
		};
	_Bufpar _Buf;	
	_Bufpar *_Pbuf;	
	};

		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	
		}

	_Ty *_Ref;	
	};

template<class _Ty>
	class auto_ptr
		{	
public:
	typedef auto_ptr<_Ty> _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) throw ()
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(_Myt& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() throw ()
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() throw ()
		{	
		_Other *_Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = 0;	
		return (_Ans);
		}

	template<class _Other>
		_Myt& operator=(auto_ptr<_Other>& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	_Myt& operator=(_Myt& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	_Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr()
		{	
		delete _Myptr;
		}

	_Ty& operator*() const throw ()
		{	
 


#line 940 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		return (*get());
		}

	_Ty *operator->() const throw ()
		{	
 


#line 950 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		return (get());
		}

	_Ty *get() const throw ()
		{	
		return (_Myptr);
		}

	_Ty *release() throw ()
		{	
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	
	};
}

 
 
  
 #line 982 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 
 
 

 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"












#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"









#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"





#pragma pack(push,8)


extern "C" {
#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"













#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"







typedef struct __JUMP_BUFFER {
    unsigned long Ebp;
    unsigned long Ebx;
    unsigned long Edi;
    unsigned long Esi;
    unsigned long Esp;
    unsigned long Eip;
    unsigned long Registration;
    unsigned long TryLevel;
    unsigned long Cookie;
    unsigned long UnwindFunc;
    unsigned long UnwindData[6];
} _JUMP_BUFFER;


























































































































































#line 231 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"





typedef int jmp_buf[16];

#line 239 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"




int __cdecl _setjmp(  jmp_buf _Buf);


}
#line 248 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"


extern "C"
{
 __declspec(noreturn) void __cdecl longjmp(  jmp_buf _Buf,   int _Value) throw(...);
}


#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"

#pragma pack(pop)

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"










#pragma once






#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
















#pragma once






#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

















#pragma once






#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

















#pragma once






#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"










#pragma once






#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"


















#pragma once






#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"




















#pragma once






#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"



























#pragma once






#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"



#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"


extern "C" { 


#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];    
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;


void  _m_empty(void);
__m64 _m_from_int(int _I);
int   _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);




























































}; 
#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

#line 186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"
#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"
#line 188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;





#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 







































































 
 
 


extern "C" { 
  
#line 181 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);








#line 275 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);






























 
 
 

 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp), 
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp), 
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a), 
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64  ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a), 
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b)); 
}



}; 
#line 487 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

#line 489 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

#line 491 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];    
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12, 
                            char _B11, char _B10, char _B9, char _B8, 
                            char _B7, char _B6, char _B5, char _B4, 
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3, 
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12, 
                             char _B11, char _B10, char _B9, char _B8, 
                             char _B7, char _B6, char _B5, char _B4, 
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);













#line 407 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"


}; 
#line 411 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

#line 413 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

#line 415 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"
#line 416 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


}; 
#line 100 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

#line 104 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"
#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"









extern "C" {
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);

    
    

    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 114 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"


















































extern "C" {
#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128  v1, __m128  v2, const int mask);
        extern __m128  _mm_blendv_ps(__m128  v1, __m128  v2, __m128 v3);

        
        

        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);

        
        

        extern __m128  _mm_dp_ps(__m128  val1, __m128  val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);

        

        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);

        
        

        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);

        
        

        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);

        
        

        extern int _mm_testz_si128(__m128i mask, __m128i val);

        
        

        extern int _mm_testc_si128(__m128i mask, __m128i val);

        
        
        

        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);

        




        
        

        extern int _mm_extract_ps(__m128 src, const int ndx);

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);



#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i src, const int ndx);
        extern int   _mm_extract_epi32(__m128i src, const int ndx);



#line 199 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i shortValues);

        

        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);

        

        extern __m128  _mm_round_ps(__m128  val, int iRoundMode);
        extern __m128  _mm_round_ss(__m128 dst, __m128  val, int iRoundMode);

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues); 
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);


        
        

        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);

        



        extern __m128i _mm_stream_load_si128(__m128i* v1);


}; 
#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"



extern "C" {
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"












































 
    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int     _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int     _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);



#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);



#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"


}; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 136 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"
#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"



extern "C" {
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2, 
					    const int imm8);





}; 
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"


extern "C" {
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 { 
    float m256_f32[8];
} __m256;
    
typedef struct __declspec(intrin_type) __declspec(align(32)) {
    double m256d_f64[4]; 
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;













































extern __m256d __cdecl _mm256_add_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_add_ps(__m256 m1, __m256 m2);












extern __m256d __cdecl _mm256_addsub_pd(__m256d m1, __m256d m2);












extern __m256 __cdecl _mm256_addsub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_and_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_and_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_andnot_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_andnot_ps(__m256 m1, __m256 m2);













extern __m256d __cdecl _mm256_blend_pd(__m256d m1, __m256d m2, const int mask);













extern __m256 __cdecl _mm256_blend_ps(__m256 m1, __m256 m2, const int mask);









extern __m256d __cdecl _mm256_blendv_pd(__m256d m1, __m256d m2, __m256d m3);









extern __m256 __cdecl _mm256_blendv_ps(__m256 m1, __m256 m2, __m256 mask);








extern __m256d __cdecl _mm256_div_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_div_ps(__m256 m1, __m256 m2);














extern __m256 __cdecl _mm256_dp_ps(__m256 m1, __m256 m2, const int mask);








extern __m256d __cdecl _mm256_hadd_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_hadd_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_hsub_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_hsub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_max_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_max_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_min_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_min_ps(__m256 m1, __m256 m2);









extern __m256d __cdecl _mm256_mul_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_mul_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_or_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_or_ps(__m256 m1, __m256 m2);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d m1, __m256d m2, const int select);












extern __m256 __cdecl _mm256_shuffle_ps(__m256 m1, __m256 m2, const int select);








extern __m256d __cdecl _mm256_sub_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_sub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_xor_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_xor_ps(__m256 m1, __m256 m2);














extern __m128d __cdecl _mm_cmp_pd(__m128d m1, __m128d m2, const int predicate);
extern __m256d __cdecl _mm256_cmp_pd(__m256d m1, __m256d m2, const int predicate);














extern __m128 __cdecl _mm_cmp_ps(__m128 m1, __m128 m2, const int predicate);
extern __m256 __cdecl _mm256_cmp_ps(__m256 m1, __m256 m2, const int predicate);












extern __m128d __cdecl _mm_cmp_sd(__m128d m1, __m128d m2, const int predicate);












extern __m128 __cdecl _mm_cmp_ss(__m128 m1, __m128 m2, const int predicate);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i m1);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i m1);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d m1);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256 m1);









extern __m256d __cdecl _mm256_cvtps_pd(__m128 m1);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d m1);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d m1);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256 m1);







extern __m128  __cdecl _mm256_extractf128_ps(__m256 m1, const int offset);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d m1, const int offset);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i m1, const int offset);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256 m1, __m256i control);
extern __m128  __cdecl _mm_permutevar_ps(__m128 a, __m128i control);









extern __m256  __cdecl _mm256_permute_ps(__m256 m1, int control);
extern __m128  __cdecl _mm_permute_ps(__m128 a, int control);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d m1, __m256i control);
extern __m128d __cdecl _mm_permutevar_pd(__m128d a, __m128i control);









extern __m256d __cdecl _mm256_permute_pd(__m256d m1, int control);
extern __m128d __cdecl _mm_permute_pd(__m128d a, int control);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256 m1, __m256 m2, int control);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d m1, __m256d m2, int control);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i m1, __m256i m2, int control);








extern __m256  __cdecl _mm256_broadcast_ss(float const *a);
extern __m128  __cdecl _mm_broadcast_ss(float const *a);







extern __m256d __cdecl _mm256_broadcast_sd(double const *a);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *a);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *a);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128 a, int offset);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d a, int offset);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i a, int offset);








extern __m256d __cdecl _mm256_load_pd(double const *a);
extern void    __cdecl _mm256_store_pd(double *a, __m256d b);








extern __m256  __cdecl _mm256_load_ps(float const *a);
extern void    __cdecl _mm256_store_ps(float *a, __m256 b);








extern __m256d __cdecl _mm256_loadu_pd(double const *a);
extern void    __cdecl _mm256_storeu_pd(double *a, __m256d b);








extern __m256  __cdecl _mm256_loadu_ps(float const *a);
extern void    __cdecl _mm256_storeu_ps(float *a, __m256 b);








extern __m256i __cdecl _mm256_load_si256(__m256i const *a);
extern void    __cdecl _mm256_store_si256(__m256i *a, __m256i b);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *a);
extern void    __cdecl _mm256_storeu_si256(__m256i *a, __m256i b); 



















extern __m256d __cdecl _mm256_maskload_pd(double const *a, __m256i mask);
extern void    __cdecl _mm256_maskstore_pd(double *a, __m256i mask, __m256d b);
extern __m128d __cdecl _mm_maskload_pd(double const *a, __m128i mask);
extern void    __cdecl _mm_maskstore_pd(double *a, __m128i mask, __m128d b); 



















extern __m256  __cdecl _mm256_maskload_ps(float const *a, __m256i mask);
extern void    __cdecl _mm256_maskstore_ps(float *a, __m256i mask, __m256 b); 
extern __m128  __cdecl _mm_maskload_ps(float const *a, __m128i mask);
extern void    __cdecl _mm_maskstore_ps(float *a, __m128i mask, __m128 b); 







extern __m256  __cdecl _mm256_movehdup_ps(__m256 a);







extern __m256  __cdecl _mm256_moveldup_ps(__m256 a);







extern __m256d __cdecl _mm256_movedup_pd(__m256d a);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *a);







extern void    __cdecl _mm256_stream_si256(__m256i *p, __m256i a);








extern void    __cdecl _mm256_stream_pd(double *p, __m256d a);








extern void    __cdecl _mm256_stream_ps(float *p, __m256 a);








extern __m256  __cdecl _mm256_rcp_ps(__m256 a);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256 a);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d a);








extern __m256  __cdecl _mm256_sqrt_ps(__m256 a);












extern __m256d __cdecl _mm256_round_pd(__m256d a, int iRoundMode);














extern __m256  __cdecl _mm256_round_ps(__m256 a, int iRoundMode);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d m1, __m256d m2);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256 m1, __m256 m2); 







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d m1, __m256d m2);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256 m1, __m256 m2);









extern int     __cdecl _mm256_testz_si256(__m256i s1, __m256i s2);
extern int     __cdecl _mm256_testc_si256(__m256i s1, __m256i s2);
extern int     __cdecl _mm256_testnzc_si256(__m256i s1, __m256i s2);












extern int     __cdecl _mm256_testz_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm256_testc_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm256_testnzc_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm_testz_pd(__m128d s1, __m128d s2);
extern int     __cdecl _mm_testc_pd(__m128d s1, __m128d s2);
extern int     __cdecl _mm_testnzc_pd(__m128d s1, __m128d s2);












extern int     __cdecl _mm256_testz_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm256_testc_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm256_testnzc_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm_testz_ps(__m128 s1, __m128 s2);
extern int     __cdecl _mm_testc_ps(__m128 s1, __m128 s2);
extern int     __cdecl _mm_testnzc_ps(__m128 s1, __m128 s2);








extern int     __cdecl _mm256_movemask_pd(__m256d a);








extern int     __cdecl _mm256_movemask_ps(__m256 a);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short,
                                        short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(long long, long long, long long, long long);

extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short,
                                         short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(long long, long long, long long, long long);




extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d a);
extern __m256d __cdecl _mm256_castps_pd(__m256 a);
extern __m256i __cdecl _mm256_castps_si256(__m256 a);
extern __m256i __cdecl _mm256_castpd_si256(__m256d a);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i a);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i a);
extern __m128  __cdecl _mm256_castps256_ps128(__m256 a);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d a);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i a);
extern __m256  __cdecl _mm256_castps128_ps256(__m128 a);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d a);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i a);


}; 
#line 1075 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1077 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1079 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"
#line 1080 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"




























































































































































































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"



extern "C" { 
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"



void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


}; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"

#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"
#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\mm3dnow.h"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"

#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


extern "C" {
#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




































#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"






#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"








#line 121 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
    
#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


 void * __cdecl _alloca(size_t _Size);
int __cdecl abs(  int);


 unsigned short __cdecl _byteswap_ushort(  unsigned short value);
 unsigned long __cdecl _byteswap_ulong(  unsigned long value);
 unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 value);

















void __cdecl __debugbreak(void);
void __cdecl _disable(void);


__int64 __emul(int,int);
unsigned __int64 __emulu(unsigned int,unsigned int);
void __cdecl _enable(void);


















long __cdecl _InterlockedDecrement(long volatile *);







long _InterlockedExchange(long volatile *, long);









short _InterlockedExchange16(short volatile *, short);
char _InterlockedExchange8(char volatile *, char);
long _InterlockedExchangeAdd(long volatile *, long);







short _InterlockedExchangeAdd16(short volatile *, short);
char _InterlockedExchangeAdd8(char volatile *, char);
long _InterlockedCompareExchange (long volatile *, long, long);












__int64 _InterlockedCompareExchange64(__int64 volatile *, __int64, __int64);

long __cdecl _InterlockedIncrement(long volatile *);







long _InterlockedOr(long volatile *, long);
char _InterlockedOr8(char volatile *, char);
short _InterlockedOr16(short volatile *, short);









long _InterlockedXor(long volatile *, long);
char _InterlockedXor8(char volatile *, char);
short _InterlockedXor16(short volatile *, short);









long _InterlockedAnd(long volatile *, long);
char _InterlockedAnd8(char volatile *, char);
short _InterlockedAnd16(short volatile *, short);









long _InterlockedAddLargeStatistic(__int64 volatile *, long);
int __cdecl _inp(unsigned short);
int __cdecl inp(unsigned short);
unsigned long __cdecl _inpd(unsigned short);
unsigned long __cdecl inpd(unsigned short);
unsigned short __cdecl _inpw(unsigned short);
unsigned short __cdecl inpw(unsigned short);







long __cdecl labs(  long);







 unsigned long __cdecl _lrotl(  unsigned long,  int);
 unsigned long __cdecl _lrotr(  unsigned long,  int);
unsigned __int64 __ll_lshift(unsigned __int64,int);
__int64 __ll_rshift(__int64,int);







































 int __cdecl memcmp(   const void *,   const void *,  size_t _Size);
void * __cdecl memcpy(    void *,   const void *,  size_t _Size);
void * __cdecl memset(    void *,  int,  size_t _Size);




int __cdecl _outp(unsigned short,int);
int __cdecl outp(unsigned short,int);
unsigned long __cdecl _outpd(unsigned short,unsigned long);
unsigned long __cdecl outpd(unsigned short,unsigned long);
unsigned short __cdecl _outpw(unsigned short,unsigned short);
unsigned short __cdecl outpw(unsigned short,unsigned short);











void * _ReturnAddress(void);



 unsigned int __cdecl _rotl(  unsigned int,  int);

 unsigned int __cdecl _rotr(  unsigned int,  int);



int __cdecl _setjmp(jmp_buf);











 int __cdecl strcmp(   const char *,   const char *);
 size_t __cdecl strlen(   const char *);

char * __cdecl strset(    char *,  int);







unsigned __int64 __ull_rshift(unsigned __int64,int);






void * _AddressOfReturnAddress(void);



void _m_empty(void);
__m64 _m_from_int(int);
int _m_to_int(__m64);
__m64 _m_packsswb(__m64,__m64);
__m64 _m_packssdw(__m64,__m64);
__m64 _m_packuswb(__m64,__m64);
__m64 _m_punpckhbw(__m64,__m64);
__m64 _m_punpckhwd(__m64,__m64);
__m64 _m_punpckhdq(__m64,__m64);
__m64 _m_punpcklbw(__m64,__m64);
__m64 _m_punpcklwd(__m64,__m64);
__m64 _m_punpckldq(__m64,__m64);
__m64 _m_paddb(__m64,__m64);
__m64 _m_paddw(__m64,__m64);
__m64 _m_paddd(__m64,__m64);
__m64 _m_paddsb(__m64,__m64);
__m64 _m_paddsw(__m64,__m64);
__m64 _m_paddusb(__m64,__m64);
__m64 _m_paddusw(__m64,__m64);
__m64 _m_psubb(__m64,__m64);
__m64 _m_psubw(__m64,__m64);
__m64 _m_psubd(__m64,__m64);
__m64 _m_psubsb(__m64,__m64);
__m64 _m_psubsw(__m64,__m64);
__m64 _m_psubusb(__m64,__m64);
__m64 _m_psubusw(__m64,__m64);
__m64 _m_pmaddwd(__m64,__m64);
__m64 _m_pmulhw(__m64,__m64);
__m64 _m_pmullw(__m64,__m64);
__m64 _m_psllw(__m64,__m64);
__m64 _m_psllwi(__m64,int);
__m64 _m_pslld(__m64,__m64);
__m64 _m_pslldi(__m64,int);
__m64 _m_psllq(__m64,__m64);
__m64 _m_psllqi(__m64,int);
__m64 _m_psraw(__m64,__m64);
__m64 _m_psrawi(__m64,int);
__m64 _m_psrad(__m64,__m64);
__m64 _m_psradi(__m64,int);
__m64 _m_psrlw(__m64,__m64);
__m64 _m_psrlwi(__m64,int);
__m64 _m_psrld(__m64,__m64);
__m64 _m_psrldi(__m64,int);
__m64 _m_psrlq(__m64,__m64);
__m64 _m_psrlqi(__m64,int);
__m64 _m_pand(__m64,__m64);
__m64 _m_pandn(__m64,__m64);
__m64 _m_por(__m64,__m64);
__m64 _m_pxor(__m64,__m64);
__m64 _m_pcmpeqb(__m64,__m64);
__m64 _m_pcmpeqw(__m64,__m64);
__m64 _m_pcmpeqd(__m64,__m64);
__m64 _m_pcmpgtb(__m64,__m64);
__m64 _m_pcmpgtw(__m64,__m64);
__m64 _m_pcmpgtd(__m64,__m64);
__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int,int);
__m64 _mm_set_pi16(short,short,short,short);
__m64 _mm_set_pi8(char,char,char,char,char,char,char,char);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi8(char);
__m64 _mm_setr_pi32(int,int);
__m64 _mm_setr_pi16(short,short,short,short);
__m64 _mm_setr_pi8(char,char,char,char,char,char,char,char);
int _m_pextrw(__m64,int);
__m64 _m_pinsrw(__m64,int,int);
__m64 _m_pmaxsw(__m64,__m64);
__m64 _m_pmaxub(__m64,__m64);
__m64 _m_pminsw(__m64,__m64);
__m64 _m_pminub(__m64,__m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhuw(__m64,__m64);
__m64 _m_pshufw(__m64,int);
void _m_maskmovq(__m64,__m64,char*);
__m64 _m_pavgb(__m64,__m64);
__m64 _m_pavgw(__m64,__m64);
__m64 _m_psadbw(__m64,__m64);
__m64 _m_from_float(float);
float _m_to_float(__m64);
__m128 _mm_add_ss(__m128,__m128);
__m128 _mm_add_ps(__m128,__m128);
__m128 _mm_sub_ss(__m128,__m128);
__m128 _mm_sub_ps(__m128,__m128);
__m128 _mm_mul_ss(__m128,__m128);
__m128 _mm_mul_ps(__m128,__m128);
__m128 _mm_div_ss(__m128,__m128);
__m128 _mm_div_ps(__m128,__m128);
__m128 _mm_sqrt_ss(__m128);
__m128 _mm_sqrt_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_min_ss(__m128,__m128);
__m128 _mm_min_ps(__m128,__m128);
__m128 _mm_max_ss(__m128,__m128);
__m128 _mm_max_ps(__m128,__m128);
__m128 _mm_and_ps(__m128,__m128);
__m128 _mm_andnot_ps(__m128,__m128);
__m128 _mm_or_ps(__m128,__m128);
__m128 _mm_xor_ps(__m128,__m128);
__m128 _mm_cmpeq_ss(__m128,__m128);
__m128 _mm_cmpeq_ps(__m128,__m128);
__m128 _mm_cmplt_ss(__m128,__m128);
__m128 _mm_cmplt_ps(__m128,__m128);
__m128 _mm_cmple_ss(__m128,__m128);
__m128 _mm_cmple_ps(__m128,__m128);
__m128 _mm_cmpgt_ss(__m128,__m128);
__m128 _mm_cmpgt_ps(__m128,__m128);
__m128 _mm_cmpge_ss(__m128,__m128);
__m128 _mm_cmpge_ps(__m128,__m128);
__m128 _mm_cmpneq_ss(__m128,__m128);
__m128 _mm_cmpneq_ps(__m128,__m128);
__m128 _mm_cmpnlt_ss(__m128,__m128);
__m128 _mm_cmpnlt_ps(__m128,__m128);
__m128 _mm_cmpnle_ss(__m128,__m128);
__m128 _mm_cmpnle_ps(__m128,__m128);
__m128 _mm_cmpngt_ss(__m128,__m128);
__m128 _mm_cmpngt_ps(__m128,__m128);
__m128 _mm_cmpnge_ss(__m128,__m128);
__m128 _mm_cmpnge_ps(__m128,__m128);
__m128 _mm_cmpord_ss(__m128,__m128);
__m128 _mm_cmpord_ps(__m128,__m128);
__m128 _mm_cmpunord_ss(__m128,__m128);
__m128 _mm_cmpunord_ps(__m128,__m128);
int _mm_comieq_ss(__m128,__m128);
int _mm_comilt_ss(__m128,__m128);
int _mm_comile_ss(__m128,__m128);
int _mm_comigt_ss(__m128,__m128);
int _mm_comige_ss(__m128,__m128);
int _mm_comineq_ss(__m128,__m128);
int _mm_ucomieq_ss(__m128,__m128);
int _mm_ucomilt_ss(__m128,__m128);
int _mm_ucomile_ss(__m128,__m128);
int _mm_ucomigt_ss(__m128,__m128);
int _mm_ucomige_ss(__m128,__m128);
int _mm_ucomineq_ss(__m128,__m128);
int _mm_cvt_ss2si(__m128);
__m64 _mm_cvt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m64 _mm_cvtt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128,int);
__m128 _mm_cvt_pi2ps(__m128,__m64);
__m128 _mm_shuffle_ps(__m128,__m128,unsigned int);
__m128 _mm_unpackhi_ps(__m128,__m128);
__m128 _mm_unpacklo_ps(__m128,__m128);
__m128 _mm_loadh_pi(__m128,__m64 const*);
void _mm_storeh_pi(__m64*,__m128);
__m128 _mm_loadl_pi(__m128,__m64 const*);
void _mm_storel_pi(__m64*,__m128);
int _mm_movemask_ps(__m128);
__m128 _mm_set_ss(float);
__m128 _mm_set_ps1(float);
__m128 _mm_set_ps(float,float,float,float);
__m128 _mm_setr_ps(float,float,float,float);
__m128 _mm_setzero_ps(void);
__m128 _mm_load_ss(float const*);
__m128 _mm_load_ps1(float const*);
__m128 _mm_load_ps(float const*);
__m128 _mm_loadr_ps(float const*);
__m128 _mm_loadu_ps(float const*);
__m128 _mm_move_ss(__m128,__m128);
void _mm_store_ss(float*,__m128);
void _mm_store_ps1(float*,__m128);
void _mm_store_ps(float*,__m128);
void _mm_storer_ps(float*,__m128);
void _mm_storeu_ps(float*,__m128);
void _mm_prefetch(char const*,int);
void _mm_stream_pi(__m64*,__m64);
void _mm_stream_ps(float*,__m128);
void _mm_sfence(void);
unsigned int _mm_getcsr(void);
void _mm_setcsr(unsigned int);
__m128 _mm_movelh_ps(__m128,__m128);
__m128 _mm_movehl_ps(__m128,__m128);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);
void _m_femms(void);
__m64 _m_pavgusb(__m64,__m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64,__m64);
__m64 _m_pfadd(__m64,__m64);
__m64 _m_pfcmpeq(__m64,__m64);
__m64 _m_pfcmpge(__m64,__m64);
__m64 _m_pfcmpgt(__m64,__m64);
__m64 _m_pfmax(__m64,__m64);
__m64 _m_pfmin(__m64,__m64);
__m64 _m_pfmul(__m64,__m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64,__m64);
__m64 _m_pfrcpit2(__m64,__m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64,__m64);
__m64 _m_pfsub(__m64,__m64);
__m64 _m_pfsubr(__m64,__m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64,__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64,__m64);
__m64 _m_pfpnacc(__m64,__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);
__m128d _mm_add_sd(__m128d,__m128d);
__m128d _mm_add_pd(__m128d,__m128d);
__m128d _mm_div_sd(__m128d,__m128d);
__m128d _mm_div_pd(__m128d,__m128d);
__m128d _mm_max_sd(__m128d,__m128d);
__m128d _mm_max_pd(__m128d,__m128d);
__m128d _mm_min_sd(__m128d,__m128d);
__m128d _mm_min_pd(__m128d,__m128d);
__m128d _mm_mul_sd(__m128d,__m128d);
__m128d _mm_mul_pd(__m128d,__m128d);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128d _mm_sqrt_pd(__m128d);
__m128d _mm_sub_sd(__m128d,__m128d);
__m128d _mm_sub_pd(__m128d,__m128d);
__m128d _mm_and_pd(__m128d,__m128d);
__m128d _mm_andnot_pd(__m128d,__m128d);
__m128d _mm_or_pd(__m128d,__m128d);
__m128d _mm_xor_pd(__m128d,__m128d);
__m128d _mm_cmpeq_sd(__m128d,__m128d);
__m128d _mm_cmpeq_pd(__m128d,__m128d);
__m128d _mm_cmplt_sd(__m128d,__m128d);
__m128d _mm_cmplt_pd(__m128d,__m128d);
__m128d _mm_cmple_sd(__m128d,__m128d);
__m128d _mm_cmple_pd(__m128d,__m128d);
__m128d _mm_cmpgt_sd(__m128d,__m128d);
__m128d _mm_cmpgt_pd(__m128d,__m128d);
__m128d _mm_cmpge_sd(__m128d,__m128d);
__m128d _mm_cmpge_pd(__m128d,__m128d);
__m128d _mm_cmpneq_sd(__m128d,__m128d);
__m128d _mm_cmpneq_pd(__m128d,__m128d);
__m128d _mm_cmpnlt_sd(__m128d,__m128d);
__m128d _mm_cmpnlt_pd(__m128d,__m128d);
__m128d _mm_cmpnle_sd(__m128d,__m128d);
__m128d _mm_cmpnle_pd(__m128d,__m128d);
__m128d _mm_cmpngt_sd(__m128d,__m128d);
__m128d _mm_cmpngt_pd(__m128d,__m128d);
__m128d _mm_cmpnge_sd(__m128d,__m128d);
__m128d _mm_cmpnge_pd(__m128d,__m128d);
__m128d _mm_cmpord_sd(__m128d,__m128d);
__m128d _mm_cmpord_pd(__m128d,__m128d);
__m128d _mm_cmpunord_sd(__m128d,__m128d);
__m128d _mm_cmpunord_pd(__m128d,__m128d);
int _mm_comieq_sd(__m128d,__m128d);
int _mm_comilt_sd(__m128d,__m128d);
int _mm_comile_sd(__m128d,__m128d);
int _mm_comigt_sd(__m128d,__m128d);
int _mm_comige_sd(__m128d,__m128d);
int _mm_comineq_sd(__m128d,__m128d);
int _mm_ucomieq_sd(__m128d,__m128d);
int _mm_ucomilt_sd(__m128d,__m128d);
int _mm_ucomile_sd(__m128d,__m128d);
int _mm_ucomigt_sd(__m128d,__m128d);
int _mm_ucomige_sd(__m128d,__m128d);
int _mm_ucomineq_sd(__m128d,__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtps_pd(__m128);
__m128d _mm_cvtepi32_pd(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
int _mm_cvtsd_si32(__m128d);
__m128 _mm_cvtsd_ss(__m128,__m128d);
__m128d _mm_cvtsi32_sd(__m128d,int);
__m128d _mm_cvtss_sd(__m128d,__m128);
__m128i _mm_cvttpd_epi32(__m128d);
int _mm_cvttsd_si32(__m128d);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtps_epi32(__m128);
__m128i _mm_cvttps_epi32(__m128);
__m64 _mm_cvtpd_pi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128d _mm_unpackhi_pd(__m128d,__m128d);
__m128d _mm_unpacklo_pd(__m128d,__m128d);
int _mm_movemask_pd(__m128d);
__m128d _mm_shuffle_pd(__m128d,__m128d,int);
__m128d _mm_load_pd(double const*);
__m128d _mm_load1_pd(double const*);
__m128d _mm_loadr_pd(double const*);
__m128d _mm_loadu_pd(double const*);
__m128d _mm_load_sd(double const*);
__m128d _mm_loadh_pd(__m128d,double const*);
__m128d _mm_loadl_pd(__m128d,double const*);
__m128d _mm_set_sd(double);
__m128d _mm_set1_pd(double);
__m128d _mm_set_pd(double,double);
__m128d _mm_setr_pd(double,double);
__m128d _mm_setzero_pd(void);
__m128d _mm_move_sd(__m128d,__m128d);
void _mm_store_sd(double*,__m128d);
void _mm_store1_pd(double*,__m128d);
void _mm_store_pd(double*,__m128d);
void _mm_storeu_pd(double*,__m128d);
void _mm_storer_pd(double*,__m128d);
void _mm_storeh_pd(double*,__m128d);
void _mm_storel_pd(double*,__m128d);
__m128i _mm_add_epi8(__m128i,__m128i);
__m128i _mm_add_epi16(__m128i,__m128i);
__m128i _mm_add_epi32(__m128i,__m128i);
__m64 _mm_add_si64(__m64,__m64);
__m128i _mm_add_epi64(__m128i,__m128i);
__m128i _mm_adds_epi8(__m128i,__m128i);
__m128i _mm_adds_epi16(__m128i,__m128i);
__m128i _mm_adds_epu8(__m128i,__m128i);
__m128i _mm_adds_epu16(__m128i,__m128i);
__m128i _mm_avg_epu8(__m128i,__m128i);
__m128i _mm_avg_epu16(__m128i,__m128i);
__m128i _mm_madd_epi16(__m128i,__m128i);
__m128i _mm_max_epi16(__m128i,__m128i);
__m128i _mm_max_epu8(__m128i,__m128i);
__m128i _mm_min_epi16(__m128i,__m128i);
__m128i _mm_min_epu8(__m128i,__m128i);
__m128i _mm_mulhi_epi16(__m128i,__m128i);
__m128i _mm_mulhi_epu16(__m128i,__m128i);
__m128i _mm_mullo_epi16(__m128i,__m128i);
__m64 _mm_mul_su32(__m64,__m64);
__m128i _mm_mul_epu32(__m128i,__m128i);
__m128i _mm_sad_epu8(__m128i,__m128i);
__m128i _mm_sub_epi8(__m128i,__m128i);
__m128i _mm_sub_epi16(__m128i,__m128i);
__m128i _mm_sub_epi32(__m128i,__m128i);
__m64 _mm_sub_si64(__m64,__m64);
__m128i _mm_sub_epi64(__m128i,__m128i);
__m128i _mm_subs_epi8(__m128i,__m128i);
__m128i _mm_subs_epi16(__m128i,__m128i);
__m128i _mm_subs_epu8(__m128i,__m128i);
__m128i _mm_subs_epu16(__m128i,__m128i);
__m128i _mm_andnot_si128(__m128i,__m128i);
__m128i _mm_and_si128(__m128i,__m128i);
__m128i _mm_or_si128(__m128i,__m128i);
__m128i _mm_xor_si128(__m128i,__m128i);
__m128i _mm_slli_si128(__m128i,int);
__m128i _mm_slli_epi16(__m128i,int);
__m128i _mm_sll_epi16(__m128i,__m128i);
__m128i _mm_slli_epi32(__m128i,int);
__m128i _mm_sll_epi32(__m128i,__m128i);
__m128i _mm_slli_epi64(__m128i,int);
__m128i _mm_sll_epi64(__m128i,__m128i);
__m128i _mm_srai_epi16(__m128i,int);
__m128i _mm_sra_epi16(__m128i,__m128i);
__m128i _mm_srai_epi32(__m128i,int);
__m128i _mm_sra_epi32(__m128i,__m128i);
__m128i _mm_srli_si128(__m128i,int);
__m128i _mm_srli_epi16(__m128i,int);
__m128i _mm_srl_epi16(__m128i,__m128i);
__m128i _mm_srli_epi32(__m128i,int);
__m128i _mm_srl_epi32(__m128i,__m128i);
__m128i _mm_srli_epi64(__m128i,int);
__m128i _mm_srl_epi64(__m128i,__m128i);
__m128i _mm_cmpeq_epi8(__m128i,__m128i);
__m128i _mm_cmpeq_epi16(__m128i,__m128i);
__m128i _mm_cmpeq_epi32(__m128i,__m128i);
__m128i _mm_cmpgt_epi8(__m128i,__m128i);
__m128i _mm_cmpgt_epi16(__m128i,__m128i);
__m128i _mm_cmpgt_epi32(__m128i,__m128i);
__m128i _mm_cmplt_epi8(__m128i,__m128i);
__m128i _mm_cmplt_epi16(__m128i,__m128i);
__m128i _mm_cmplt_epi32(__m128i,__m128i);
__m128i _mm_cvtsi32_si128(int);
int _mm_cvtsi128_si32(__m128i);
__m128i _mm_packs_epi16(__m128i,__m128i);
__m128i _mm_packs_epi32(__m128i,__m128i);
__m128i _mm_packus_epi16(__m128i,__m128i);
int _mm_extract_epi16(__m128i,int);
__m128i _mm_insert_epi16(__m128i,int,int);
int _mm_movemask_epi8(__m128i);
__m128i _mm_shuffle_epi32(__m128i,int);
__m128i _mm_shufflehi_epi16(__m128i,int);
__m128i _mm_shufflelo_epi16(__m128i,int);
__m128i _mm_unpackhi_epi8(__m128i,__m128i);
__m128i _mm_unpackhi_epi16(__m128i,__m128i);
__m128i _mm_unpackhi_epi32(__m128i,__m128i);
__m128i _mm_unpackhi_epi64(__m128i,__m128i);
__m128i _mm_unpacklo_epi8(__m128i,__m128i);
__m128i _mm_unpacklo_epi16(__m128i,__m128i);
__m128i _mm_unpacklo_epi32(__m128i,__m128i);
__m128i _mm_unpacklo_epi64(__m128i,__m128i);
__m128i _mm_load_si128(__m128i const*);
__m128i _mm_loadu_si128(__m128i const*);
__m128i _mm_loadl_epi64(__m128i const*);
__m128i _mm_set_epi64(__m64,__m64);
__m128i _mm_set_epi32(int,int,int,int);
__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
__m128i _mm_set1_epi64(__m64);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi8(char);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi64(__m64,__m64);
__m128i _mm_setr_epi32(int,int,int,int);
__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
__m128i _mm_setzero_si128(void);
void _mm_store_si128(__m128i*,__m128i);
void _mm_storeu_si128(__m128i*,__m128i);
void _mm_storel_epi64(__m128i*,__m128i);
void _mm_maskmoveu_si128(__m128i,__m128i,char*);
__m128i _mm_move_epi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m64 _mm_movepi64_pi64(__m128i);
void _mm_stream_pd(double*,__m128d);
void _mm_stream_si128(__m128i*,__m128i);
void _mm_clflush(void const *);
void _mm_lfence(void);
void _mm_mfence(void);
void _mm_stream_si32(int*,int);
void _mm_pause(void);
__m128 _mm_addsub_ps(__m128,__m128);
__m128d _mm_addsub_pd(__m128d,__m128d);
__m128 _mm_hadd_ps(__m128,__m128);
__m128d _mm_hadd_pd(__m128d,__m128d);
__m128 _mm_hsub_ps(__m128,__m128);
__m128d _mm_hsub_pd(__m128d,__m128d);
__m128i _mm_lddqu_si128(__m128i const*);
void _mm_monitor(void const*,unsigned int,unsigned int);
__m128d _mm_movedup_pd(__m128d);
__m128d _mm_loaddup_pd(double const*);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_moveldup_ps(__m128);
void _mm_mwait(unsigned int,unsigned int);
__m128i _mm_hadd_epi16 (__m128i a, __m128i b);
__m128i _mm_hadd_epi32 (__m128i a, __m128i b);
__m128i _mm_hadds_epi16 (__m128i a, __m128i b);
__m64 _mm_hadd_pi16 (__m64 a, __m64 b);
__m64 _mm_hadd_pi32 (__m64 a, __m64 b);
__m64 _mm_hadds_pi16 (__m64 a, __m64 b);
__m128i _mm_hsub_epi16 (__m128i a, __m128i b);
__m128i _mm_hsub_epi32 (__m128i a, __m128i b);
__m128i _mm_hsubs_epi16 (__m128i a, __m128i b);
__m64 _mm_hsub_pi16 (__m64 a, __m64 b);
__m64 _mm_hsub_pi32 (__m64 a, __m64 b);
__m64 _mm_hsubs_pi16 (__m64 a, __m64 b);
__m128i _mm_maddubs_epi16 (__m128i a, __m128i b);
__m64 _mm_maddubs_pi16 (__m64 a, __m64 b);
__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);
__m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);
__m128i _mm_shuffle_epi8 (__m128i a, __m128i b);
__m64 _mm_shuffle_pi8 (__m64 a, __m64 b);
__m128i _mm_sign_epi8 (__m128i a, __m128i b);
__m128i _mm_sign_epi16 (__m128i a, __m128i b);
__m128i _mm_sign_epi32 (__m128i a, __m128i b);
__m64 _mm_sign_pi8 (__m64 a, __m64 b);
__m64 _mm_sign_pi16 (__m64 a, __m64 b);
__m64 _mm_sign_pi32 (__m64 a, __m64 b);
__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);
__m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);
__m128i _mm_abs_epi8 (__m128i a);
__m128i _mm_abs_epi16 (__m128i a);
__m128i _mm_abs_epi32 (__m128i a);
__m64 _mm_abs_pi8 (__m64 a);
__m64 _mm_abs_pi16 (__m64 a);
__m64 _mm_abs_pi32 (__m64 a);








__m128i _mm_blend_epi16 (__m128i v1, __m128i v2, const int mask);
__m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);
__m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
__m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);
__m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
__m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);
__m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
__m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);
__m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);
__m128i _mm_min_epi8 (__m128i val1, __m128i val2);
__m128i _mm_max_epi8 (__m128i val1, __m128i val2);
__m128i _mm_min_epu16(__m128i val1, __m128i val2);
__m128i _mm_max_epu16(__m128i val1, __m128i val2);
__m128i _mm_min_epi32(__m128i val1, __m128i val2);
__m128i _mm_max_epi32(__m128i val1, __m128i val2);
__m128i _mm_min_epu32(__m128i val1, __m128i val2);
__m128i _mm_max_epu32(__m128i val1, __m128i val2);
__m128i _mm_mullo_epi32(__m128i a, __m128i b);
__m128i _mm_mul_epi32(__m128i a, __m128i b);
int _mm_testz_si128(__m128i mask, __m128i val);
int _mm_testc_si128(__m128i mask, __m128i val);
int _mm_testnzc_si128(__m128i mask, __m128i s2);
__m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
int _mm_extract_ps(__m128 src, const int ndx);
__m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
__m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);
int _mm_extract_epi8 (__m128i src, const int ndx);
int _mm_extract_epi32(__m128i src, const int ndx);
__m128i _mm_minpos_epu16(__m128i shortValues);
__m128d _mm_round_pd(__m128d val, int iRoundMode);
__m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);
__m128 _mm_round_ps(__m128 val, int iRoundMode);
__m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);
__m128i _mm_cvtepi8_epi32 (__m128i byteValues);
__m128i _mm_cvtepi16_epi32(__m128i shortValues);
__m128i _mm_cvtepi8_epi64 (__m128i byteValues);
__m128i _mm_cvtepi32_epi64(__m128i intValues);
__m128i _mm_cvtepi16_epi64(__m128i shortValues);
__m128i _mm_cvtepi8_epi16 (__m128i byteValues);
__m128i _mm_cvtepu8_epi32 (__m128i byteValues);
__m128i _mm_cvtepu16_epi32(__m128i shortValues);
__m128i _mm_cvtepu8_epi64 (__m128i shortValues);
__m128i _mm_cvtepu32_epi64(__m128i intValues);
__m128i _mm_cvtepu16_epi64(__m128i shortValues);
__m128i _mm_cvtepu8_epi16 (__m128i byteValues);
__m128i _mm_packus_epi32(__m128i val1, __m128i val2);
__m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);
__m128i _mm_stream_load_si128(__m128i* v1);


__m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
int _mm_cmpistri (__m128i a, __m128i b, const int mode);
__m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
int _mm_cmpistro (__m128i a, __m128i b, const int mode);
int _mm_cmpistra (__m128i a, __m128i b, const int mode);
int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);
__m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);
int _mm_popcnt_u32(unsigned int v);

unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);

void _WriteBarrier(void);
void _ReadWriteBarrier(void);










unsigned long __readcr0(void);
unsigned long __readcr2(void);
unsigned long __readcr3(void);
unsigned long __readcr4(void);
unsigned long __readcr8(void);




void __writecr0(unsigned);
void __writecr3(unsigned);
void __writecr4(unsigned);
void __writecr8(unsigned);

unsigned __readdr(unsigned int);

void __writedr(unsigned int, unsigned);

unsigned __readeflags(void);

void __writeeflags(unsigned);
void __wbinvd(void);
void __invlpg(void*);
unsigned __int64 __readmsr(unsigned long);
void __writemsr(unsigned long, unsigned __int64);
unsigned __int64 __rdtsc(void);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);









void __addfsbyte(unsigned long Offset, unsigned char Data);
void __addfsword(unsigned long Offset, unsigned short Data);
void __addfsdword(unsigned long Offset, unsigned long Data);
void __incfsbyte(unsigned long Offset);
void __incfsword(unsigned long Offset);
void __incfsdword(unsigned long Offset);








unsigned char __inbyte(unsigned short Port);
unsigned short __inword(unsigned short Port);
unsigned long __indword(unsigned short Port);
void __outbyte(unsigned short Port, unsigned char Data);
void __outword(unsigned short Port, unsigned short Data);
void __outdword(unsigned short Port, unsigned long Data);
void __inbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __inwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __indwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
void __outbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __outwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __outdwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
unsigned int __getcallerseflags();



void __vmx_vmptrst(unsigned __int64 *);



void __vmx_off(void);

void __svm_clgi(void);
void __svm_invlpga(void*, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);
void __halt(void);
void __sidt(void*);
void __lidt(void*);
void __ud2(void);
void __nop(void);











void __stosb(unsigned char *, unsigned char, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

unsigned char _bittest(long const *a, long b);
unsigned char _bittestandset(long *a, long b);
unsigned char _bittestandreset(long *a, long b);
unsigned char _bittestandcomplement(long *a, long b);
unsigned char _interlockedbittestandset(long volatile *a, long b);
unsigned char _interlockedbittestandreset(long volatile *a, long b);






void __cpuid(int a[4], int b);
void __cpuidex(int a[4], int b, int c);
unsigned __int64 __readpmc(unsigned long a);
unsigned long __segmentlimit(unsigned long a);

unsigned char __readfsbyte(unsigned long Offset);
unsigned short __readfsword(unsigned long Offset);
unsigned long __readfsdword(unsigned long Offset);
unsigned __int64 __readfsqword(unsigned long Offset);
void __writefsbyte(unsigned long Offset, unsigned char Data);
void __writefsword(unsigned long Offset, unsigned short Data);
void __writefsdword(unsigned long Offset, unsigned long Data);
void __writefsqword(unsigned long Offset, unsigned __int64 Data);


 unsigned __int64 __cdecl _rotl64(  unsigned __int64,  int);
 unsigned __int64 __cdecl _rotr64(  unsigned __int64,  int);
__int64 __cdecl _abs64(__int64);

unsigned char _BitScanForward(unsigned long* Index, unsigned long Mask);
unsigned char _BitScanReverse(unsigned long* Index, unsigned long Mask);


 wchar_t * __cdecl wcscat(      wchar_t *,    const wchar_t * _Source);
  int __cdecl wcscmp(   const wchar_t *,   const wchar_t *);
 wchar_t * __cdecl wcscpy(   wchar_t *,    const wchar_t * _Source);
  size_t __cdecl wcslen(   const wchar_t *);
#pragma warning(suppress: 4985)
 wchar_t * __cdecl _wcsset(    wchar_t *, wchar_t);




void __int2c(void);
void _ReadBarrier(void);
unsigned char _rotr8(unsigned char value, unsigned char shift);
unsigned short _rotr16(unsigned short value, unsigned char shift);
unsigned char _rotl8(unsigned char value, unsigned char shift);
unsigned short _rotl16(unsigned short value, unsigned char shift);
short _InterlockedIncrement16(short volatile *Addend);
short _InterlockedDecrement16(short volatile *Addend);
short _InterlockedCompareExchange16(short volatile *Destination, short Exchange, short Comparand);
char _InterlockedCompareExchange8(char volatile *Destination, char Exchange, char Comparand);
























































































































































void __nvreg_save_fence(void);
void __nvreg_restore_fence(void);




















unsigned short __lzcnt16(unsigned short);
unsigned int __lzcnt(unsigned int);

unsigned short __popcnt16(unsigned short);
unsigned int __popcnt(unsigned int);

__m128i _mm_extract_si64(__m128i,__m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
__m128i _mm_insert_si64(__m128i,__m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
void _mm_stream_sd(double*,__m128d);
void _mm_stream_ss(float*,__m128);
unsigned __int64 __rdtscp(unsigned int*);




















































































































































































































































































































































































#line 1667 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
























#line 1692 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


}
#line 1696 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1697 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1698 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"

#line 988 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

  
  
  

namespace std {
 
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty> >
	class unique_ptr;
 #line 1002 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	namespace tr1 {	
	
class bad_weak_ptr
	: public exception
	{	
public:
	explicit bad_weak_ptr(const char * = 0)
		{	
		}

	virtual const char * what() const throw()
		{	
		return ("tr1::bad_weak_ptr");
		}
	};

	
class _Ref_count_base
	{	
private:
	virtual void _Destroy() = 0;
	virtual void _Delete_this() = 0;

	long _Uses;
	long _Weaks;

protected:
	_Ref_count_base()
		: _Uses(1), _Weaks(1)
		{	
		}

public:
	virtual ~_Ref_count_base()
		{	
		}

	bool _Incref_nz()
		{	
		for (; ; )
			{	
			long _Count = (volatile long&)_Uses;
			if (_Count == 0)
				return (false);
			if (_InterlockedCompareExchange(&_Uses, _Count + 1, _Count) == _Count)
				return (true);
			}
		}

	void _Incref()
		{	
		_InterlockedIncrement(&_Uses);
		}

	void _Incwref()
		{	
		_InterlockedIncrement(&_Weaks);
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(&_Uses) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(&_Weaks) == 0)
			_Delete_this();
		}

	long _Use_count() const
		{	
		return (_Uses);
		}

	bool _Expired() const
		{	
		return (_Uses == 0);
		}

	virtual void *_Get_deleter(const  type_info&) const
		{	
		return (0);
		}
	};

	
template<class _Ty>
	class _Ref_count
	: public _Ref_count_base
	{	
public:
	_Ref_count(_Ty *_Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy()
		{	
		delete _Ptr;
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

template<class _Ty,
	class _Dx>
	class _Ref_count_del
	: public _Ref_count_base
	{	
public:
	_Ref_count_del(_Ty *_Px, _Dx _Dt)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Type) const
		{	
		return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	};

template<class _Ty,
	class _Dx,
	class _Alloc>
	class _Ref_count_del_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Type) const
		{	
		return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		_Al.deallocate(this, 1);
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	_Myalty _Myal;	
	};

	
template<class _Ty>
	class weak_ptr;
template<class _Ty>
	class shared_ptr;
template<class _Ty>
	class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
	class _Ty2>
	void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
		_Ref_count_base *);

template<class _Ty>
	inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
		typename _Ty::_EStype * = 0)
	{	
	if (_Ptr)
		_Do_enable(_Ptr,
			(enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
	}

inline void _Enable_shared(const volatile void *, const volatile void *)
	{	
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	typedef _Ptr_base<_Ty> _Myt;
	typedef _Ty _Elem;
	typedef _Elem element_type;

	_Ptr_base()
		: _Ptr(0), _Rep(0)
		{	
		}

	_Ptr_base(_Myt&& _Right)
		: _Ptr(0), _Rep(0)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	template<class _Ty2>
		_Ptr_base(_Ptr_base<_Ty2>&& _Right)
		: _Ptr(_Right._Ptr), _Rep(_Right._Rep)
		{	
		_Right._Ptr = 0;
		_Right._Rep = 0;
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			_Swap(_Right);
		}

	long use_count() const
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	void _Swap(_Ptr_base& _Right)
		{	
		::std:: swap(_Rep, _Right._Rep);
		::std:: swap(_Ptr, _Right._Ptr);
		}

	template<class _Ty2>
		bool owner_before(const _Ptr_base<_Ty2>& _Right) const
		{	
		return (_Rep < _Right._Rep);
		}

	void *_Get_deleter(const  type_info& _Type) const
		{	
		return (_Rep ? _Rep->_Get_deleter(_Type) : 0);
		}

	_Ty *_Get() const
		{	
		return (_Ptr);
		}

	bool _Expired() const
		{	
		return (!_Rep || _Rep->_Expired());
		}

	void _Decref()
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		}

	void _Reset()
		{	
		_Reset(0, 0);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Other._Ptr, _Other._Rep, false);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
		{	
		_Reset(_Other._Ptr, _Other._Rep, _Throw);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
		{	
		_Reset(static_cast<_Elem *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
		{	
		_Reset(const_cast<_Elem *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
		{	
		_Elem *_Ptr = dynamic_cast<_Elem *>(_Other._Ptr);
		if (_Ptr)
			_Reset(_Ptr, _Other._Rep);
		else
			_Reset();
		}

	template<class _Ty2>
		void _Reset(auto_ptr<_Ty2>& _Other)
		{	
		_Ty2 *_Px = _Other.get();
		_Reset0(_Px, new _Ref_count<_Elem>(_Px));
		_Other.release();
		_Enable_shared(_Px, _Rep);
		}

 
	template<class _Ty2>
		void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Ptr, _Other._Rep);
		}
 #line 1348 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incref();
		_Reset0(_Other_ptr, _Other_rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
		{	
			
			
		if (_Other_rep && _Other_rep->_Incref_nz())
			_Reset0(_Other_ptr, _Other_rep);
		else if (_Throw)
			throw bad_weak_ptr(0);
		}

	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

	void _Decwref()
		{	
		if (_Rep != 0)
			_Rep->_Decwref();
		}

	void _Resetw()
		{	
		_Resetw((_Elem *)0, 0);
		}

	template<class _Ty2>
		void _Resetw(const _Ptr_base<_Ty2>& _Other)
		{	
		_Resetw(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		_Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
		}

	template<class _Ty2>
		void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incwref();
		if (_Rep != 0)
			_Rep->_Decwref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

private:
	_Ty *_Ptr;
	_Ref_count_base *_Rep;
	template<class _Ty0>
		friend class _Ptr_base;
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	typedef shared_ptr<_Ty> _Myt;
	typedef _Ptr_base<_Ty> _Mybase;

	shared_ptr()
		{	
		}

	template<class _Ux>
		explicit shared_ptr(_Ux *_Px)
		{	
		_Resetp(_Px);
		}

	template<class _Ux,
		class _Dx>
		shared_ptr(_Ux *_Px, _Dx _Dt)
		{	
		_Resetp(_Px, _Dt);
		}



 

	shared_ptr(::std:: nullptr_t)
		{	
		_Resetp((_Ty *)0);
		}

	template<class _Dx>
		shared_ptr(::std:: nullptr_t, _Dx _Dt)
		{	
		_Resetp((_Ty *)0, _Dt);
		}

	template<class _Dx,
		class _Alloc>
		shared_ptr(::std:: nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp((_Ty *)0, _Dt, _Ax);
		}
 #line 1464 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	template<class _Ux,
		class _Dx,
		class _Alloc>
		shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp(_Px, _Dt, _Ax);
		}


 
	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px)
		{	
		this->_Reset(_Px, _Right);
		}
 #line 1481 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	shared_ptr(const _Myt& _Other)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
			bool _Throw = true)
		{	
		this->_Reset(_Other, _Throw);
		}

	template<class _Ty2>
		shared_ptr(auto_ptr<_Ty2>& _Other)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	shared_ptr(_Myt&& _Right)
		: _Mybase(::std:: forward<_Myt>(_Right))
		{	
		}

	template<class _Ty2>
		shared_ptr(shared_ptr<_Ty2>&& _Right,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		: _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
		{	
		}

 
	template<class _Ux,
		class _Dx>
		shared_ptr(::std:: unique_ptr<_Ux, _Dx>&& _Right)
		{	
		_Resetp(_Right.release(), _Right.get_deleter());
		}

	template<class _Ux,
		class _Dx>
		_Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}
 #line 1555 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_Myt& operator=(_Myt&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(shared_ptr<_Ty2>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		_Mybase::swap(::std:: move(_Right));
		}

	~shared_ptr()
		{	
		this->_Decref();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(const shared_ptr<_Ty2>& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(auto_ptr<_Ty2>& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	void reset()
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux *_Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux *_Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}


	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}


	void swap(_Myt& _Other)
		{	
		this->_Swap(_Other);
		}

	_Ty *get() const
		{	
		return (this->_Get());
		}

	typename tr1::add_reference<_Ty>::type operator*() const
		{	
		return (*this->_Get());
		}

	_Ty *operator->() const
		{	
		return (this->_Get());
		}

	bool unique() const
		{	
		return (this->use_count() == 1);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Get() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

private:
	template<class _Ux>
		void _Resetp(_Ux *_Px)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _Ux,
		class _Dx>
		void _Resetp(_Ux *_Px, _Dx _Dt)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}


	template<class _Ux,
		class _Dx,
		class _Alloc>
		void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
		typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

		try {	
		_Refd *_Ptr = _Al.allocate(1);
		new (_Ptr) _Refd(_Px, _Dt, _Al);
		_Resetp0(_Px, _Ptr);
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}


public:
	template<class _Ux>
		void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
		{	
		this->_Reset0(_Px, _Rx);
		_Enable_shared(_Px, _Rx);
		}
	};

template<class _Ty1,
	class _Ty2>
	bool operator==(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S1.get() == _S2.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator!=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S1 == _S2));
	}

template<class _Ty1,
	class _Ty2>
	bool operator<(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S1.get() < _S2.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator>=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S1 < _S2));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S2 < _S1);
	}

template<class _Ty1,
	class _Ty2>
	bool operator<=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S2 < _S1));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>&
	operator<<(basic_ostream<_Elem, _Traits>& _Out,
		const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>&& _Left,
		shared_ptr<_Ty>& _Right)
	{	
	_Right.swap(_Left);
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Static_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Const_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
	}

template<class _Dx,
	class _Ty>
	_Dx *get_deleter(const shared_ptr<_Ty>& _Sx)
	{	
	return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
	}

 

	
template<class _Ty>
	class _Ref_count_obj
	: public _Ref_count_base
	{	
public:
 
 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(    )
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(    );
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0    >
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0    )
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0)    );
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 ,   class _Arg1>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1 , class _Arg2>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 #line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
		}
 #line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1828 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	typename aligned_storage<sizeof(_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 
 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al      )
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(    );
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0    >
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0    )
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0)    );
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 ,   class _Arg1>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 ,   _Arg1 && _Ax1)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1 , class _Arg2>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
		}
 #line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1863 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		_Al.deallocate(this, 1);
		}

	typename aligned_storage<sizeof (_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	_Myalty _Myal;	
	};

 
 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty      > inline
	shared_ptr<_Ty> make_shared(    )
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(    );

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc      > inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg      )
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg      );
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0    > inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0    )
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0)    );

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0    > inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0    )
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0)    );
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 ,   class _Arg1> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 ,   class _Arg1> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1 , class _Arg2> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1 , class _Arg2> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

 #line 1894 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
	typedef typename _Ptr_base<_Ty>::_Elem _Elem;

public:
	weak_ptr()
		{	
		}

	template<class _Ty2>
		weak_ptr(const shared_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Resetw(_Other);
		}

	weak_ptr(const weak_ptr& _Other)
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2>
		weak_ptr(const weak_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Resetw(_Other);
		}

	~weak_ptr()
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(shared_ptr<_Ty2>& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	void reset()
		{	
		this->_Resetw();
		}

	void swap(weak_ptr& _Other)
		{	
		this->_Swap(_Other);
		}

	bool expired() const
		{	
		return (this->_Expired());
		}

	shared_ptr<_Ty> lock() const
		{	
		return (shared_ptr<_Elem>(*this, false));
		}
	};









template<class _Ty>
	void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2)
	{	
	_W1.swap(_W2);
	}

	
template<class _Ty> class enable_shared_from_this
	{	
public:
	typedef _Ty _EStype;

	shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

protected:
	enable_shared_from_this()
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&)
		{	
		}

	enable_shared_from_this& operator=(const enable_shared_from_this&)
		{	
		return (*this);
		}

	~enable_shared_from_this()
		{	
		}

private:
	template<class _Ty1,
		class _Ty2>
		friend void _Do_enable(
			_Ty1 *,
			enable_shared_from_this<_Ty2>*,
			_Ref_count_base *);

	mutable weak_ptr<_Ty> _Wptr;
	};

template<class _Ty1,
	class _Ty2>
	inline void _Do_enable(
		_Ty1 *_Ptr,
		enable_shared_from_this<_Ty2> *_Es,
		_Ref_count_base *_Refptr)
	{	
	_Es->_Wptr._Resetw(_Ptr, _Refptr);
	}
	}	
}
 #line 2045 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 
namespace std {
	

	
template<class _Ty>
	struct default_delete
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete()
		{	
		}

	template<class _Ty2>
		default_delete(const default_delete<_Ty2>&)
		{	
		}

	void operator()(_Ty *_Ptr) const
		{	
		if (0 < sizeof (_Ty))	
			delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete()
		{	
		}

	void operator()(_Ty *_Ptr) const
		{	
		if (0 < sizeof (_Ty))	
			delete[] _Ptr;
		}

	template<class _Other>
		void operator()(_Other *) const;	
	};

	
::std:: tr1::_No _Has_pointer_type(...);

template<class _Ty>
	::std:: tr1::_Yes _Has_pointer_type(_Ty *,
		typename _Ty::pointer * = 0);

template<class _Ty,
	class _Dx,
	bool>
	struct _Hold_pointer_type
	{	
	typedef _Ty *pointer;
	};

template<class _Ty,
	class _Dx>
	struct _Hold_pointer_type<_Ty, _Dx, true>
	{	
	typedef typename _Dx::pointer pointer;
	};

 



	
template<class _Ty,
	class _Dx,
	bool _Empty_deleter>
	class _Unique_ptr_base
	{	
public:
	typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	_Dx_noref& get_deleter()
		{	
		return (_Mydel);
		}

	const _Dx_noref& get_deleter() const
		{	
		return (_Mydel);
		}

	pointer _Myptr;	
	_Dx _Mydel;		
	};

template<class _Ty,
	class _Dx>
	class _Unique_ptr_base<_Ty, _Dx, true>
		: public _Dx
	{	
public:
	typedef _Dx _Mybase;
	typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt)
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	_Dx_noref& get_deleter()
		{	
		return (*this);
		}

	const _Dx_noref& get_deleter() const
		{	
		return (*this);
		}

	pointer _Myptr;	
	};

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: public _Unique_ptr_base<_Ty, _Dx,
			tr1::is_empty<_Dx>::value
				|| tr1::is_same<default_delete<_Ty>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty, _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		tr1::is_empty<_Dx>::value
			|| tr1::is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	unique_ptr()
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

 
	unique_ptr(::std:: nullptr_t)
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(::std:: nullptr_t)
		{	
		reset();
		return (*this);
		}
 #line 2227 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	explicit unique_ptr(pointer _Ptr)
		: _Mybase(_Ptr, _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<tr1::is_reference<_Dx>::value, _Dx,
			const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
		: _Mybase(_Ptr, _Dt)
		{	
		}

	unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	


		}

	unique_ptr(unique_ptr&& _Right)
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right)
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right)
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: move(_Right.get_deleter());
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->_Myptr, _Right._Myptr);
			_Swap_adl(this->get_deleter(),
				_Right.get_deleter());
			}
		}

	void swap(_Myt& _Right)
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(),
			_Right.get_deleter());
		}

	~unique_ptr()
		{	
		_Delete();
		}

	typename tr1::add_reference<_Ty>::type operator*() const
		{	
		return (*this->_Myptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	pointer get() const
		{	
		return (this->_Myptr);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Myptr != pointer() ? (&::std:: _Bool_struct::_Member) : 0);
		}

	pointer release()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer())
		{	
		if (_Ptr != this->_Myptr)
			{	
			_Delete();
			this->_Myptr = _Ptr;
			}
		}

private:
	void _Delete()
		{	
		if (this->_Myptr != pointer())
			this->get_deleter()(this->_Myptr);
		}

	unique_ptr(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		unique_ptr(const unique_ptr<_Ty2, _Dx2>&);	

	_Myt& operator=(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);	
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: public _Unique_ptr_base<_Ty, _Dx,
			tr1::is_empty<_Dx>::value
				|| tr1::is_same<default_delete<_Ty[]>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty[], _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		tr1::is_empty<_Dx>::value
			|| tr1::is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	unique_ptr()
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	explicit unique_ptr(pointer _Ptr)
		: _Mybase(_Ptr, _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<tr1::is_reference<_Dx>::value, _Dx,
			const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
		: _Mybase(_Ptr, _Dt)
		{	
		}

public:
	unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	


		}

	unique_ptr(unique_ptr&& _Right)
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

private:
	template<class _Ty2,
		class _Dx2>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right);	

	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right);	

public:
	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->_Myptr, _Right._Myptr);
			_Swap_adl(this->get_deleter(),
				_Right.get_deleter());
			}
		}

 
	unique_ptr(::std:: nullptr_t)
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(::std:: nullptr_t)
		{	
		reset();
		return (*this);
		}

	void reset(::std:: nullptr_t)
		{	
		if (this->_Myptr != 0)
			{	
			_Delete();
			this->_Myptr = 0;
			}
		}
 #line 2464 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	void swap(_Myt& _Right)
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr()
		{	
		_Delete();
		}

	typename tr1::add_reference<_Ty>::type operator[](size_t _Idx) const
		{	
		return (this->_Myptr[_Idx]);
		}

	pointer get() const
		{	
		return (this->_Myptr);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Myptr != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	pointer release()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer())
		{	
		if (_Ptr != this->_Myptr)
			{	
			_Delete();
			this->_Myptr = _Ptr;
			}
		}

private:
	template<class _Ptr2>
		explicit unique_ptr(_Ptr2);	

	template<class _Ptr2,
		class _Dx2>
		unique_ptr(_Ptr2, _Dx2);	

	unique_ptr(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		unique_ptr(const unique_ptr<_Ty2, _Dx2>&);	

	_Myt& operator=(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);	

	template<class _Ptr2>
		void reset(_Ptr2);	

	void _Delete()
		{	
		this->get_deleter()(this->_Myptr);
		}
	};

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>&& _Left,
		unique_ptr<_Ty, _Dx>& _Right)
	{	
	_Right.swap(_Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() < _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

		
	namespace pointer_safety {
enum pointer_safety {	
	relaxed,
	preferred,
	strict
	};
	}	

typedef pointer_safety::pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty *undeclare_reachable(_Ty *_Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline _Pointer_safety get_pointer_safety()
	{	
	return (pointer_safety::relaxed);
	}

 
using tr1::allocate_shared;
using tr1::bad_weak_ptr;
using tr1::const_pointer_cast;
using tr1::dynamic_pointer_cast;
using tr1::enable_shared_from_this;
using tr1::get_deleter;
using tr1::make_shared;
using tr1::shared_ptr;
using tr1::static_pointer_cast;
using tr1::swap;
using tr1::weak_ptr;
 #line 2665 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _Ty>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty> >
		: public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
	{	
	bool operator()(const shared_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty> >
		: public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
	{	
	bool operator()(const weak_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};
}
 #line 2717 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 2724 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
#line 2725 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\memory"























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
  #pragma warning(disable: 4251)

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Ax = allocator<_Elem> >
	class basic_string;

  
  
  

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class _String_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Alloc::value_type,
			typename _Alloc::difference_type,
			typename _Alloc::const_pointer,
			typename _Alloc::const_reference,
			_Iterator_base>
	{	
public:
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Myiter;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Alloc::value_type value_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef typename _Alloc::const_pointer pointer;
	typedef typename _Alloc::const_reference reference;

	_String_const_iterator()
		{	
		this->_Ptr = 0;
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		{	
		this->_Adopt(_Pstring);
		this->_Ptr = _Parg;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
 










#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"





#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		;

		return (*this->_Ptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
 









#line 113 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"




#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		++this->_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 








#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"



#line 146 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		--this->_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 










#line 172 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"





#line 178 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 










#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"






#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	pointer _Ptr;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	typename _String_const_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
		_Unchecked(_String_const_iterator<_Elem, _Traits, _Alloc> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_const_iterator<_Elem, _Traits, _Alloc>
		_Rechecked(_String_const_iterator<_Elem, _Traits, _Alloc>& _Iter,
			typename _String_const_iterator<_Elem, _Traits, _Alloc>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_const_iterator<_Elem, _Traits, _Alloc> operator+(
		typename _String_const_iterator<_Elem, _Traits, _Alloc>
			::difference_type _Off,
		_String_const_iterator<_Elem, _Traits, _Alloc> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class _String_iterator
		: public _String_const_iterator<_Elem, _Traits, _Alloc>
	{	
public:
	typedef _String_iterator<_Elem, _Traits, _Alloc> _Myiter;
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Mybase;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::pointer pointer;
	typedef typename _Mystr::reference reference;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return ((_Mybase)*this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	typename _String_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
		_Unchecked(_String_iterator<_Elem, _Traits, _Alloc> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_iterator<_Elem, _Traits, _Alloc>
		_Rechecked(_String_iterator<_Elem, _Traits, _Alloc>& _Iter,
			typename _String_iterator<_Elem, _Traits, _Alloc>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_iterator<_Elem, _Traits, _Alloc> operator+(
		typename _String_iterator<_Elem, _Traits, _Alloc>
			::difference_type _Off,
		_String_iterator<_Elem, _Traits, _Alloc> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Elem,
	class _Alloc>
	class _String_val
		: public _Container_base
	{	
public:
 
	typedef typename _Alloc::template rebind<_Elem>::other _Alty;

	_String_val(_Alty _Al = _Alty())
		: _Alval(_Al)
		{	
		}

	~_String_val()
		{	
		}

 





















#line 484 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	typedef typename _Alty::size_type size_type;
	typedef typename _Alty::difference_type difference_type;
	typedef typename _Alty::pointer pointer;
	typedef typename _Alty::const_pointer const_pointer;
	typedef typename _Alty::reference reference;
	typedef typename _Alty::const_reference const_reference;
	typedef typename _Alty::value_type value_type;

	enum
		{	
		_BUF_SIZE = 16 / sizeof (_Elem) < 1 ? 1
			: 16 / sizeof (_Elem)};
	enum
		{	
		_ALLOC_MASK = sizeof (_Elem) <= 1 ? 15
			: sizeof (_Elem) <= 2 ? 7
			: sizeof (_Elem) <= 4 ? 3
			: sizeof (_Elem) <= 8 ? 1 : 0};

	union _Bxty
		{	
		_Elem _Buf[_BUF_SIZE];
		_Elem *_Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	_Alty _Alval;	
	};

		
template<class _Elem,
	class _Traits,
	class _Ax>
	class basic_string
		: public _String_val<_Elem, _Ax>
	{	
public:
	typedef basic_string<_Elem, _Traits, _Ax> _Myt;
	typedef _String_val<_Elem, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _Alloc;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef typename _Alloc::pointer pointer;
	typedef typename _Alloc::const_pointer const_pointer;
	typedef typename _Alloc::reference reference;
	typedef typename _Alloc::const_reference const_reference;
	typedef typename _Alloc::value_type value_type;

	typedef _String_iterator<_Elem, _Traits, _Alloc> iterator;
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	basic_string(const _Myt& _Right)
		: _Mybase(_Right._Alval)
		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string()
		: _Mybase()
		{	
		_Tidy();
		}

	explicit basic_string(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		}

	basic_string(const _Myt& _Right, size_type _Roff,
		size_type _Count = npos)
		: _Mybase(_Right._Alval)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(size_type _Count, _Elem _Ch)
		: _Mybase()
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	template<class _It>
		basic_string(_It _First, _It _Last)
		: _Mybase()
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		basic_string(_It _First, _It _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		void _Construct(_It _Count,
			_It _Ch, _Int_iterator_tag)
		{	
		assign((size_type)_Count, (_Elem)_Ch);
		}

	template<class _It>
		void _Construct(_It _First,
			_It _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	template<class _It>
		void _Construct(_It _First,
			_It _Last, forward_iterator_tag)
		{	
		;
		size_type _Count = 0;
		_Distance(_First, _Last, _Count);
		reserve(_Count);

		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	basic_string(const_pointer _First, const_pointer _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_pointer _First, const_pointer _Last,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_iterator _First, const_iterator _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(_Myt&& _Right)
		: _Mybase(::std:: forward<_Alloc>(_Right._Alval))
		{	
		_Tidy();
		assign(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		return (assign(::std:: forward<_Myt>(_Right)));
		}

	_Myt& assign(_Myt&& _Right)
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator()
			&& this->_BUF_SIZE <= _Right._Myres)
			*this = _Right;
		else
			{	
			_Tidy(true);
			if (_Right._Myres < this->_BUF_SIZE)
				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
					_Right._Mysize + 1);
			else
				{	
				this->_Bx._Ptr = _Right._Bx._Ptr;
				_Right._Bx._Ptr = 0;
				}
			this->_Mysize = _Right._Mysize;
			this->_Myres = _Right._Myres;

			_Right._Mysize = 0;
			_Right._Myres = 0;
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
 


#line 747 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

			assign(::std:: forward<_Myt>(_Right));
			}
		}

	~basic_string()
		{	
		_Tidy(true);
		}

	typedef _Traits traits_type;
	typedef _Alloc allocator_type;

	 static const size_type npos;	

	_Myt& operator=(const _Myt& _Right)
		{	
		return (assign(_Right));
		}

	_Myt& operator=(const _Elem *_Ptr)
		{	
		return (assign(_Ptr));
		}

	_Myt& operator=(_Elem _Ch)
		{	
		return (assign(1, _Ch));
		}

	_Myt& operator+=(const _Myt& _Right)
		{	
		return (append(_Right));
		}

	_Myt& operator+=(const _Elem *_Ptr)
		{	
		return (append(_Ptr));
		}

	_Myt& operator+=(_Elem _Ch)
		{	
		return (append((size_type)1, _Ch));
		}

	_Myt& append(const _Myt& _Right)
		{	
		return (append(_Right, 0, npos));
		}

	_Myt& append(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(_Myptr() + this->_Mysize,
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 823 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (append(*this, _Ptr - _Myptr(), _Count));	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr)
		{	
		;
		return (append(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& append(size_type _Count, _Elem _Ch)
		{	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Chassign(this->_Mysize, _Count, _Ch);
			_Eos(_Num);
			}
		return (*this);
		}

	template<class _It>
		_Myt& append(_It _First, _It _Last)
		{	
		return (_Append(_First, _Last, _Iter_cat(_First)));
		}

	template<class _It>
		_Myt& _Append(_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (append((size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Append(_It _First, _It _Last, input_iterator_tag)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_pointer _First, const_pointer _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_iterator _First, const_iterator _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& assign(const _Myt& _Right)
		{	
		return (assign(_Right, 0, npos));
		}

	_Myt& assign(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Count < _Num)
			_Num = _Count;	

		if (this == &_Right)
			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	
		else if (_Grow(_Num))
			{	
			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (assign(*this, _Ptr - _Myptr(), _Count));	

		if (_Grow(_Count))
			{	
			_Traits::copy(_Myptr(), _Ptr, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr)
		{	
		;
		return (assign(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& assign(size_type _Count, _Elem _Ch)
		{	
		if (_Count == npos)
			_Xlen();	

		if (_Grow(_Count))
			{	
			_Chassign(0, _Count, _Ch);
			_Eos(_Count);
			}
		return (*this);
		}

	template<class _It>
		_Myt& assign(_It _First, _It _Last)
		{	
		return (_Assign(_First, _Last, _Iter_cat(_First)));
		}

	template<class _It>
		_Myt& _Assign(_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (assign((size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Assign(_It _First, _It _Last, input_iterator_tag)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_pointer _First, const_pointer _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_iterator _First, const_iterator _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& insert(size_type _Off, const _Myt& _Right)
		{	
		return (insert(_Off, _Right, 0, npos));
		}

	_Myt& insert(size_type _Off,
		const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			if (this == &_Right)
				_Traits::move(_Myptr() + _Off,
					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
						_Count);	
			else
				_Traits::copy(_Myptr() + _Off,
					_Right._Myptr() + _Roff, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off,
		const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1014 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (insert(_Off, *this,
				_Ptr - _Myptr(), _Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off, const _Elem *_Ptr)
		{	
		;
		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& insert(size_type _Off,
		size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	iterator insert(const_iterator _Where)
		{	
		return (insert(_Where, _Elem()));
		}

	iterator insert(const_iterator _Where, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, 1, _Ch);
		return (begin() + _Off);
		}

	void insert(const_iterator _Where, size_type _Count, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, _Count, _Ch);
		}

	template<class _It>
		void insert(const_iterator _Where, _It _First, _It _Last)
		{	
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		void _Insert(const_iterator _Where, _It _Count, _It _Ch,
			_Int_iterator_tag)
		{	
		insert(_Where, (size_type)_Count, (_Elem)_Ch);
		}

	template<class _It>
		void _Insert(const_iterator _Where, _It _First, _It _Last,
			input_iterator_tag)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	void insert(const_iterator _Where,
		const_pointer _First, const_pointer _Last)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	void insert(const_iterator _Where,
		const_iterator _First, const_iterator _Last)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	_Myt& erase(size_type _Off = 0,
		size_type _Count = npos)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;	
		if (0 < _Count)
			{	
			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
				this->_Mysize - _Off - _Count);
			size_type _Newsize = this->_Mysize - _Count;
			_Eos(_Newsize);
			}
		return (*this);
		}

	iterator erase(const_iterator _Where)
		{	
		size_type _Count = _Pdif(_Where, begin());
		erase(_Count, 1);
		return (iterator(_Myptr() + _Count, this));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		size_type _Count = _Pdif(_First, begin());
		erase(_Count, _Pdif(_Last, _First));
		return (iterator(_Myptr() + _Count, this));
		}

	void clear()
		{	
		_Eos(0);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
		{	
		return (replace(_Off, _N0, _Right, 0, npos));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	

		size_type _Nm = this->_Mysize - _N0 - _Off;	
		size_type _Newsize = this->_Mysize + _Count - _N0;
		if (this->_Mysize < _Newsize)
			_Grow(_Newsize);

		if (this != &_Right)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (_Count <= _N0)
			{	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _Count);	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			}
		else if (_Roff <= _Off)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _Count);	
			}
		else if (_Off + _N0 <= _Roff)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + (_Roff + _Count - _N0), _Count);	
			}
		else
			{	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _N0);	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off + _N0, _Myptr() + _Roff + _Count,
				_Count - _N0);	
			}

		_Eos(_Newsize);
		return (*this);
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1215 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (replace(_Off, _N0, *this,
				_Ptr - _Myptr(), _Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(_Myptr() + _Off + _Count,
					_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
		{	
		;
		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(_Myptr() + _Off + _Count,
					_Myptr() + _Off + _N0, _Nm);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Myt& _Right)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr, size_type _Count)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		size_type _Count, _Elem _Ch)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
		}

	template<class _It>
		_Myt& replace(const_iterator _First, const_iterator _Last,
			_It _First2, _It _Last2)
		{	
		return (_Replace(_First, _Last,
			_First2, _Last2, _Iter_cat(_First2)));
		}

	template<class _It>
		_Myt& _Replace(const_iterator _First, const_iterator _Last,
			_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (replace(_First, _Last, (size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Replace(const_iterator _First, const_iterator _Last,
			_It _First2, _It _Last2, input_iterator_tag)
		{	
		_Myt _Right(_First2, _Last2);
		replace(_First, _Last, _Right);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_pointer _First2, const_pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_iterator _First2, const_iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	iterator begin()
		{	
		return (iterator(_Myptr(), this));
		}

	const_iterator begin() const
		{	
		return (const_iterator(_Myptr(), this));
		}

	iterator end()
		{	
		return (iterator(_Myptr() + this->_Mysize, this));
		}

	const_iterator end() const
		{	
		return (const_iterator(_Myptr() + this->_Mysize, this));
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

 
	const_iterator cbegin() const
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if (size() < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}
 #line 1420 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	reference at(size_type _Off)
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (_Myptr()[_Off]);
		}

	const_reference at(size_type _Off) const
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (_Myptr()[_Off]);
		}

	reference operator[](size_type _Off)
		{	
 





#line 1444 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#line 1446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		return (_Myptr()[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
 



#line 1457 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#line 1459 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		return (_Myptr()[_Off]);
		}

	void push_back(_Elem _Ch)
		{	
		insert(end(), _Ch);
		}

 
	void pop_back()
		{	
		erase(this->_Mysize - 1);	
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}
 #line 1494 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	const _Elem *c_str() const
		{	
		return (_Myptr());
		}

	const _Elem *data() const
		{	
		return (c_str());
		}

	size_type length() const
		{	
		return (this->_Mysize);
		}

	size_type size() const
		{	
		return (this->_Mysize);
		}

	size_type max_size() const
		{	
		size_type _Num = this->_Alval.max_size();
		return (_Num <= 1 ? 1 : _Num - 1);
		}

	void resize(size_type _Newsize)
		{	
		resize(_Newsize, _Elem());
		}

	void resize(size_type _Newsize, _Elem _Ch)
		{	
		if (_Newsize <= this->_Mysize)
			erase(_Newsize);
		else
			append(_Newsize - this->_Mysize, _Ch);
		}

	size_type capacity() const
		{	
		return (this->_Myres);
		}

	void reserve(size_type _Newcap = 0)
		{	
		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
			{	
			size_type _Size = this->_Mysize;
			if (_Grow(_Newcap, true))
				_Eos(_Size);
			}
		}

	bool empty() const
		{	
		return (this->_Mysize == 0);
		}

	

	size_type copy(_Elem *_Ptr,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1563 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::copy(_Ptr, _Myptr() + _Off, _Count);
		return (_Count);
		}

	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1579 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::_Copy_s(_Dest, _Dest_size, _Myptr() + _Off, _Count);
		return (_Count);
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Alval == _Right._Alval)
			{	
 

#line 1597 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

			::std:: swap(this->_Bx, _Right._Bx);
			::std:: swap(this->_Mysize, _Right._Mysize);
			::std:: swap(this->_Myres, _Right._Myres);
			}
		else
			{	
			_Myt _Tmp = *this;

			*this = _Right;
			_Right = _Tmp;
			}
		}

	size_type find(const _Myt& _Right, size_type _Off = 0) const
		{	
		return (find(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1623 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Count == 0 && _Off <= this->_Mysize)
			return (_Off);	

		size_type _Nm;
		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
			{	
			const _Elem *_Uptr, *_Vptr;
			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;
				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - _Myptr());	
			}

		return (npos);	
		}

	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type rfind(const _Myt& _Right, size_type _Off = npos) const
		{	
		return (rfind(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type rfind(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1664 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Count == 0)
			return (_Off < this->_Mysize ? _Off
				: this->_Mysize);	
		if (_Count <= this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr() +
				(_Off < this->_Mysize - _Count ? _Off
					: this->_Mysize - _Count);
			for (; ; --_Uptr)
				if (_Traits::eq(*_Uptr, *_Ptr)
					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - _Myptr());	
				else if (_Uptr == _Myptr())
					break;	
			}

		return (npos);	
		}

	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
		{	
		;
		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type rfind(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_of(const _Myt& _Right,
		size_type _Off = 0) const
		{	
		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1708 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < _Count && _Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = _Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - _Myptr());	
			}

		return (npos);	
		}

	size_type find_first_of(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_of(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_of(const _Myt& _Right,
		size_type _Off = npos) const
		{	
		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1744 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < _Count && 0 < this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - _Myptr());	
				else if (_Uptr == _Myptr())
					break;	
			}

		return (npos);	
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_of(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_not_of(const _Myt& _Right,
		size_type _Off = 0) const
		{	
		return (find_first_not_of(_Right._Myptr(), _Off,
			_Right.size()));
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1785 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = _Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - _Myptr());
			}
		return (npos);
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_not_of(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_not_of(const _Myt& _Right,
		size_type _Off = npos) const
		{	
		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - _Myptr());
				else if (_Uptr == _Myptr())
					break;
			}
		return (npos);
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_not_of(_Elem _Ch, size_type _Off = npos) const
		{	
		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
		{	
		return (_Myt(*this, _Off, _Count, get_allocator()));
		}

	int compare(const _Myt& _Right) const
		{	
		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
		}

	int compare(size_type _Off, size_type _N0,
		const _Myt& _Right) const
		{	
		return (compare(_Off, _N0, _Right, 0, npos));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right,
		size_type _Roff, size_type _Count) const
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		if (_Right._Mysize - _Roff < _Count)
			_Count = _Right._Mysize - _Roff;	
		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
		}

	int compare(const _Elem *_Ptr) const
		{	
		;
		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
		{	
		;
		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count) const
		{	
 


#line 1893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	

		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
			_N0 < _Count ? _N0 : _Count);
		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
			: _N0 == _Count ? 0 : +1);
		}

	allocator_type get_allocator() const
		{	
		return (this->_Alval);
		}

	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
		{	
		if (_Count == 1)
			_Traits::assign(*(_Myptr() + _Off), _Ch);
		else
			_Traits::assign(_Myptr() + _Off, _Count, _Ch);
		}

	void _Copy(size_type _Newsize, size_type _Oldlen)
		{	
		size_type _Newres = _Newsize | this->_ALLOC_MASK;
		if (max_size() < _Newres)
			_Newres = _Newsize;	
		else if (this->_Myres / 2 <= _Newres / 3)
			;
		else if (this->_Myres <= max_size() - this->_Myres / 2)
			_Newres = this->_Myres
				+ this->_Myres / 2;	
		else
			_Newres = max_size();	

		_Elem *_Ptr;
		try {
			_Ptr = this->_Alval.allocate(_Newres + 1);
		} catch (...) {
			_Newres = _Newsize;	
			try {
				_Ptr = this->_Alval.allocate(_Newres + 1);
			} catch (...) {
			_Tidy(true);	
			throw;
			}
		}

		if (0 < _Oldlen)
			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	
		_Tidy(true);
		this->_Bx._Ptr = _Ptr;
		this->_Myres = _Newres;
		_Eos(_Oldlen);
		}

	void _Eos(size_type _Newsize)
		{	
		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());
		}

	bool _Grow(size_type _Newsize,
		bool _Trim = false)
		{	
		if (max_size() < _Newsize)
			_Xlen();	
		if (this->_Myres < _Newsize)
			_Copy(_Newsize, this->_Mysize);	
		else if (_Trim && _Newsize < this->_BUF_SIZE)
			_Tidy(true,	
				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
		else if (_Newsize == 0)
			_Eos(0);	
		return (0 < _Newsize);	
		}

	bool _Inside(const _Elem *_Ptr)
		{	
		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)
			return (false);	
		else
			return (true);
		}

	static size_type _Pdif(const_iterator _P2,
		const_iterator _P1)
		{	
		return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
		}

	void _Tidy(bool _Built = false,
		size_type _Newsize = 0)
		{	
		if (!_Built)
			;
		else if (this->_BUF_SIZE <= this->_Myres)
			{	
			_Elem *_Ptr = this->_Bx._Ptr;
			if (0 < _Newsize)
				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);
			this->_Alval.deallocate(_Ptr, this->_Myres + 1);
			}
		this->_Myres = this->_BUF_SIZE - 1;
		_Eos(_Newsize);
		}

	_Elem *_Myptr()
		{	
		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
			: this->_Bx._Buf);
		}

	const _Elem *_Myptr() const
		{	
		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
			: this->_Bx._Buf);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("string too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid string position");
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	 const typename basic_string<_Elem, _Traits, _Alloc>::size_type
		basic_string<_Elem, _Traits, _Alloc>::npos =
			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);

		

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Right.swap(_Left);
	}

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
	wstring;

 
typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
	u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
	u32string;
 #line 2073 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 2079 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
#line 2080 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"






#line 8 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4100 4180 4244)

 



namespace std {
		
template<class _Ty>
	struct plus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty>
	struct minus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty>
	struct multiplies
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty>
	struct divides
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left / _Right);
		}
	};

		
template<class _Ty>
	struct modulus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left % _Right);
		}
	};

		
template<class _Ty>
	struct negate
		: public unary_function<_Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left) const
		{	
		return (-_Left);
		}
	};

		
template<class _Ty>
	struct equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty>
	struct not_equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty>
	struct greater
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		
template<class _Ty>
	struct less
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<class _Ty>
	struct greater_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty>
	struct less_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<class _Ty>
	struct logical_and
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left && _Right);
		}
	};

		
template<class _Ty>
	struct logical_or
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left || _Right);
		}
	};

		
template<class _Ty>
	struct logical_not
		: public unary_function<_Ty, bool>
	{	
	bool operator()(const _Ty& _Left) const
		{	
		return (!_Left);
		}
	};

 
		
template<class _Ty>
	struct bit_and
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left & _Right);
		}
	};

		
template<class _Ty>
	struct bit_or
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left | _Right);
		}
	};

		
template<class _Ty>
	struct bit_xor
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left ^ _Right);
		}
	};
 #line 218 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

		
template<class _Fn1>
	class unary_negate
	: public unary_function<typename _Fn1::argument_type, bool>
	{	
public:
	explicit unary_negate(const _Fn1& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn1::argument_type& _Left) const
		{	
		return (!_Functor(_Left));
		}

protected:
	_Fn1 _Functor;	
	};

		
template<class _Fn1> inline
	unary_negate<_Fn1> not1(const _Fn1& _Func)
	{	
	return (::std:: unary_negate<_Fn1>(_Func));
	}

		
template<class _Fn2>
	class binary_negate
		: public binary_function<typename _Fn2::first_argument_type,
			typename _Fn2::second_argument_type, bool>
	{	
public:
	explicit binary_negate(const _Fn2& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn2::first_argument_type& _Left,
		const typename _Fn2::second_argument_type& _Right) const
		{	
		return (!_Functor(_Left, _Right));
		}

protected:
	_Fn2 _Functor;	
	};

		
template<class _Fn2> inline
	binary_negate<_Fn2> not2(const _Fn2& _Func)
	{	
	return (::std:: binary_negate<_Fn2>(_Func));
	}

		
template<class _Fn2>
	class binder1st
		: public unary_function<typename _Fn2::second_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::second_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder1st(const _Fn2& _Func,
		const typename _Fn2::first_argument_type& _Left)
		: op(_Func), value(_Left)
		{	
		}

	result_type operator()(const argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

	result_type operator()(argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

protected:
	_Fn2 op;	
	typename _Fn2::first_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
		{	
		typename _Fn2::first_argument_type _Val(_Left);
		return (::std:: binder1st<_Fn2>(_Func, _Val));
		}

		
template<class _Fn2>
	class binder2nd
		: public unary_function<typename _Fn2::first_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::first_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder2nd(const _Fn2& _Func,
		const typename _Fn2::second_argument_type& _Right)
		: op(_Func), value(_Right)
		{	
		}

	result_type operator()(const argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

	result_type operator()(argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

protected:
	_Fn2 op;	
	typename _Fn2::second_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
	{	
	typename _Fn2::second_argument_type _Val(_Right);
	return (::std:: binder2nd<_Fn2>(_Func, _Val));
	}

		
template<class _Arg,
	class _Result,
	class _Fn = _Result (*)(_Arg)>
	class pointer_to_unary_function
		: public unary_function<_Arg, _Result>
	{	
public:
	explicit pointer_to_unary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg _Left) const
		{	
		return (_Pfun(_Left));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result,
	class _Fn = _Result (*)(_Arg1, _Arg2)>
	class pointer_to_binary_function
		: public binary_function<_Arg1, _Arg2, _Result>
	{	
public:
	explicit pointer_to_binary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg1 _Left, _Arg2 _Right) const
		{	
		return (_Pfun(_Left, _Right));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>(_Left));
	}

 
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__stdcall *)(_Arg)>
			ptr_fun(_Result (__stdcall *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__stdcall *)(_Arg)>(_Left));
	}

  
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__fastcall *)(_Arg)>
			ptr_fun(_Result (__fastcall *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__fastcall *)(_Arg)>(_Left));
	}
  #line 437 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

 #line 439 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

 











template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
	}

 
template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result(__stdcall *)(_Arg1, _Arg2)>
			ptr_fun(_Result (__stdcall *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__stdcall *)(_Arg1, _Arg2)>(_Left));
	}

  
template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result(__fastcall *)(_Arg1, _Arg2)>
			ptr_fun(_Result (__fastcall *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__fastcall *)(_Arg1, _Arg2)>(_Left));
	}
  #line 487 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

 #line 489 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

 












		
template<class _Result,
	class _Ty>
	class mem_fun_t
		: public unary_function<_Ty *, _Result>
	{	
public:
	explicit mem_fun_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_t
		: public binary_function<_Ty *, _Arg, _Result>
	{	
public:
	explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_t
		: public unary_function<const _Ty *, _Result>
	{	
public:
	explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_t
		: public binary_function<const _Ty *, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_t<_Result, _Ty>
		mem_fun(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_t<_Result, _Ty, _Arg>
		mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun1(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty>
	class mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_ref_t<_Result, _Ty>
		mem_fun_ref(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg> mem_fun1_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

	
template<class _Kty>
	class hash
		: public unary_function<_Kty, size_t>
	{	
public:
	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval, 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

template<>
	class hash<_ULonglong>
		: public unary_function<_ULonglong, size_t>
	{	
public:
	typedef _ULonglong _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_Inttype>()((_Inttype)(_Keyval & 0xffffffffUL))
			^ hash<_Inttype>()((_Inttype)(_Keyval >> 32)));
		}
	};

template<>
	class hash<_Longlong>
		: public unary_function<_Longlong, size_t>
	{	
public:
	typedef _Longlong _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_ULonglong>()((_ULonglong)_Keyval));
		}
	};

template<class _Ty>
	class hash<_Ty *>
		: public unary_function<_Ty *, size_t>
	{	
public:
	typedef _Ty *_Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(_Kty _Keyval) const
		{	
		typedef typename ::std:: _If<sizeof (_Ty *) <= sizeof (_Inttype),
			_Inttype, _ULonglong>::_Type _Integer;
		return (hash<_Integer>()((_Integer)_Keyval));
		}
	};

template<>
	class hash<float>
		: public unary_function<float, size_t>
	{	
public:
	typedef float _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(_Bits == 0x80000000 ? 0 : _Bits));
		}
	};

template<>
	class hash<double>
		: public unary_function<double, size_t>
	{	
public:
	typedef double _Kty;
	typedef _ULonglong _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(
			(_Bits & (0xffffffffffffffff >> 1)) == 0 ? 0 : _Bits));
		}
	};

template<>
	class hash<long double>
		: public unary_function<long double, size_t>
	{	
public:
	typedef long double _Kty;
	typedef _ULonglong _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(
			(_Bits & (0xffffffffffffffff >> 1)) == 0 ? 0 : _Bits));
		}
	};

template<>
	class hash<::std:: string>
		: public unary_function<::std:: string, size_t>
	{	
public:
	typedef ::std:: string _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = _Keyval.size();
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
	};

template<>
	class hash<::std:: wstring>
		: public unary_function<::std:: wstring, size_t>
	{	
public:
	typedef ::std:: wstring _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = _Keyval.size();
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
	};

	namespace tr1 {
using ::std:: hash;
	}	
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 918 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"
#line 919 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"






















#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4180)

namespace std {
 namespace tr1 {	


	
template<class _Ty>
	struct _Result_of;

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	     >
	struct _Result_type0;

template<class _Fty
	     >
	struct _Result_type0<true, _Fty      >
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	     >
	struct _Result_type0<false, _Fty      >
	{	
 
	typedef void _Type;

 

#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	     >
	struct _Result_of0
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type0<
		_Result_of0<_Fty      >::_Value,
		_Fty      >::_Type _Type;
	};


template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl &)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl *)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl * const)(    )      >
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__stdcall &)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__stdcall *)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__stdcall * const)(    )      >
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__fastcall &)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__fastcall *)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__fastcall * const)(    )      >
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 








































































































































































































































































































































































































































#line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	     >
	struct _Result_of<_Fty __cdecl (    )>
	{	
	typedef typename _Result_of0<_Fty      >::_Type _Type;
	};

 
template<class _Fty
	     >
	struct _Result_of<_Fty __stdcall (    )>
	{	
	typedef typename _Result_of0<_Fty      >::_Type _Type;
	};

  
template<class _Fty
	     >
	struct _Result_of<_Fty __fastcall (    )>
	{	
	typedef typename _Result_of0<_Fty      >::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0    >
	struct _Result_type1;

template<class _Fty
	, class _Arg0    >
	struct _Result_type1<true, _Fty , _Arg0    >
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0    >
	struct _Result_type1<false, _Fty , _Arg0    >
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0    )>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0    >
	struct _Result_of1
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type1<
		_Result_of1<_Fty , _Farg0    >::_Value,
		_Fty , _Farg0    >::_Type _Type;
	};


template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl &)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl *)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl * const)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__stdcall &)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__stdcall *)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__stdcall * const)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__fastcall &)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__fastcall *)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__fastcall * const)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 
template<class _Rx,
	class _Arg0,
	class _Farg0>
	struct _Result_of1<_Rx _Arg0::*, _Farg0>
	{	
	typedef typename _Copy_cv<_Rx, _Farg0>::_Type _Type;
	};

template<class _Rx,
	class _Arg0,
	class _Farg0>
	struct _Result_of1<_Rx _Arg0::*const, _Farg0>
	{	
	typedef typename _Copy_cv<_Rx, _Farg0>::_Type _Type;
	};
 #line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*const)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*const)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*const)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*const)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*const)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*const)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*const)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*const)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*const)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__cdecl _Arg0::*const)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__stdcall _Arg0::*const)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__fastcall _Arg0::*const)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0    >
	struct _Result_of<_Fty __cdecl (_Arg0    )>
	{	
	typedef typename _Result_of1<_Fty , typename _Remove_reference<_Arg0 >::_Type&    >::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0    >
	struct _Result_of<_Fty __stdcall (_Arg0    )>
	{	
	typedef typename _Result_of1<_Fty , typename _Remove_reference<_Arg0 >::_Type&    >::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0    >
	struct _Result_of<_Fty __fastcall (_Arg0    )>
	{	
	typedef typename _Result_of1<_Fty , typename _Remove_reference<_Arg0 >::_Type&    >::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2;

template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2<true, _Fty , _Arg0 ,   _Arg1>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2<false, _Fty , _Arg0 ,   _Arg1>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 ,   _Arg1)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type2<
		_Result_of2<_Fty , _Farg0 ,   _Farg1>::_Value,
		_Fty , _Farg0 ,   _Farg1>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl &)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl *)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl * const)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__stdcall &)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__stdcall *)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__stdcall * const)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__fastcall &)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__fastcall *)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__fastcall * const)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*const)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*const)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*const)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*const)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*const)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*const)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*const)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*const)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*const)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__cdecl _Arg0::*const)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__stdcall _Arg0::*const)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__fastcall _Arg0::*const)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_of<_Fty __cdecl (_Arg0 ,   _Arg1)>
	{	
	typedef typename _Result_of2<_Fty , typename _Remove_reference<_Arg0 >::_Type& ,   typename _Remove_reference<_Arg1 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_of<_Fty __stdcall (_Arg0 ,   _Arg1)>
	{	
	typedef typename _Result_of2<_Fty , typename _Remove_reference<_Arg0 >::_Type& ,   typename _Remove_reference<_Arg1 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_of<_Fty __fastcall (_Arg0 ,   _Arg1)>
	{	
	typedef typename _Result_of2<_Fty , typename _Remove_reference<_Arg0 >::_Type& ,   typename _Remove_reference<_Arg1 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3;

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3<true, _Fty , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3<false, _Fty , _Arg0 , _Arg1 , _Arg2>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1 , _Arg2)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type3<
		_Result_of3<_Fty , _Farg0 , _Farg1 , _Farg2>::_Value,
		_Fty , _Farg0 , _Farg1 , _Farg2>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl &)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl *)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl * const)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__stdcall &)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__stdcall *)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__stdcall * const)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__fastcall &)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__fastcall *)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__fastcall * const)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*const)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*const)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*const)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*const)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*const)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*const)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*const)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*const)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*const)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__cdecl _Arg0::*const)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__stdcall _Arg0::*const)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__fastcall _Arg0::*const)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef typename _Result_of3<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type& , typename _Remove_reference<_Arg2 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef typename _Result_of3<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type& , typename _Remove_reference<_Arg2 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef typename _Result_of3<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type& , typename _Remove_reference<_Arg2 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4<true, _Fty , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4<false, _Fty , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2 , _Arg3)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type4<
		_Result_of4<_Fty , _Farg0 , _Farg1, _Farg2 , _Farg3>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2 , _Farg3>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef typename _Result_of4<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type& , typename _Remove_reference<_Arg3 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef typename _Result_of4<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type& , typename _Remove_reference<_Arg3 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef typename _Result_of4<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type& , typename _Remove_reference<_Arg3 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type5<
		_Result_of5<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef typename _Result_of5<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type& , typename _Remove_reference<_Arg4 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef typename _Result_of5<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type& , typename _Remove_reference<_Arg4 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef typename _Result_of5<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type& , typename _Remove_reference<_Arg4 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type6<
		_Result_of6<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef typename _Result_of6<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type& , typename _Remove_reference<_Arg5 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef typename _Result_of6<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type& , typename _Remove_reference<_Arg5 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef typename _Result_of6<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type& , typename _Remove_reference<_Arg5 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type7<
		_Result_of7<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef typename _Result_of7<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type& , typename _Remove_reference<_Arg6 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef typename _Result_of7<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type& , typename _Remove_reference<_Arg6 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef typename _Result_of7<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type& , typename _Remove_reference<_Arg6 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type8<
		_Result_of8<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef typename _Result_of8<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type& , typename _Remove_reference<_Arg7 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef typename _Result_of8<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type& , typename _Remove_reference<_Arg7 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef typename _Result_of8<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type& , typename _Remove_reference<_Arg7 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type9<
		_Result_of9<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef typename _Result_of9<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type& , typename _Remove_reference<_Arg8 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef typename _Result_of9<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type& , typename _Remove_reference<_Arg8 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef typename _Result_of9<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type& , typename _Remove_reference<_Arg8 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
 


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>::type _Type;
 #line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type10<
		_Result_of10<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

 
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__stdcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__stdcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

  
template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__fastcall &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__fastcall * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};
  #line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 119 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 


























 















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 366 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 419 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};
  #line 576 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 #line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 










 #line 591 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef typename _Result_of10<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type&, typename _Remove_reference<_Arg8 >::_Type& , typename _Remove_reference<_Arg9 >::_Type&>::_Type _Type;
	};

 
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of<_Fty __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef typename _Result_of10<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type&, typename _Remove_reference<_Arg8 >::_Type& , typename _Remove_reference<_Arg9 >::_Type&>::_Type _Type;
	};

  
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of<_Fty __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef typename _Result_of10<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type&, typename _Remove_reference<_Arg8 >::_Type& , typename _Remove_reference<_Arg9 >::_Type&>::_Type _Type;
	};
  #line 616 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 















#line 270 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Fty>
	struct result_of
	{	
	typedef typename _Result_of<_Fty>::_Type type;
	};



	
template<class _Ret,
	class _Arg0>
	struct _Pmd_caller
	{	
	template<class _Pmd,
		class _Farg0>
		static _Ret _Call_pmd(const volatile _Arg0*, _Pmd _Pm, _Farg0 _F0)
		{	
		return ((_Ret)(_F0.*_Pm));
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret _Call_pmd(const volatile void *, _Pmd _Pm, _Farg0 _F0)
		{	
		return ((*_F0).*_Pm);
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret _Apply_pmd(_Pmd _Pm, _Farg0& _F0)
		{	
		return (_Call_pmd<_Pmd, _Farg0&>(&_F0, _Pm, _F0));
		}
	};

	
template<class _Ty,
	bool _Indirect>
	struct _Callable_base;

template<class _Ty>
	struct _Callable_base<_Ty, false>
	{	
	enum {_EEN_INDIRECT = 0};	
	typedef _Ty _MyTy;
	typedef const _Ty& _MyCnstTy;

	_Callable_base(_Ty& _Val)
		: _Object(_Val)
		{	
		}

	const _Ty& _Get() const
		{	
		return (_Object);
		}

	_Ty& _Get()
		{	
		return (_Object);
		}

private:
	_Callable_base& operator=(const _Callable_base&);

	_Ty _Object;
};

template<class _Ty>
	struct _Callable_base<_Ty, true>
	{	
		
	enum {_EEN_INDIRECT = 1};	
	typedef _Ty _MyTy;
	typedef _Ty& _MyCnstTy;

	_Callable_base(_Ty& _Val)
		: _Ptr(&_Val)
		{	
		}

	_MyCnstTy _Get() const
		{	
		return (*_Ptr);
		}

	_Ty& _Get()
		{	
		return (*_Ptr);
		}

	void _Reset(_Ty& _Val)
		{	
		_Ptr = &_Val;
		}

private:
	_Ty *_Ptr;
};

	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmd
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmd(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

	template<class _Ret,
		class _Arg0>
		_Ret _ApplyX(_Arg0& _A0) const
		{	
		return (_Pmd_caller<_Ret, _Memty>::_Apply_pmd(this->_Get(), _A0));
		}
	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_obj
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_obj(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret      >
	_Ret _ApplyX(    ) const
	{ 
	return (this->_Get()(    ));
	}

template<class _Ret      >
	_Ret _ApplyX(    )
	{ 
	return (this->_Get()(    ));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}

template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    )
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}

template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}





#line 258 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
















































#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller1
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0    >
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return ((_Fx0.*_Pm)(  ));
		}

	template<class _Pmf,
		class _Farg0    >
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return (((*_Fx0).*_Pm)(  ));
		}

	
	
	template<class _Pmf,
		class _Farg0    >
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0)    ));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller2
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return ((_Fx0.*_Pm)(  _Fx1));
		}

	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return (((*_Fx0).*_Pm)(  _Fx1));
		}

	
	
	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) ,   _Fx1));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller3
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return ((_Fx0.*_Pm)(_Fx1 , _Fx2));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return (((*_Fx0).*_Pm)(_Fx1 , _Fx2));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1 , _Fx2));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller4
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2 , _Fx3));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2 , _Fx3));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2 , _Fx3));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller5
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3 , _Fx4));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3 , _Fx4));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3 , _Fx4));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller6
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller7
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller8
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller9
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller10
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}
	};
 #line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmf
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmf(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 






#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (_Pmf_caller1<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0    ));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (_Pmf_caller2<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 ,   _Ax1));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (_Pmf_caller3<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1 , _Ax2));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (_Pmf_caller4<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2 , _Ax3));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (_Pmf_caller5<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (_Pmf_caller6<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (_Pmf_caller7<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (_Pmf_caller8<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (_Pmf_caller9<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (_Pmf_caller10<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
	}
 #line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 179 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_fun
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_fun(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret      >
	_Ret _ApplyX(    ) const
	{ 
	return (this->_Get()(    ));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}





#line 256 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Callable>
	struct _Call_wrapper_base
	{	
	typedef typename _Callable::_MyTy _MyTy;
	typedef typename _Callable::_MyCnstTy _MyCnstTy;

	_Call_wrapper_base(_MyTy& _Val)
		: _Callee(_Val)
		{	
		}

	void _Reset(_MyTy& _Val)
		{	
		_Callee._Reset(_Val);
		}

	_MyCnstTy _Get() const
		{	
		return (_Callee._Get());
		}

	_MyCnstTy _Get()
		{	
		return (_Callee._Get());
		}

	_Callable _Callee;
	};

	
template<class _Callable>
	struct _Call_wrapper
	: _Call_wrapper_base<_Callable>
	{	
	typedef _Call_wrapper_base<_Callable> _Mybase;

	_Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
		: _Call_wrapper_base<_Callable>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 
 
 
 
 
 
  

#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 

#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy()>::_Type
		operator()() const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy()>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>());
	}





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
 
 
 
 
 
 
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"







  

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0)>::_Type
		operator()(_Carg0&& _CA0) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0)));
	}





#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














  

#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1)));
	}





#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"















  

#line 81 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2)));
	}





#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"


















  

#line 104 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3)));
	}





#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 106 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




















  

#line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4)));
	}





#line 130 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





















  

#line 155 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5)));
	}





#line 156 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 157 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"






















  

#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6)));
	}





#line 183 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"

























  

#line 212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7)));
	}





#line 213 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 214 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"



























  

#line 244 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8)));
	}





#line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




























  

#line 277 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9)));
	}





#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














#line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Ty>
	_No _Has_result_and_arg_type(const volatile void *);

template<class _Ty>
	_Yes _Has_result_and_arg_type(_Ty *,
		typename _Ty::argument_type * = 0, typename _Ty::result_type * = 0);




	
template<class _Ty>
	_No _Has_result_and_2arg_type(const volatile void *);

template<class _Ty>
	_Yes _Has_result_and_2arg_type(_Ty *,
		typename _Ty::first_argument_type * = 0,
		typename _Ty::second_argument_type * = 0,
		typename _Ty::result_type * = 0);




	
template<class _T1,
	class _Ret>
	_No _Has_unary_base(const volatile void *);

template<class _T1,
	class _Ret>
	_Yes _Has_unary_base(const volatile unary_function<_T1, _Ret> *);





	
template<class _T1,
	class _T2,
	class _Ret>
	_No _Has_binary_base(const volatile void *);

template<class _T1,
	class _T2,
	class _Ret>
	_Yes _Has_binary_base(const volatile binary_function<_T1, _T2, _Ret> *);






	
template<class _Ty,
	bool>
	struct _Refwrap_result0
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty>
	struct _Refwrap_result0<_Ty, false>
	{	
	};


template<class _Ty,
	bool>
	struct _Refwrap_result1_helper
		: _Refwrap_result0<_Ty, (sizeof (::std:: tr1::_Has_result_type((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1_helper<_Ty, true>
		: unary_function<typename _Ty::argument_type,
			typename _Ty::result_type>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result1
		: _Refwrap_result0<_Ty, (sizeof (::std:: tr1::_Has_result_type((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1<_Ty, true>
		: _Refwrap_result1_helper<_Ty, (sizeof ((_Has_unary_base<typename _Ty::argument_type, typename _Ty::result_type>((_Ty *)0))) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2_helper
		: _Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2_helper<_Ty, true>
		: binary_function<typename _Ty::first_argument_type,
				typename _Ty::second_argument_type,
			typename _Ty::result_type>,
				_Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2
		: _Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2<_Ty, true>
		: _Refwrap_result2_helper<_Ty, (sizeof ((_Has_binary_base<typename _Ty::first_argument_type, typename _Ty::second_argument_type, typename _Ty::result_type>((_Ty *)0))) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty>
	struct _Refwrap_impl
		: _Call_wrapper<_Callable_obj<_Ty, true> >,
			_Refwrap_result2<_Ty, (sizeof (::std:: tr1::_Has_result_and_2arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	_Refwrap_impl(_Ty& _Val)
		: _Call_wrapper<_Callable_obj<_Ty, true> >(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0, false> >
	{	
	typedef _Rx _Arg0::*const _Fty;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*const>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*, _Arg0, false> >
	{	
	typedef _Rx _Arg0::*_Fty;
	typedef _Rx result_type;
	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

	

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx __cdecl (    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(    ), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx __stdcall (    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(    ), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx __fastcall (    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(    ), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__cdecl *)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(    ), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__cdecl *const)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(    ), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__stdcall *)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(    ), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__stdcall *const)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(    ), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__fastcall *)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(    ), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__fastcall *const)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(    ), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx __cdecl (_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0    ), false> >

 
			, unary_function<_Arg0, _Rx>

 

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx __stdcall (_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0    ), false> >

 
			, unary_function<_Arg0, _Rx>

 

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx __fastcall (_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0    ), false> >

 
			, unary_function<_Arg0, _Rx>

 

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 ,   _Arg1), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 ,   _Arg1), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 ,   _Arg1), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 ,   _Arg1), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 ,   _Arg1), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 ,   _Arg1), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 ,   _Arg1), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 ,   _Arg1), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 ,   _Arg1), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  _Arg1), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  _Arg1) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  _Arg1) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(  _Arg1) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  _Arg1), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  _Arg1) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  _Arg1) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(  _Arg1) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  _Arg1), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  _Arg1) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  _Arg1) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(  _Arg1) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  _Arg1), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  _Arg1) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  _Arg1) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(  _Arg1) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  _Arg1), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  _Arg1) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  _Arg1) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(  _Arg1) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  _Arg1), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  _Arg1) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  _Arg1) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(  _Arg1) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1 , _Arg2), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1 , _Arg2), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), false> >

 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx __stdcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), false> >

 


#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx __fastcall (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), false> >

 


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};
  #line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__stdcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

  
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__fastcall *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 232 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};
  #line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 309 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 401 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 496 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 498 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 521 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 542 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 544 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 565 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 567 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 588 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 590 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 611 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 613 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 634 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 636 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 657 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 681 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 683 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 704 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 706 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 727 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 729 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 750 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 752 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 773 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 775 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 796 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 798 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 819 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 821 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 842 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 844 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__stdcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


  

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 868 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 870 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 891 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 893 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 914 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 916 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 962 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 985 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 1006 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1008 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 1031 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__fastcall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

  #line 1043 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
 #line 1044 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

 



























































































































































































 #line 1234 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 411 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Ty>
	class reference_wrapper
	: public _Refwrap_impl<_Ty>
	{	
public:
	typedef _Refwrap_impl<_Ty> _MyBase;
	typedef _Ty type;

	reference_wrapper(_Ty& _Val)
		: _MyBase(_Val)
		{	
		}

	operator _Ty&() const
		{	
		return (this->_Get());
		}

	_Ty& get() const
		{	
		return (this->_Get());
		}
	};

	
template<class _Ty>
	reference_wrapper<_Ty> ref(_Ty& _Val)
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&& _Val);	

template<class _Ty>
	reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val)
	{	
	return (_Val);
	}

template<class _Ty>
	reference_wrapper<const _Ty> cref(const _Ty& _Val)
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}




template<class _Ty>
	reference_wrapper<const _Ty> cref(reference_wrapper<const _Ty> _Val)
	{	
	return (_Val);
	}
	}	
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 474 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
#line 475 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"





#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 #pragma warning(disable: 4100 4180 4244)

namespace std {
	namespace tr1 {	

	
template<class _Rx,
	class _Arg0>
	_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >
		mem_fn(_Rx _Arg0::*const _Pmd)
	{	
	return (_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >(_Pmd));
	}


 
 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


 





#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0    >
	class _Mem_fn1
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 
			, public ::std:: unary_function<_Arg0*, _Rx>

 

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn1(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ), _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ))
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ),
		_Arg0    >(_Pm));
	}

 
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ), _Arg0    >
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  ))
	{	
	return (_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ),
		_Arg0    >(_Pm));
	}

template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ), _Arg0    >
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  ))
	{	
	return (_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ),
		_Arg0    >(_Pm));
	}

  
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ), _Arg0    >
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  ))
	{	
	return (_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ),
		_Arg0    >(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const,
		const _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) const)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const,
		const _Arg0    >(_Pm));
	}

 
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) const,
		const _Arg0    >
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  ) const)
	{	
	return (_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) const,
		const _Arg0    >(_Pm));
	}

template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) const,
		const _Arg0    >
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  ) const)
	{	
	return (_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) const,
		const _Arg0    >(_Pm));
	}

  
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) const,
		const _Arg0    >
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  ) const)
	{	
	return (_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) const,
		const _Arg0    >(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) volatile,
		volatile _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) volatile,
		volatile _Arg0    >(_Pm));
	}

 
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) volatile,
		volatile _Arg0    >
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  ) volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) volatile,
		volatile _Arg0    >(_Pm));
	}

template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) volatile,
		volatile _Arg0    >
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  ) volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) volatile,
		volatile _Arg0    >(_Pm));
	}

  
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) volatile,
		volatile _Arg0    >
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  ) volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) volatile,
		volatile _Arg0    >(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) const volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >(_Pm));
	}

 
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  ) const volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__cdecl _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >(_Pm));
	}

template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  ) const volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__stdcall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >(_Pm));
	}

  
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  ) const volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__fastcall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 ,   class _Arg1>
	class _Mem_fn2
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"
			, public ::std:: binary_function<_Arg0*, _Arg1, _Rx>
 #line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn2(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1), _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1))
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1),
		_Arg0 ,   _Arg1>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1), _Arg0 ,   _Arg1>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  _Arg1))
	{	
	return (_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1),
		_Arg0 ,   _Arg1>(_Pm));
	}

template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1), _Arg0 ,   _Arg1>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  _Arg1))
	{	
	return (_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1),
		_Arg0 ,   _Arg1>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1), _Arg0 ,   _Arg1>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  _Arg1))
	{	
	return (_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1),
		_Arg0 ,   _Arg1>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) const)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  _Arg1) const)
	{	
	return (_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>(_Pm));
	}

template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  _Arg1) const)
	{	
	return (_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  _Arg1) const)
	{	
	return (_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  _Arg1) volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>(_Pm));
	}

template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  _Arg1) volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  _Arg1) volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) const volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(  _Arg1) const volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__cdecl _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>(_Pm));
	}

template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(  _Arg1) const volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__stdcall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(  _Arg1) const volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__fastcall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1 , class _Arg2>
	class _Mem_fn3
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn3(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2), _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2))
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2),
		_Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2), _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1 , _Arg2))
	{	
	return (_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2),
		_Arg0 , _Arg1 , _Arg2>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2), _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1 , _Arg2))
	{	
	return (_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2),
		_Arg0 , _Arg1 , _Arg2>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2), _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1 , _Arg2))
	{	
	return (_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2),
		_Arg0 , _Arg1 , _Arg2>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) const)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1 , _Arg2) const)
	{	
	return (_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1 , _Arg2) const)
	{	
	return (_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1 , _Arg2) const)
	{	
	return (_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1 , _Arg2) volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1 , _Arg2) volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1 , _Arg2) volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) const volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1 , _Arg2) const volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1 , _Arg2) const volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1 , _Arg2) const volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Mem_fn4
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn4(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3))
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3))
	{	
	return (_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3))
	{	
	return (_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3))
	{	
	return (_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const)
	{	
	return (_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const)
	{	
	return (_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const)
	{	
	return (_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Mem_fn5
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn5(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4))
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4))
	{	
	return (_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4))
	{	
	return (_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4))
	{	
	return (_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const)
	{	
	return (_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const)
	{	
	return (_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const)
	{	
	return (_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Mem_fn6
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn6(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5))
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5))
	{	
	return (_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5))
	{	
	return (_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5))
	{	
	return (_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const)
	{	
	return (_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const)
	{	
	return (_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const)
	{	
	return (_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Mem_fn7
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn7(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6))
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6))
	{	
	return (_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6))
	{	
	return (_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6))
	{	
	return (_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const)
	{	
	return (_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const)
	{	
	return (_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const)
	{	
	return (_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Mem_fn8
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn8(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7))
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7))
	{	
	return (_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7))
	{	
	return (_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7))
	{	
	return (_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const)
	{	
	return (_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const)
	{	
	return (_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const)
	{	
	return (_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Mem_fn9
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn9(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8))
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8))
	{	
	return (_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8))
	{	
	return (_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8))
	{	
	return (_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const)
	{	
	return (_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const)
	{	
	return (_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const)
	{	
	return (_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Mem_fn10
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn10(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9))
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9))
	{	
	return (_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9))
	{	
	return (_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9))
	{	
	return (_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}
  #line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const)
	{	
	return (_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const)
	{	
	return (_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const)
	{	
	return (_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}
  #line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}
  #line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__cdecl _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__stdcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

  
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__fastcall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}
  #line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 #line 242 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

 

















#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"



 
  

  
typedef ::std:: nullptr_t _Unutterable;

  

#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 














#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	
class bad_function_call
	: public exception
	{	
public:
	explicit bad_function_call(const char * = 0)
		{	
		}

	virtual const char * what() const throw ()
		{	
		return ("bad function call");
		}
	};

 __declspec(noreturn) void __cdecl _Xfunc();

template<class _Tx>
	struct _Get_function_impl;

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx      >
	class _Impl_base0
	{	
public:
	virtual _Impl_base0 *_Copy(void *) = 0;
	virtual _Rx _Do_call(    ) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base0()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx      >
	class _Impl_no_alloc0
		: public _Impl_base0<_Rx      >
	{	
public:
	typedef _Impl_no_alloc0 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc0(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc0()
		{	
		}

	virtual _Impl_base0<_Rx      > *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc0(*this);
	return ((_Impl_base0<_Rx      > *)_Where);
	}

	_Rx _Do_call(    )
		{	
		return (_Callee.template _ApplyX<_Rx>(    ));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx      ,
	class _Alloc>
	class _Impl0
		: public _Impl_no_alloc0<_Callable, _Rx      >
	{	
public:
	typedef _Impl0 _Myty;
	typedef _Impl_no_alloc0<_Callable, _Rx      >
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl0(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl0()
		{	
		}

	virtual _Impl_base0<_Rx      > *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl0(*this);
		return ((_Impl_base0<_Rx      > *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret      >
	class _Function_impl0

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl0<_Ret      > _Myty;
	typedef _Impl_base0<_Ret      > _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(    ) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(    ));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret      >
		void _Reset(_Fret (__cdecl *const _Val)(    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(    )> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret      ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(    )> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret      ,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret      >
		void _Reset(_Fret (__stdcall *const _Val)(    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(    )> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret      ,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(    )> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret      ,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret      >
		void _Reset(_Fret (__fastcall *const _Val)(    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(    )> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret      ,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(    )> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret      ,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret      >
	struct _Get_function_impl<_Ret(    )>
	{	
	typedef _Function_impl0<_Ret      > _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0    >
	class _Impl_base1
	{	
public:
	virtual _Impl_base1 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0    ) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base1()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0    >
	class _Impl_no_alloc1
		: public _Impl_base1<_Rx , _Arg0    >
	{	
public:
	typedef _Impl_no_alloc1 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc1(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc1()
		{	
		}

	virtual _Impl_base1<_Rx , _Arg0    > *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc1(*this);
	return ((_Impl_base1<_Rx , _Arg0    > *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0    )
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0    ));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0    ,
	class _Alloc>
	class _Impl1
		: public _Impl_no_alloc1<_Callable, _Rx , _Arg0    >
	{	
public:
	typedef _Impl1 _Myty;
	typedef _Impl_no_alloc1<_Callable, _Rx , _Arg0    >
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl1(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl1()
		{	
		}

	virtual _Impl_base1<_Rx , _Arg0    > *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl1(*this);
		return ((_Impl_base1<_Rx , _Arg0    > *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0    >
	class _Function_impl1

 
		: public ::std:: unary_function<_Arg0, _Ret>
 

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl1<_Ret , _Arg0    > _Myty;
	typedef _Impl_base1<_Ret , _Arg0    > _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0    ) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0    ));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0    )> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0    )> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0    )> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0    )> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0    )> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0    )> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret,
		class _Farg0>
		void _Reset(_Fret _Farg0::*const _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmd<_Fret _Farg0::*const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmd<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret,
		class _Farg0,
		class _Alloc>
		void _Reset_alloc(_Fret _Farg0::*const _Val, _Alloc _Ax)
		{
		typedef _Callable_pmd<_Fret _Farg0::*const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0, _Alloc> _Myimpl;
		_Reset0pmd<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret,
		class _Farg0,
		class _Alloc>
		void _Reset0pmd(_Fret _Farg0::*const _Val, _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
 #line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  ) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  ) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  ) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  ) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  ) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  ) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  ) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  ) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  ) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0    >
	struct _Get_function_impl<_Ret(_Arg0    )>
	{	
	typedef _Function_impl1<_Ret , _Arg0    > _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 ,   class _Arg1>
	class _Impl_base2
	{	
public:
	virtual _Impl_base2 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 ,   _Arg1 _Ax1) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base2()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 ,   class _Arg1>
	class _Impl_no_alloc2
		: public _Impl_base2<_Rx , _Arg0 ,   _Arg1>
	{	
public:
	typedef _Impl_no_alloc2 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc2(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc2()
		{	
		}

	virtual _Impl_base2<_Rx , _Arg0 ,   _Arg1> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc2(*this);
	return ((_Impl_base2<_Rx , _Arg0 ,   _Arg1> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 ,   _Arg1 _Ax1)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 ,   _Ax1));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 ,   class _Arg1,
	class _Alloc>
	class _Impl2
		: public _Impl_no_alloc2<_Callable, _Rx , _Arg0 ,   _Arg1>
	{	
public:
	typedef _Impl2 _Myty;
	typedef _Impl_no_alloc2<_Callable, _Rx , _Arg0 ,   _Arg1>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl2(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl2()
		{	
		}

	virtual _Impl_base2<_Rx , _Arg0 ,   _Arg1> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl2(*this);
		return ((_Impl_base2<_Rx , _Arg0 ,   _Arg1> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 ,   class _Arg1>
	class _Function_impl2

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"
		: public ::std:: binary_function<_Arg0, _Arg1, _Ret>
 #line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl2<_Ret , _Arg0 ,   _Arg1> _Myty;
	typedef _Impl_base2<_Ret , _Arg0 ,   _Arg1> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 ,   _Arg1 _Ax1) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 ,   _Ax1));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 ,   _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 ,   _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Get_function_impl<_Ret(_Arg0 ,   _Arg1)>
	{	
	typedef _Function_impl2<_Ret , _Arg0 ,   _Arg1> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1 , class _Arg2>
	class _Impl_base3
	{	
public:
	virtual _Impl_base3 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base3()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1 , class _Arg2>
	class _Impl_no_alloc3
		: public _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2>
	{	
public:
	typedef _Impl_no_alloc3 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc3(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc3()
		{	
		}

	virtual _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc3(*this);
	return ((_Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1 , _Ax2));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1 , class _Arg2,
	class _Alloc>
	class _Impl3
		: public _Impl_no_alloc3<_Callable, _Rx , _Arg0 , _Arg1 , _Arg2>
	{	
public:
	typedef _Impl3 _Myty;
	typedef _Impl_no_alloc3<_Callable, _Rx , _Arg0 , _Arg1 , _Arg2>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl3(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl3()
		{	
		}

	virtual _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl3(*this);
		return ((_Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	class _Function_impl3

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl3<_Ret , _Arg0 , _Arg1 , _Arg2> _Myty;
	typedef _Impl_base3<_Ret , _Arg0 , _Arg1 , _Arg2> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1 , _Ax2));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef _Function_impl3<_Ret , _Arg0 , _Arg1 , _Arg2> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Impl_base4
	{	
public:
	virtual _Impl_base4 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base4()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Impl_no_alloc4
		: public _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
public:
	typedef _Impl_no_alloc4 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc4(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc4()
		{	
		}

	virtual _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc4(*this);
	return ((_Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2 , _Ax3));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3,
	class _Alloc>
	class _Impl4
		: public _Impl_no_alloc4<_Callable, _Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
public:
	typedef _Impl4 _Myty;
	typedef _Impl_no_alloc4<_Callable, _Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl4(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl4()
		{	
		}

	virtual _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl4(*this);
		return ((_Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Function_impl4

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Myty;
	typedef _Impl_base4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2 , _Ax3));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef _Function_impl4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Impl_base5
	{	
public:
	virtual _Impl_base5 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base5()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Impl_no_alloc5
		: public _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
public:
	typedef _Impl_no_alloc5 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc5(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc5()
		{	
		}

	virtual _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc5(*this);
	return ((_Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4,
	class _Alloc>
	class _Impl5
		: public _Impl_no_alloc5<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
public:
	typedef _Impl5 _Myty;
	typedef _Impl_no_alloc5<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl5(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl5()
		{	
		}

	virtual _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl5(*this);
		return ((_Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Function_impl5

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Myty;
	typedef _Impl_base5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef _Function_impl5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Impl_base6
	{	
public:
	virtual _Impl_base6 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base6()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Impl_no_alloc6
		: public _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
public:
	typedef _Impl_no_alloc6 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc6(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc6()
		{	
		}

	virtual _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc6(*this);
	return ((_Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5,
	class _Alloc>
	class _Impl6
		: public _Impl_no_alloc6<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
public:
	typedef _Impl6 _Myty;
	typedef _Impl_no_alloc6<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl6(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl6()
		{	
		}

	virtual _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl6(*this);
		return ((_Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Function_impl6

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Myty;
	typedef _Impl_base6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef _Function_impl6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Impl_base7
	{	
public:
	virtual _Impl_base7 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base7()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Impl_no_alloc7
		: public _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
public:
	typedef _Impl_no_alloc7 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc7(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc7()
		{	
		}

	virtual _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc7(*this);
	return ((_Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6,
	class _Alloc>
	class _Impl7
		: public _Impl_no_alloc7<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
public:
	typedef _Impl7 _Myty;
	typedef _Impl_no_alloc7<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl7(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl7()
		{	
		}

	virtual _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl7(*this);
		return ((_Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Function_impl7

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Myty;
	typedef _Impl_base7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef _Function_impl7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Impl_base8
	{	
public:
	virtual _Impl_base8 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base8()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Impl_no_alloc8
		: public _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
public:
	typedef _Impl_no_alloc8 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc8(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc8()
		{	
		}

	virtual _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc8(*this);
	return ((_Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7,
	class _Alloc>
	class _Impl8
		: public _Impl_no_alloc8<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
public:
	typedef _Impl8 _Myty;
	typedef _Impl_no_alloc8<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl8(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl8()
		{	
		}

	virtual _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl8(*this);
		return ((_Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Function_impl8

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Myty;
	typedef _Impl_base8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef _Function_impl8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Impl_base9
	{	
public:
	virtual _Impl_base9 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base9()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Impl_no_alloc9
		: public _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
public:
	typedef _Impl_no_alloc9 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc9(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc9()
		{	
		}

	virtual _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc9(*this);
	return ((_Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8,
	class _Alloc>
	class _Impl9
		: public _Impl_no_alloc9<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
public:
	typedef _Impl9 _Myty;
	typedef _Impl_no_alloc9<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl9(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl9()
		{	
		}

	virtual _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl9(*this);
		return ((_Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Function_impl9

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Myty;
	typedef _Impl_base9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef _Function_impl9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Impl_base10
	{	
public:
	virtual _Impl_base10 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base10()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Impl_no_alloc10
		: public _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
public:
	typedef _Impl_no_alloc10 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc10(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc10()
		{	
		}

	virtual _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc10(*this);
	return ((_Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9,
	class _Alloc>
	class _Impl10
		: public _Impl_no_alloc10<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
public:
	typedef _Impl10 _Myty;
	typedef _Impl_no_alloc10<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl10(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl10()
		{	
		}

	virtual _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl10(*this);
		return ((_Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Function_impl10

 

#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Myty;
	typedef _Impl_base10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__stdcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0f(_Fret (__stdcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__fastcall *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0f(_Fret (__fastcall *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 316 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 318 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmf(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfv(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__cdecl _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmf(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfv(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__stdcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

  
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmf(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfv(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__fastcall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
  #line 1186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 #line 1188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 

























































































































































































 #line 1376 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef _Function_impl10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Type;
	};











#line 262 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	
template<class _Fty>
	class function
		: public _Get_function_impl<_Fty>::_Type
	{	
public:
	typedef function<_Fty> _Myt;
	typedef typename _Get_function_impl<_Fty>::_Type _Mybase;

	function()
		{	
		this->_Reset();
		}

	function(const _Myt& _Right)
		{	
		this->_Reset((const _Mybase&)_Right);
		}

	template<class _Fx>
		function(_Fx _Func )
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(_Fx _Func , const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Fx>
		function(reference_wrapper<_Fx> _Func)
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	function(_Unutterable)
		{	
		this->_Reset();
		}

 
	function(int)
		{	
		this->_Reset();
		}
 #line 148 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	~function()
		{	
		this->_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Reset((const _Mybase&)_Right);
			}
		return (*this);
		}

	function(_Myt&& _Right)
		{	
		this->_Resetm((_Mybase&)_Right);
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Resetm((_Mybase&)_Right);
			}
		return (*this);
		}

	template<class _Fx>
		_Myt& operator=(_Fx _Func )
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	function& operator=(_Unutterable)
		{	
		this->_Tidy();
		this->_Reset();
		return (*this);
		}

 
	function& operator=(int)
		{	
		this->_Tidy();
		this->_Reset();
		return (*this);
		}
 #line 203 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	template<class _Fx>
		_Myt& operator=(reference_wrapper<_Fx> _Func)
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	template<class _Fx,
		class _Alloc>
		void assign(_Fx _Func , const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Fx,
		class _Alloc>
		void assign(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(_Func, _Ax);
		}

	void swap(_Myt& _Right)
		{	
		this->_Swap(_Right);
		}

	operator ::std:: _Bool_type() const
		{	
		return (!this->_Empty() ? (&::std:: _Bool_struct::_Member) : 0);
		}

	const  type_info& target_type() const
		{	
		return (this->_Target_type());
		}

	template<class _Fty2>
		_Fty2 *target()
		{	
		return ((_Fty2*)this->_Target(typeid(_Fty2)));
		}

	template<class _Fty2>
		const _Fty2 *target() const
		{	
		return ((const _Fty2*)this->_Target(typeid(_Fty2)));
		}

private:
	template<class _Fty2>
		void operator==(const function<_Fty2>&);	
	template<class _Fty2>
		void operator!=(const function<_Fty2>&);	
	};

	
template<class _Fty>
	void swap(function<_Fty>& _Left, function<_Fty>& _Right)
	{	
	_Left.swap(_Right);
	}

	
template<class _Fty>
	bool operator==(const function<_Fty>& _Other, _Unutterable)
	{	
	return (!_Other);
	}

template<class _Fty>
	bool operator==(_Unutterable _Npc, const function<_Fty>& _Other)
	{	
	return (operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(const function<_Fty>& _Other, _Unutterable _Npc)
	{	
	return (!operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(_Unutterable _Npc, const function<_Fty>& _Other)
	{	
	return (!operator==(_Other, _Npc));
	}


	
template<int _Nx>
	class _Ph
	{	
	};

template<class _Tx>
	struct is_placeholder
	{	
	static const int value = 0;
	};

template<int _Nx>
	struct is_placeholder<_Ph<_Nx> >
	{	
	static const int value = _Nx;
	};

	
template<class _Tx>
	struct is_bind_expression
	{	
	static const bool value = false;
	};

	
struct _Notforced
	{	
	};

	
template<class _Override,
	class _Natural>
	struct _Bindret
	{	
	typedef _Override _Type;
	};

template<class _Natural>
	struct _Bindret<_Notforced, _Natural>
	{	
	typedef _Natural _Type;
	};

	
template<bool _Has_nested,
	class _Ty>
	struct _Wrap_result_type;

template<class _Ty>
	struct _Wrap_result_type<false, _Ty>
	{	
	};

template<class _Ty>
	struct _Wrap_result_type<true, _Ty>
	{	
	typedef typename _Ty::result_type result_type;
	};

	
template<class _Ret,
	class _BindN>
	class _Bind_base
	{	
public:
	typedef typename _BindN::_MyTy _MyTy;
	typedef _BindN _MyBind;

	_Bind_base(_BindN _B0)
		: _Bx(_B0)
		{	
		}


 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 
 
 
 
 
 
  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 

#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()() const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()()
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
 
 
 
 
 
 
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"







  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"















  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"


















  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 106 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




















  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





















  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 154 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 157 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"






















  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6) , _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6) , _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 181 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"

























  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7) , _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7) , _Nil_obj, _Nil_obj));
	}





#line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 214 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"



























  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8) , _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8) , _Nil_obj));
	}





#line 243 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




























  
   #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9) ));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9) ));
	}





#line 276 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














#line 372 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
private:
	_BindN _Bx;
	};

template<class _Result_type,
	class _Ret,
	class _BindN>
	class _Bind
		: public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	typedef _Result_type result_type;
	};

template<class _Ret,
	class _BindN>
	class _Bind<_Notforced, _Ret, _BindN>
		: public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	};

template<class _Fty,
	class _Ret,
	class _BindN>
	class _Bind_fty
		: public _Wrap_result_type<(sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes)), _Fty>,
		  public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind_fty(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	};

	
template<class _Result_type,
	class _Ret,
	class _BindN>
	struct is_bind_expression<
		_Bind<_Result_type, _Ret, _BindN> >
	{	
	static const bool value = true;
	};

	
template<bool _Expr,
	int _Nx>
	struct _Binder;

 
 
 
 
 
 

template<>
	struct _Binder<true, 0>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static typename _Arg::
			_MyBind::template _Return<_Barg0 &, _Barg1 &, _Barg2 &, _Barg3 &, _Barg4 &, _Barg5 &, _Barg6 &, _Barg7 &, _Barg8 &, _Barg9 &>::_Type
				_Get(_Arg _Ax, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Ax(_Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9));
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef typename _Arg::
			_MyBind::template _Return<_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9>::_Type
				_Type;
		};
	};

template<>
	struct _Binder<false, 0>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Arg& _Get(_Arg& _Val, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Val);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Arg& _Type;
		};
	};


 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 
  
  
  

 





















































































































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Callable>
	class _Bind0
	{	
public:
	typedef _Callable _MyCallable;
	typedef typename _Callable::_MyTy _MyTy;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy()>::type _Type;
		};

	_Bind0(_MyTy& _Val)
		: _Callee(_Val)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 _Bx0, _Barg1 _Bx1, _Barg2 _Bx2, _Barg3 _Bx3, _Barg4 _Bx4, _Barg5 _Bx5, _Barg6 _Bx6, _Barg7 _Bx7, _Barg8 _Bx8, _Barg9 _Bx9) const
		{	
		return (_Callee.template _ApplyX<_Ret>());
		}

	_MyCallable _Callee;
	};

 
































































#line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy      >
	struct _Result_of0<_Bind<_Result_type, _Ret, _BindTy>      >
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy      >
	struct _Result_of0<_Bind<_Result_type, _Notforced, _BindTy>      >
	{	
	typedef typename _BindTy::
		template _Return<     _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	     > inline
	_Bind<_Ret,
		_Ret,
		_Bind0<_Callable_obj<_Fty>      > >
			bind(_Fty _Val      )
	{	
	typedef _Bind0<_Callable_obj<_Fty>      > _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val      )));
	}

template<class _Fty
	     > inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind0<_Callable_obj<_Fty>      > >
			bind(_Fty _Val      )
	{	
	typedef _Bind0<_Callable_obj<_Fty>      > _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val      )));
	}


template<class _Ret,
	class _Rx
	     
	     > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind0<_Callable_fun<_Rx(__cdecl * const)(    )>      > >
		>::type
			bind(_Rx(__cdecl * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val      )));
	}

template<class _Rx
	     
	     > inline
	_Bind<_Rx,
		_Rx,
		_Bind0<_Callable_fun<_Rx(__cdecl * const)(    )>      > >
			bind(_Rx(__cdecl * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val      )));
	}

 
template<class _Ret,
	class _Rx
	     
	     > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind0<_Callable_fun<_Rx(__stdcall * const)(    )>      > >
		>::type
			bind(_Rx(__stdcall * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val      )));
	}

template<class _Rx
	     
	     > inline
	_Bind<_Rx,
		_Rx,
		_Bind0<_Callable_fun<_Rx(__stdcall * const)(    )>      > >
			bind(_Rx(__stdcall * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val      )));
	}

  
template<class _Ret,
	class _Rx
	     
	     > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind0<_Callable_fun<_Rx(__fastcall * const)(    )>      > >
		>::type
			bind(_Rx(__fastcall * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val      )));
	}

template<class _Rx
	     
	     > inline
	_Bind<_Rx,
		_Rx,
		_Bind0<_Callable_fun<_Rx(__fastcall * const)(    )>      > >
			bind(_Rx(__fastcall * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val      )));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 







































































































































































































































































































































































































































































































































































































































































































#line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  

  

  


 













































































































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 1>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg0& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx0);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg0 _Type;
		};
	};

template<class _Callable,
	class _Arg0    >
	class _Bind1
		: public _Bind0<_Callable    >
	{	
public:
	typedef _Bind1<_Callable , _Arg0    > _Self;
	typedef _Binder<is_bind_expression<_Arg0>::value,
		is_placeholder<_Arg0>::value> _Binder0;
	typedef _Arg0 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind0<_Callable    >::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0)>::type _Type;
		};

	_Bind1(typename _Callable::_MyTy _Val, _Arg0 _Ax0    )
		: _Vx0(_Ax0), _Bind0<_Callable    >(_Val    )
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg0 _Vx0;
	};

	
		namespace placeholders {	
static _Ph<1> _1;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0    >
	struct _Result_of1<_Bind<_Result_type, _Ret, _BindTy> , _Arg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0    >
	struct _Result_of1<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0    >
	{	
	typedef typename _BindTy::
		template _Return<_Arg0     , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0    > inline
	_Bind<_Ret,
		_Ret,
		_Bind1<_Callable_obj<_Fty> , _Arg0    > >
			bind(_Fty _Val , _Arg0 _Ax0    )
	{	
	typedef _Bind1<_Callable_obj<_Fty> , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Fty
	, class _Arg0    > inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind1<_Callable_obj<_Fty> , _Arg0    > >
			bind(_Fty _Val , _Arg0 _Ax0    )
	{	
	typedef _Bind1<_Callable_obj<_Fty> , _Arg0    > _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0    )));
	}


template<class _Ret,
	class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_fun<_Rx(__cdecl * const)(_Farg0    )> , _Arg0    > >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_fun<_Rx(__cdecl * const)(_Farg0    )> , _Arg0    > >
			bind(_Rx(__cdecl * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_fun<_Rx(__stdcall * const)(_Farg0    )> , _Arg0    > >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_fun<_Rx(__stdcall * const)(_Farg0    )> , _Arg0    > >
			bind(_Rx(__stdcall * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_fun<_Rx(__fastcall * const)(_Farg0    )> , _Arg0    > >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_fun<_Rx(__fastcall * const)(_Farg0    )> , _Arg0    > >
			bind(_Rx(__fastcall * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 
template<class _Ret,
	class _Rx,
	class _Farg0,
	class _Arg0> inline
	_Bind<_Ret,
		_Rx,
		_Bind1<_Callable_pmd<_Rx _Farg0::*const, _Farg0>, _Arg0> >
			bind(_Rx _Farg0::* const _Val, _Arg0 _A0)
	{	
	typedef _Callable_pmd<_Rx _Farg0::*const, _Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _A0)));
	}

template<class _Rx,
	class _Farg0,
	class _Arg0> inline
	_Bind<_Notforced,
		_Rx,
		_Bind1<_Callable_pmd<_Rx _Farg0::*const, _Farg0>, _Arg0> >
			bind(_Rx _Farg0::* const _Val, _Arg0 _A0)
	{	
	typedef _Callable_pmd<_Rx _Farg0::*const, _Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0> _MyBind;
	return (_Bind<_Notforced, _Rx, _MyBind>(_MyBind(_Val, _A0)));
	}
 #line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>,
				_Arg0    > >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>,
			_Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const,
			_Farg0>, _Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile,
				_Farg0>, _Arg0    > >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile,
			_Farg0>, _Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile , _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  )
				const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
			_Farg0>, _Arg0    > >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			  ) const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ), _Farg0>,
				_Arg0    > >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ), _Farg0>,
			_Arg0    > >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const,
			_Farg0>, _Arg0    > >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) volatile,
				_Farg0>, _Arg0    > >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) volatile, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) volatile,
			_Farg0>, _Arg0    > >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) volatile , _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const volatile,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(  )
				const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const volatile,
			_Farg0>, _Arg0    > >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			  ) const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}


template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ), _Farg0>,
				_Arg0    > >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ), _Farg0>,
			_Arg0    > >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const,
			_Farg0>, _Arg0    > >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) volatile,
				_Farg0>, _Arg0    > >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) volatile, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) volatile,
			_Farg0>, _Arg0    > >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) volatile , _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const volatile,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(  )
				const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const volatile,
			_Farg0>, _Arg0    > >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			  ) const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ), _Farg0>,
				_Arg0    > >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ), _Farg0>,
			_Arg0    > >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const,
			_Farg0>, _Arg0    > >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) volatile,
				_Farg0>, _Arg0    > >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) volatile, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) volatile,
			_Farg0>, _Arg0    > >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) volatile , _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const volatile,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(  )
				const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const volatile,
			_Farg0>, _Arg0    > >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			  ) const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  


  


  



 


































































































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 2>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg1& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx1);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg1 _Type;
		};
	};

template<class _Callable,
	class _Arg0 ,   class _Arg1>
	class _Bind2
		: public _Bind1<_Callable , _Arg0  >
	{	
public:
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _Self;
	typedef _Binder<is_bind_expression<_Arg1>::value,
		is_placeholder<_Arg1>::value> _Binder1;
	typedef _Arg1 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind1<_Callable , _Arg0  >::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1)>::type _Type;
		};

	_Bind2(typename _Callable::_MyTy _Val, _Arg0 _Ax0 ,   _Arg1 _Ax1)
		: _Vx1(_Ax1), _Bind1<_Callable , _Arg0  >(_Val , _Ax0  )
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg1 _Vx1;
	};

	
		namespace placeholders {	
static _Ph<2> _2;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 ,   class _Arg1>
	struct _Result_of2<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 ,   _Arg1>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 ,   class _Arg1>
	struct _Result_of2<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 ,   _Arg1>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 ,   _Arg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Ret,
		_Ret,
		_Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> >
			bind(_Fty _Val , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Fty
	, class _Arg0 ,   class _Arg1> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> >
			bind(_Fty _Val , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_fun<_Rx(__stdcall * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_fun<_Rx(__stdcall * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_fun<_Rx(__fastcall * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_fun<_Rx(__fastcall * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>,
				_Arg0 ,   _Arg1> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>,
			_Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile , _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1)
				const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			  _Farg1) const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1), _Farg0>,
				_Arg0 ,   _Arg1> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1), _Farg0>,
			_Arg0 ,   _Arg1> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) volatile, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) volatile , _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(  _Farg1)
				const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			  _Farg1) const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1), _Farg0>,
				_Arg0 ,   _Arg1> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1), _Farg0>,
			_Arg0 ,   _Arg1> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) volatile, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) volatile , _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(  _Farg1)
				const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			  _Farg1) const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1), _Farg0>,
				_Arg0 ,   _Arg1> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1), _Farg0>,
			_Arg0 ,   _Arg1> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) volatile, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) volatile , _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(  _Farg1)
				const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			  _Farg1) const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  



  



  



 





















































































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 3>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg2& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx2);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg2 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1 , class _Arg2>
	class _Bind3
		: public _Bind2<_Callable , _Arg0 , _Arg1>
	{	
public:
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _Self;
	typedef _Binder<is_bind_expression<_Arg2>::value,
		is_placeholder<_Arg2>::value> _Binder2;
	typedef _Arg2 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind2<_Callable , _Arg0 , _Arg1>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2)>::type _Type;
		};

	_Bind3(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
		: _Vx2(_Ax2), _Bind2<_Callable , _Arg0 , _Arg1>(_Val , _Ax0 , _Ax1)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg2 _Vx2;
	};

	
		namespace placeholders {	
static _Ph<3> _3;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of3<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of3<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1 , _Arg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Ret,
		_Ret,
		_Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
				_Arg0 , _Arg1 , _Arg2> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
			_Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile , _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1 , _Farg2) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
				_Arg0 , _Arg1 , _Arg2> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
			_Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) volatile , _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1 , _Farg2)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1 , _Farg2) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
				_Arg0 , _Arg1 , _Arg2> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
			_Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) volatile , _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1 , _Farg2)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1 , _Farg2) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
				_Arg0 , _Arg1 , _Arg2> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
			_Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) volatile , _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1 , _Farg2)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1 , _Farg2) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  




  




  



 






































































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 4>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg3& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx3);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg3 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Bind4
		: public _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>
	{	
public:
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _Self;
	typedef _Binder<is_bind_expression<_Arg3>::value,
		is_placeholder<_Arg3>::value> _Binder3;
	typedef _Arg3 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3)>::type _Type;
		};

	_Bind4(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
		: _Vx3(_Ax3), _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>(_Val , _Ax0 , _Ax1, _Ax2)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg3 _Vx3;
	};

	
		namespace placeholders {	
static _Ph<4> _4;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of4<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of4<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2 , _Arg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Ret,
		_Ret,
		_Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
				_Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
			_Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile , _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2 , _Farg3) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
				_Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
			_Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile , _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2 , _Farg3) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
				_Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
			_Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile , _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2 , _Farg3) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
				_Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
			_Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile , _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2 , _Farg3) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  





  





  



 





















































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 5>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg4& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx4);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg4 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Bind5
		: public _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>
	{	
public:
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Self;
	typedef _Binder<is_bind_expression<_Arg4>::value,
		is_placeholder<_Arg4>::value> _Binder4;
	typedef _Arg4 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4)>::type _Type;
		};

	_Bind5(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
		: _Vx4(_Ax4), _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg4 _Vx4;
	};

	
		namespace placeholders {	
static _Ph<5> _5;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of5<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of5<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Ret,
		_Ret,
		_Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3 , _Farg4) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3 , _Farg4) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3 , _Farg4) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3 , _Farg4) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  






  






  



 


































































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 6>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg5& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx5);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg5 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Bind6
		: public _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>
	{	
public:
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Self;
	typedef _Binder<is_bind_expression<_Arg5>::value,
		is_placeholder<_Arg5>::value> _Binder5;
	typedef _Arg5 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5)>::type _Type;
		};

	_Bind6(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
		: _Vx5(_Ax5), _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg5 _Vx5;
	};

	
		namespace placeholders {	
static _Ph<6> _6;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of6<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of6<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Ret,
		_Ret,
		_Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  







  







  



 













































































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 7>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg6& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx6);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg6 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Bind7
		: public _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>
	{	
public:
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Self;
	typedef _Binder<is_bind_expression<_Arg6>::value,
		is_placeholder<_Arg6>::value> _Binder6;
	typedef _Arg6 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6)>::type _Type;
		};

	_Bind7(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
		: _Vx6(_Ax6), _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg6 _Vx6;
	};

	
		namespace placeholders {	
static _Ph<7> _7;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of7<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of7<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 , _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Ret,
		_Ret,
		_Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  








  








  



 






















































#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 8>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg7& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx7);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg7 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Bind8
		: public _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>
	{	
public:
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Self;
	typedef _Binder<is_bind_expression<_Arg7>::value,
		is_placeholder<_Arg7>::value> _Binder7;
	typedef _Arg7 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7)>::type _Type;
		};

	_Bind8(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
		: _Vx7(_Ax7), _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg7 _Vx7;
	};

	
		namespace placeholders {	
static _Ph<8> _8;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of8<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of8<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 , _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Ret,
		_Ret,
		_Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"






















#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  









  









  



 





























#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 9>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg8& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx8);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg8 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Bind9
		: public _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>
	{	
public:
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Self;
	typedef _Binder<is_bind_expression<_Arg8>::value,
		is_placeholder<_Arg8>::value> _Binder8;
	typedef _Arg8 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8)>::type _Type;
		};

	_Bind9(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
		: _Vx8(_Ax8), _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg8 _Vx8;
	};

	
		namespace placeholders {	
static _Ph<9> _9;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of9<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of9<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 , _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Ret,
		_Ret,
		_Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"






















#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
























#line 176 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  










  










  




 

#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 10>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg9& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx9);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg9 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Bind10
		: public _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>
	{	
public:
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Self;
	typedef _Binder<is_bind_expression<_Arg9>::value,
		is_placeholder<_Arg9>::value> _Binder9;
	typedef _Arg9 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9)>::type _Type;
		};

	_Bind10(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
		: _Vx9(_Ax9), _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder9::_Get(this->_Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder9::_Get(this->_Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg9 _Vx9;
	};

	
		namespace placeholders {	
static _Ph<10> _10;
		}	
 #line 303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of10<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of10<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 >::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Ret,
		_Ret,
		_Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

 
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__stdcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__stdcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

  
template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__fastcall * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__fastcall * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}
  #line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 431 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 































 


























#line 492 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
				bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
		bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__cdecl _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		bind(_Rx(__cdecl _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__cdecl _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
				bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
		bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__stdcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		bind(_Rx(__stdcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__stdcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


  
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
				bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
		bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__fastcall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		bind(_Rx(__fastcall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__fastcall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}
  #line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
 #line 1036 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


 






































































































































 #line 1174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 481 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
	}	

 
using tr1::bad_function_call;
using tr1::bind;
using tr1::cref;
using tr1::function;
using tr1::is_bind_expression;
using tr1::is_placeholder;
using tr1::mem_fn;
using tr1::ref;
using tr1::reference_wrapper;
using tr1::result_of;
using tr1::swap;

namespace placeholders {
	using namespace tr1::placeholders;
	}	
 #line 500 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
}
 #line 502 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 509 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
#line 510 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\functional"





#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash_fwd.hpp"





#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"













#pragma once
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"








































#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"





#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 78 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 113 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 123 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 143 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 148 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 158 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 163 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 168 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"





#line 174 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 179 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 199 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 204 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"





#line 215 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 220 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 225 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"




#line 230 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"





























#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"





#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"

#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"

namespace boost
{
    template <class T> struct hash;



#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"
    template <class T> void hash_combine(std::size_t& seed, T const& v);
#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"

    template <class It> std::size_t hash_range(It, It);
    template <class It> void hash_range(std::size_t&, It, It);




#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"
}

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash_fwd.hpp"
#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash_fwd.hpp"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"

namespace boost
{
    template <class K,
        class T,
        class H = hash<K>,
        class P = std::equal_to<K>,
        class A = std::allocator<std::pair<const K, T> > >
    class unordered_map;
    template <class K, class T, class H, class P, class A>
    inline bool operator==(unordered_map<K, T, H, P, A> const&,
        unordered_map<K, T, H, P, A> const&);
    template <class K, class T, class H, class P, class A>
    inline bool operator!=(unordered_map<K, T, H, P, A> const&,
        unordered_map<K, T, H, P, A> const&);
    template <class K, class T, class H, class P, class A>
    inline void swap(unordered_map<K, T, H, P, A>&,
            unordered_map<K, T, H, P, A>&);

    template <class K,
        class T,
        class H = hash<K>,
        class P = std::equal_to<K>,
        class A = std::allocator<std::pair<const K, T> > >
    class unordered_multimap;
    template <class K, class T, class H, class P, class A>
    inline bool operator==(unordered_multimap<K, T, H, P, A> const&,
        unordered_multimap<K, T, H, P, A> const&);
    template <class K, class T, class H, class P, class A>
    inline bool operator!=(unordered_multimap<K, T, H, P, A> const&,
        unordered_multimap<K, T, H, P, A> const&);
    template <class K, class T, class H, class P, class A>
    inline void swap(unordered_multimap<K, T, H, P, A>&,
            unordered_multimap<K, T, H, P, A>&);
}

#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map_fwd.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash.hpp"





#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"









#pragma once
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"








#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/cmath.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/cmath.hpp"






#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/cmath.hpp"

#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/cmath.hpp"
#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"


#pragma once
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"








namespace boost {
    namespace hash_detail {

        
    
        struct not_found {
            
            

            inline operator float() const { return 0; }
            inline operator long double() const { return 0; }
        };
          
        

        template <typename T> struct is;
        template <> struct is<float> { char x[10]; };
        template <> struct is<double> { char x[20]; };
        template <> struct is<long double> { char x[30]; };
        template <> struct is<boost::hash_detail::not_found> { char x[40]; };
            
        

        template <typename T> is<T> float_type(T);

        
        
        
        
        template <typename Float> struct call_ldexp
        {
            typedef double float_type;
            
            inline double operator()(double a, int b) const
            {
                using namespace std;
                return ldexp(a, b);
            }
        };

        
        
        

        template <typename Float> struct call_frexp
        {
            typedef double float_type;
            
            inline double operator()(double a, int* b) const
            {
                using namespace std;
                return frexp(a, b);
            }
        };
    }
}
            







namespace boost_hash_detect_float_functions {
    template <class Float> boost::hash_detail::not_found ldexp(Float, int);
    template <class Float> boost::hash_detail::not_found frexp(Float, int*);    
}
































































































#line 188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
namespace boost_hash_detect_float_functions { template <class Float> boost::hash_detail::not_found ldexpf(Float, int); } namespace boost { namespace hash_detail { namespace ldexpf_detect { using namespace std; using namespace boost_hash_detect_float_functions; struct check { static float x; static int y; static const bool cpp = sizeof(float_type(ldexp(x,y))) == sizeof(is<float>); static const bool c99 = sizeof(float_type(ldexpf(x,y))) == sizeof(is<float>); }; } template <bool x> struct call_c99_ldexpf : boost::hash_detail::call_ldexp<double> {}; template <> struct call_c99_ldexpf<true> { typedef float float_type; template <typename T> inline float operator()(float a, T b) const { using namespace std; return ldexpf(a, b); } }; template <bool x> struct call_cpp_ldexpf : call_c99_ldexpf< ::boost::hash_detail::ldexpf_detect::check::c99 > {}; template <> struct call_cpp_ldexpf<true> { typedef float float_type; template <typename T> inline float operator()(float a, T b) const { using namespace std; return ldexp(a, b); } }; template <> struct call_ldexp<float> : call_cpp_ldexpf< ::boost::hash_detail::ldexpf_detect::check::cpp > {}; } }
#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"



#line 194 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
namespace boost_hash_detect_float_functions { template <class Float> boost::hash_detail::not_found ldexpl(Float, int); } namespace boost { namespace hash_detail { namespace ldexpl_detect { using namespace std; using namespace boost_hash_detect_float_functions; struct check { static long double x; static int y; static const bool cpp = sizeof(float_type(ldexp(x,y))) == sizeof(is<long double>); static const bool c99 = sizeof(float_type(ldexpl(x,y))) == sizeof(is<long double>); }; } template <bool x> struct call_c99_ldexpl : boost::hash_detail::call_ldexp<double> {}; template <> struct call_c99_ldexpl<true> { typedef long double float_type; template <typename T> inline long double operator()(long double a, T b) const { using namespace std; return ldexpl(a, b); } }; template <bool x> struct call_cpp_ldexpl : call_c99_ldexpl< ::boost::hash_detail::ldexpl_detect::check::c99 > {}; template <> struct call_cpp_ldexpl<true> { typedef long double float_type; template <typename T> inline long double operator()(long double a, T b) const { using namespace std; return ldexp(a, b); } }; template <> struct call_ldexp<long double> : call_cpp_ldexpl< ::boost::hash_detail::ldexpl_detect::check::cpp > {}; } }
#line 196 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"



#line 200 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
namespace boost_hash_detect_float_functions { template <class Float> boost::hash_detail::not_found frexpf(Float, int*); } namespace boost { namespace hash_detail { namespace frexpf_detect { using namespace std; using namespace boost_hash_detect_float_functions; struct check { static float x; static int* y; static const bool cpp = sizeof(float_type(frexp(x,y))) == sizeof(is<float>); static const bool c99 = sizeof(float_type(frexpf(x,y))) == sizeof(is<float>); }; } template <bool x> struct call_c99_frexpf : boost::hash_detail::call_frexp<double> {}; template <> struct call_c99_frexpf<true> { typedef float float_type; template <typename T> inline float operator()(float a, T b) const { using namespace std; return frexpf(a, b); } }; template <bool x> struct call_cpp_frexpf : call_c99_frexpf< ::boost::hash_detail::frexpf_detect::check::c99 > {}; template <> struct call_cpp_frexpf<true> { typedef float float_type; template <typename T> inline float operator()(float a, T b) const { using namespace std; return frexp(a, b); } }; template <> struct call_frexp<float> : call_cpp_frexpf< ::boost::hash_detail::frexpf_detect::check::cpp > {}; } }
#line 202 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"



#line 206 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
namespace boost_hash_detect_float_functions { template <class Float> boost::hash_detail::not_found frexpl(Float, int*); } namespace boost { namespace hash_detail { namespace frexpl_detect { using namespace std; using namespace boost_hash_detect_float_functions; struct check { static long double x; static int* y; static const bool cpp = sizeof(float_type(frexp(x,y))) == sizeof(is<long double>); static const bool c99 = sizeof(float_type(frexpl(x,y))) == sizeof(is<long double>); }; } template <bool x> struct call_c99_frexpl : boost::hash_detail::call_frexp<double> {}; template <> struct call_c99_frexpl<true> { typedef long double float_type; template <typename T> inline long double operator()(long double a, T b) const { using namespace std; return frexpl(a, b); } }; template <bool x> struct call_cpp_frexpl : call_c99_frexpl< ::boost::hash_detail::frexpl_detect::check::c99 > {}; template <> struct call_cpp_frexpl<true> { typedef long double float_type; template <typename T> inline long double operator()(long double a, T b) const { using namespace std; return frexp(a, b); } }; template <> struct call_frexp<long double> : call_cpp_frexpl< ::boost::hash_detail::frexpl_detect::check::cpp > {}; } }
#line 208 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"





namespace boost
{
    namespace hash_detail
    {
        template <typename Float1, typename Float2>
        struct select_hash_type_impl {
            typedef double type;
        };

        template <>
        struct select_hash_type_impl<float, float> {
            typedef float type;
        };

        template <>
        struct select_hash_type_impl<long double, long double> {
            typedef long double type;
        };


        
        
        
        
             
        template <typename Float>
        struct select_hash_type : select_hash_type_impl<
                typename call_ldexp<Float>::float_type,
                typename call_frexp<Float>::float_type
            > {};            
    }
}

#line 247 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/float_functions.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"












#pragma once
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"





#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"

























































































































#line 144 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"

#line 146 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"







#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"

namespace boost
{
    namespace hash_detail
    {
        template <class T>
        struct limits : std::numeric_limits<T> {};

























#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"
    }
}

#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/limits.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"


















































































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"

































#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"



















#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"

#pragma once













		
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;

typedef char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;

typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;



















typedef _Longlong int64_t;
typedef _ULonglong uint64_t;

typedef _Longlong int_least64_t;
typedef _ULonglong uint_least64_t;

typedef _Longlong int_fast64_t;
typedef _ULonglong uint_fast64_t;

typedef _Longlong intmax_t;
typedef _ULonglong uintmax_t;

		

































 




 



#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"













 
 
#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"


















 
 
 

 
 
 

 
 
 

 
 
 






#line 171 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"
#line 172 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"

 




















#line 195 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdint.h"





#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"







#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"

#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"
































namespace boost
{

  using ::int8_t;             
  using ::int_least8_t;       
  using ::int_fast8_t;        
  using ::uint8_t;            
  using ::uint_least8_t;      
  using ::uint_fast8_t;       
                     
  using ::int16_t;            
  using ::int_least16_t;      
  using ::int_fast16_t;       
  using ::uint16_t;           
  using ::uint_least16_t;     
  using ::uint_fast16_t;      
                     
  using ::int32_t;            
  using ::int_least32_t;      
  using ::int_fast32_t;       
  using ::uint32_t;           
  using ::uint_least32_t;     
  using ::uint_fast32_t;      
                     


  using ::int64_t;            
  using ::int_least64_t;      
  using ::int_fast64_t;       
  using ::uint64_t;           
  using ::uint_least64_t;     
  using ::uint_fast64_t;      
                     
#line 134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"

  using ::intmax_t;      
  using ::uintmax_t;     

} 




























































































































































































































#line 360 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"

#line 362 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"













































































































































#line 505 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"




#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"


namespace boost
{







     typedef boost::uintmax_t static_min_max_unsigned_type;
     typedef boost::intmax_t  static_min_max_signed_type;
     typedef boost::uintmax_t static_log2_argument_type;
     typedef int              static_log2_result_type;
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"








template < class T >
    class integer_traits;

template <  >
    class integer_traits< bool >;

template <  >
    class integer_traits< char >;

template <  >
    class integer_traits< signed char >;

template <  >
    class integer_traits< unsigned char >;


template <  >
    class integer_traits< wchar_t >;
#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"

template <  >
    class integer_traits< short >;

template <  >
    class integer_traits< unsigned short >;

template <  >
    class integer_traits< int >;

template <  >
    class integer_traits< unsigned int >;

template <  >
    class integer_traits< long >;

template <  >
    class integer_traits< unsigned long >;


template <  >
class integer_traits<  ::boost::long_long_type>;

template <  >
class integer_traits<  ::boost::ulong_long_type >;






#line 93 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"




template < typename LeastInt >
    struct int_fast_t;

template< int Bits >
    struct int_t;

template< int Bits >
    struct uint_t;


    template< boost::long_long_type MaxValue >   


#line 111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
    struct int_max_value_t;


  template< boost::long_long_type MinValue >   


#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
    struct int_min_value_t;


  template< boost::ulong_long_type MaxValue >   


#line 125 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
    struct uint_value_t;




template < std::size_t Bit >
    struct high_bit_mask_t;

template < std::size_t Bits >
    struct low_bits_mask_t;

template <  >
    struct low_bits_mask_t< ::std::numeric_limits<unsigned char>::digits >;



template <static_log2_argument_type Value >
    struct static_log2;

template <> struct static_log2<0u>;




template <static_min_max_signed_type Value1, static_min_max_signed_type Value2>
    struct static_signed_min;

template <static_min_max_signed_type Value1, static_min_max_signed_type Value2>
    struct static_signed_max;

template <static_min_max_unsigned_type Value1, static_min_max_unsigned_type Value2>
    struct static_unsigned_min;

template <static_min_max_unsigned_type Value1, static_min_max_unsigned_type Value2>
    struct static_unsigned_max;

}  


#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer_fwd.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"

namespace boost {

 namespace detail {

     namespace static_log2_impl {

     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

     typedef boost::static_log2_argument_type argument_type;
     typedef boost::static_log2_result_type result_type;

     template <result_type n>
     struct choose_initial_n {

         static const bool c = (argument_type(1) << n << n) != 0;
         static const result_type value = !c*n + choose_initial_n<2*c*n>::value;
#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"

     };

     template <>
     struct choose_initial_n<0> {
         static const result_type value = 0;
     };



     
     const result_type n_zero = 16;
     const result_type initial_n = choose_initial_n<n_zero>::value;

     
     
     
     
     
     
     
     
     
     
     
     
     
     

     template <argument_type x, result_type n = initial_n>
     struct static_log2_impl {

         static const bool c = (x >> n) > 0; 
         static const result_type value = c*n + (static_log2_impl< (x>>c*n), n/2 >::value);
#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"

     };

     template <>
     struct static_log2_impl<1, 0> {
        static const result_type value = 0;
     };

     }
 } 



 
 
 

 template <static_log2_argument_type x>
 struct static_log2 {

     static const static_log2_result_type value = detail::static_log2_impl::static_log2_impl<x>::value;
#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"

 };


 template <>
 struct static_log2<0> { };

}



#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"






















































































































































































































































































































































































































































































































#line 505 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/cstdint.hpp"




#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"


































#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"










extern "C" {
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"

 void __cdecl _wassert(   const wchar_t * _Message,    const wchar_t *_File,   unsigned _Line);


}
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
  
    
    
    #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

#pragma once







#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

#pragma once





#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {




		
class logic_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 154 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class runtime_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 210 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 238 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 266 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 272 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"





#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

#pragma once


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"













#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"


extern "C" {
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"











































#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"










                                













  int __cdecl _isctype(  int _C,   int _Type);
  int __cdecl _isctype_l(  int _C,   int _Type,    _locale_t _Locale);
   int __cdecl isalpha(  int _C);
  int __cdecl _isalpha_l(  int _C,    _locale_t _Locale);
   int __cdecl isupper(  int _C);
  int __cdecl _isupper_l(  int _C,    _locale_t _Locale);
   int __cdecl islower(  int _C);
  int __cdecl _islower_l(  int _C,    _locale_t _Locale);
   int __cdecl isdigit(  int _C);
  int __cdecl _isdigit_l(  int _C,    _locale_t _Locale);
  int __cdecl isxdigit(  int _C);
  int __cdecl _isxdigit_l(  int _C,    _locale_t _Locale);
   int __cdecl isspace(  int _C);
  int __cdecl _isspace_l(  int _C,    _locale_t _Locale);
  int __cdecl ispunct(  int _C);
  int __cdecl _ispunct_l(  int _C,    _locale_t _Locale);
   int __cdecl isalnum(  int _C);
  int __cdecl _isalnum_l(  int _C,    _locale_t _Locale);
  int __cdecl isprint(  int _C);
  int __cdecl _isprint_l(  int _C,    _locale_t _Locale);
  int __cdecl isgraph(  int _C);
  int __cdecl _isgraph_l(  int _C,    _locale_t _Locale);
  int __cdecl iscntrl(  int _C);
  int __cdecl _iscntrl_l(  int _C,    _locale_t _Locale);
   int __cdecl toupper(  int _C);
   int __cdecl tolower(  int _C);
   int __cdecl _tolower(  int _C);
  int __cdecl _tolower_l(  int _C,    _locale_t _Locale);
   int __cdecl _toupper(  int _C);
  int __cdecl _toupper_l(  int _C,    _locale_t _Locale);
  int __cdecl __isascii(  int _C);
  int __cdecl __toascii(  int _C);
  int __cdecl __iscsymf(  int _C);
  int __cdecl __iscsym(  int _C);

#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"



















































































#line 212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"












































#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"






#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"





























































































#line 358 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"
















#line 375 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"

#line 377 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"


}
#line 381 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"

#line 383 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"
#line 6 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"













#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"





#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

























struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };

#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"




















#line 106 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

  int __cdecl _configthreadlocale(  int _Flag);
  char * __cdecl setlocale(  int _Category,    const char * _Locale);
  struct lconv * __cdecl localeconv(void);
  _locale_t __cdecl _get_current_locale(void);
  _locale_t __cdecl _create_locale(  int _Category,    const char * _Locale);
 void __cdecl _free_locale(   _locale_t _Locale);


 __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details."))  _locale_t __cdecl __get_current_locale(void);
 __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details."))  _locale_t __cdecl __create_locale(  int _Category,    const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details."))  void __cdecl __free_locale(   _locale_t _Locale);











}
#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

#pragma pack(pop)

#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"
#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"





#pragma pack(push,8)



extern "C" {
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

		











		



















typedef struct _Collvec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Cvtvec;

		
 _Collvec __cdecl _Getcoll();
 _Ctypevec __cdecl _Getctype();

 _Cvtvec __cdecl _Getcvt();

 int __cdecl _Getdateorder();





 int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *);
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

 float __cdecl _Stof(const char *,     char **, long);
 double __cdecl _Stod(const char *,     char **, long);
 long double __cdecl _Stold(const char *,     char **, 
  long);
 int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
 size_t __cdecl _Strxfrm(
      char * _String1, 
     char * _End1, const char *, const char *, const _Collvec *);
 int __cdecl _Tolower(int, const _Ctypevec *);
 int __cdecl _Toupper(int, const _Ctypevec *);

 int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *, const _Cvtvec *);

 int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
 size_t __cdecl _Wcsxfrm(
      wchar_t *_String1, 
     wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

 short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
 const wchar_t * __cdecl _Getwctypes(const wchar_t *, const wchar_t *,
	short*, const _Ctypevec*);
 wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
 wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

}
#line 114 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"


extern "C" {
 void *__cdecl _Gettnames();
 char *__cdecl _Getdays();
 char *__cdecl _Getmonths();
 size_t __cdecl _Strftime(
    char *,   size_t _Maxsize, 
      const char *,   const struct tm *, void *);
}





 _locale_t __cdecl _GetLocaleForCP(unsigned int);
#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

#pragma pack(pop)

#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable:4412)

namespace std {

		
class  _Timevec
	{	
public:
	 _Timevec(void *_Ptr = 0)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec()
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = 0;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		

#pragma warning(push)
#pragma warning(disable: 4412)

class  _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

    static  void __cdecl _Locinfo_ctor(_Locinfo *,
		const char *);
    static  void __cdecl _Locinfo_ctor(_Locinfo *, int,
		const char *);
    static  void __cdecl _Locinfo_dtor(_Locinfo *);
    static  _Locinfo& __cdecl _Locinfo_Addcats(_Locinfo *, int,
		const char *);

	 _Locinfo(const char *_Pch = "C")

        : _Lock(0)
#line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
        {	
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Pch);
        }

	 _Locinfo(int _Cat, const char *_Pch)

        : _Lock(0)
#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
        {	
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Cat, _Pch);
        }

	 ~_Locinfo()
        {
        _Locinfo_dtor(this);
        }


	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		return _Locinfo_Addcats(this, _Cat, _Pch);
		}


	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();
		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();
		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return ::_Getdateorder();
		}

private:









	_Lockit _Lock;	
#line 191 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};
#pragma warning(pop)

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	size_t _Count = _Last2 - _First2;
	if (_Count <= (size_t)(_Last1 - _First1))
		::memcpy_s((_First1), ((_Last1 - _First1) * sizeof(_Elem)), (_First2), (_Count * sizeof (_Elem)));
#line 239 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm(
		    char *_First1, 
		   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm(
		    wchar_t *_First1, 
		   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 267 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
#line 268 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"





#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 
  
 
  

namespace std {
struct _DebugHeapTag_t
	{	
	int _Type;
	};
}

		

 










































#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"
   
   
   
  #line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"

 
 

 #pragma warning(pop)
 #pragma pack(pop)


#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"
#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"





#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4412)

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << (7)) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);

class  locale
	: public _Locbase<int>
	{	
public:
	typedef int category;

			
	class  id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						_Id = ++_Id_cnt;
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

		 id(const id&);	
		id&  operator=(const id&);	
		};

	class _Locimp;

			
	class facet
		{	
		friend class locale;
		friend class _Locimp;

	public:
		 static size_t __cdecl _Getcat(const facet ** = 0,
			const locale * = 0)
			{	
			return ((size_t)(-1));
			}

		 void  _Incref()
			{	
			{ ::std:: _Lockit _Lock(0);
				if (_Refs < (size_t)(-1))
					++_Refs;
			}
			}

		 facet * _Decref()
			{	
			{ ::std:: _Lockit _Lock(0);
				if (0 < _Refs && _Refs < (size_t)(-1))
					--_Refs;
				return (_Refs == 0 ? this : 0);
			}
			}

		void  _Register()
			{	
 


#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
			_Facet_Register(this);
 #line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
			}

  






















#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"


		 virtual  ~facet()
			{	
			}

	protected:
		 explicit  facet(size_t _Initrefs = 0)
			: _Refs(_Initrefs)
			{	
			}

	private:
		size_t _Refs;	

		 facet(const facet&);	

		facet&  operator=(const facet&);	

 


#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		static void __cdecl _Facet_Register(facet *);
 #line 186 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		};

			
 #pragma warning(push)
 #pragma warning(disable: 4275)

	class  _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp()
		{	
		_Locimp_dtor(this);
		}

	private:
		static  void __cdecl _Locimp_dtor(_Locimp *);
		static  void __cdecl _Locimp_Addfac(_Locimp *, facet *,
			size_t);	
		static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp&);

		friend class locale;

		 _Locimp(bool _Transparent = false)
			: locale::facet(1), _Facetvec(0), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 239 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

private:
		_Locimp&  operator=(const _Locimp&);	
		};

 #pragma warning(pop)

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const ::std:: collate<_Elem>& _Coll_fac =
			::std:: use_facet<::std:: collate<_Elem> >(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&::std:: use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = new _Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = 0;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != 0)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			if (_Facet::_Getcat() != (size_t)(-1))
				{	
				_Ptr->_Catmask = 0;
				_Ptr->_Name = "*";
				}
			}
		}

	locale(_Uninitialized)
		{	
		}

	locale(const locale& _Right) throw ()
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() throw ()
		: _Ptr(_Init())
		{	
		_Getgloballocale()->_Incref();
		}

	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	explicit locale(const char *_Locname,
		category _Cat = all) 	
		: _Ptr(new _Locimp)
		{	
		try {
		_Init();
		{ _Locinfo _Lobj(_Cat, _Locname);
			if (_Badname(_Lobj))
				_Xruntime_error("bad locale name");
			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			bool _Hadname = !_Badname(_Lobj);
			_Lobj._Addcats(_Cat, _Locname);

			if (_Hadname && _Badname(_Lobj))
				_Xruntime_error("bad locale name");
			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

 
	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(new _Locimp)
		{	
		try {
		_Init();
		_Locinfo _Lobj(_Cat, _Str.c_str());

		if (_Badname(_Lobj))
			_Xruntime_error("bad locale name");
		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
		bool _Hadname = !_Badname(_Lobj);
		_Lobj._Addcats(_Cat, _Str.c_str());

		if (_Hadname && _Badname(_Lobj))
			_Xruntime_error("bad locale name");
		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}
 #line 406 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"


	~locale() throw ()
		{	
		if (_Ptr != 0)
			delete (_Ptr->_Decref());
		}

	locale& operator=(const locale& _Right) throw ()
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete (_Ptr->_Decref());
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}

	string name() const
		{	
		return (_Ptr->_Name.c_str());
		}

	const char *c_str() const
		{	
		return (_Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : 0;	
		if (_Facptr != 0 || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr = _Getgloballocale();
			return (_Id < _Ptr->_Facetcount
				? _Ptr->_Facetvec[_Id]	
				: 0);	
			}
		}

	bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
		}

	bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static  const locale& __cdecl classic();	

	static  locale __cdecl global(const locale&);	

	static  locale __cdecl empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

    static  _Locimp *__cdecl _Init();	
	static  _Locimp *__cdecl _Getgloballocale();
	static  void __cdecl _Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		
template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = 0;

  

  


template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf != 0)
			;	
		else if (_Psave != 0)
			_Pf = _Psave;	
		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

 

			throw bad_cast();	

 

#line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		else
			{	
			_Pf = _Psave;
			_Facetptr<_Facet>::_Psave = _Psave;

			locale::facet *_Pfmod = (_Facet *)_Psave;
			_Pfmod->_Incref();
			_Pfmod->_Register();
			}

		return ((const _Facet&)(*_Pf));	
	}
	}

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
				;	

			if (_Str[_Field] != '\0')
				_Off += _Str[_Field];	
			else if (_Ptr[_Off += _Column] == _Ptr[0]
				|| _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
			else
				_Prefix = true;	
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		



template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 617 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {0};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {0};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 650 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;
	_Elem *_Ptrdest = new _Elem[_Count];

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 #pragma warning(pop)

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
 #pragma warning(pop)

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 736 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

class  codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const throw ()
		{	
		return (do_always_noconv());
		}

	int  max_length() const throw ()
		{	
		return (do_max_length());
		}

	int  encoding() const throw ()
		{	
		return (do_encoding());
		}

	 ~codecvt_base()
		{	
		}

protected:
	virtual bool  do_always_noconv() const throw ()
		{	
		return (true);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (1);
		}

	virtual int  do_encoding() const throw ()
		{	
		return (1);	
		}
	};

 #pragma warning(pop)

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		return (noconv);	
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		return (noconv);	
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (noconv);	
		}

	virtual int  do_length(const _Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return ((int)(_Count < (size_t)(_Last1 - _First1)
			? _Count : _Last1 - _First1));	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;

 




















































































































































































































































































































































































































































































































































































































#line 1500 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<>
	class  codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
 



#line 1686 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
 #line 1720 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class  codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 1966 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 1986 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~codecvt_byname()
		{	
		}
	};

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct  ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x4|0x2|0x1|0x100, alpha = 0x2|0x1|0x100,
		cntrl = 0x20, digit = 0x4, graph = 0x4|0x2|0x10|0x1|0x100,
		lower = 0x2, print = 0x4|0x2|0x10|0x40|0x1|0x100|0x80,
		punct = 0x10, space = 0x8|0x40|0x000, upper = 0x1,
		xdigit = 0x80};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base()
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			return ('\0');
		else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
			return (_Dflt);
		else
			return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem>
	locale::id ctype<_Elem>::id;

		
template<>
	class  ctype<char>
	: public ctype_base
	{	
	typedef ctype<char> _Myt;

public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = 0,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		if (_Table != 0)
			{	
			_Tidy();
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const throw ()
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() throw ()
		{	
		const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
		return (_Ctype_fac.table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype()
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] (void *)_Ctype._Table;
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class  ctype<wchar_t>
	: public ctype_base
	{	
	typedef ctype<wchar_t> _Myt;

public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class  ctype<unsigned short>
	: public ctype_base
	{	
	typedef ctype<unsigned short> _Myt;

public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 2921 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 2939 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~ctype_byname()
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 2963 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~ctype_byname()
		{	
		}
	};

 



#line 2975 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 2983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
#line 2984 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"






#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 
 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

#pragma once



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"

#pragma once











 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"















#pragma once




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"


extern "C" {
#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"



























































#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
















































}
#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"

#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"





#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"



 #pragma pack(push,8)
 #pragma warning(push,3)

 

 

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

namespace std {
		
	namespace errc {
enum errc {	
	address_family_not_supported = 102,
	address_in_use = 100,
	address_not_available = 101,
	already_connected = 113,
	argument_list_too_long = 7,
	argument_out_of_domain = 33,
	bad_address = 14,
	bad_file_descriptor = 9,
	bad_message = 104,
	broken_pipe = 32,
	connection_aborted = 106,
	connection_already_in_progress = 103,
	connection_refused = 107,
	connection_reset = 108,
	cross_device_link = 18,
	destination_address_required = 109,
	device_or_resource_busy = 16,
	directory_not_empty = 41,
	executable_format_error = 8,
	file_exists = 17,
	file_too_large = 27,
	filename_too_long = 38,
	function_not_supported = 40,
	host_unreachable = 110,
	identifier_removed = 111,
	illegal_byte_sequence = 42,
	inappropriate_io_control_operation = 25,
	interrupted = 4,
	invalid_argument = 22,
	invalid_seek = 29,
	io_error = 5,
	is_a_directory = 21,
	message_size = 115,
	network_down = 116,
	network_reset = 117,
	network_unreachable = 118,
	no_buffer_space = 119,
	no_child_process = 10,
	no_link = 121,
	no_lock_available = 39,
	no_message_available = 120,
	no_message = 122,
	no_protocol_option = 123,
	no_space_on_device = 28,
	no_stream_resources = 124,
	no_such_device_or_address = 6,
	no_such_device = 19,
	no_such_file_or_directory = 2,
	no_such_process = 3,
	not_a_directory = 20,
	not_a_socket = 128,
	not_a_stream = 125,
	not_connected = 126,
	not_enough_memory = 12,
	not_supported = 129,
	operation_canceled = 105,
	operation_in_progress = 112,
	operation_not_permitted = 1,
	operation_not_supported = 130,
	operation_would_block = 140,
	owner_dead = 133,
	permission_denied = 13,
	protocol_error = 134,
	protocol_not_supported = 135,
	read_only_file_system = 30,
	resource_deadlock_would_occur = 36,
	resource_unavailable_try_again = 11,
	result_out_of_range = 34,
	state_not_recoverable = 127,
	stream_timeout = 137,
	text_file_busy = 139,
	timed_out = 138,
	too_many_files_open_in_system = 23,
	too_many_files_open = 24,
	too_many_links = 31,
	too_many_synbolic_link_levels = 114,
	value_too_large = 132,
	wrong_protocol_type = 136
	};
	}	

typedef errc::errc generic_errno;

		
template<class _Enum>
	struct is_error_code_enum
		: public tr1::false_type
	{	
	};

		
template<class _Enum>
	struct is_error_condition_enum
		: public tr1::false_type
	{	
	};

template<>
	struct is_error_condition_enum<generic_errno>
		: public tr1::true_type
	{	
	};

		
	namespace io_errc {
enum io_errc {	
	stream = 1
	};
	}	

typedef io_errc::io_errc _Io_errc;

		
class error_code;
class error_condition;
class error_category;

 const error_category& __cdecl generic_category();
 const error_category& __cdecl iostream_category();
 const error_category& __cdecl system_category();

class error_category
	{	
public:
	typedef int value_type;

	error_category()
		{	
		}

	virtual ~error_category()
		{	
		}

	virtual const char *name() const = 0;

	virtual string message(value_type _Errval) const = 0;

	virtual error_condition default_error_condition(value_type _Errval) const;

	virtual bool equivalent(value_type _Errval,
		const error_condition& _Cond) const;

	virtual bool equivalent(const error_code& _Code,
		value_type _Errval) const;

	bool operator==(const error_category& _Right) const
		{	
		return (this == &_Right);
		}

	bool operator!=(const error_category& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_category& _Right) const
		{	
		return (this < &_Right);
		}

private:
	error_category(const error_category&);	

	error_category& operator=(const error_category&);	
	};

		
class error_code
	{	
public:
	typedef int value_type;

	error_code()
		: _Myval(0),
			_Mycat(&system_category())
		{	
		}

	error_code(value_type _Val, const error_category& _Cat)
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum>
		error_code(_Enum _Errcode,
			typename tr1::enable_if<is_error_code_enum<_Enum>::value,
				error_code>::type * = 0)
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(value_type _Val, const error_category& _Cat)
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename tr1::enable_if<is_error_code_enum<_Enum>::value,
			error_code>::type& operator=(_Enum _Errcode)
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear()
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	value_type value() const
		{	
		return (_Myval);
		}

	const error_category& category() const
		{	
		return (*_Mycat);
		}

	error_condition default_error_condition() const;

	string message() const
		{	
		return (category().message(value()));
		}

	operator ::std:: _Bool_type() const
		{	
		return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	bool operator !() const
		{	
		return (value() == 0);
		}

	bool operator==(const error_code& _Right) const
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_code& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_code& _Right) const
		{	
		return (category() < _Right.category()
			|| category() == _Right.category()
				&& value() < _Right.value());
		}

private:
	value_type _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	typedef int value_type;

	error_condition()
		: _Myval(0),
			_Mycat(&generic_category())
		{	
		}

	error_condition(value_type _Val, const error_category& _Cat)
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum>
		error_condition(_Enum _Errcode,
			typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
				error_condition>::type * = 0)
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(value_type _Val, const error_category& _Cat)
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
			error_condition>::type& operator=(_Enum _Errcode)
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear()
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	value_type value() const
		{	
		return (_Myval);
		}

	const error_category& category() const
		{	
		return (*_Mycat);
		}

	string message() const
		{	
		return (category().message(value()));
		}

	operator ::std:: _Bool_type() const
		{	
		return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	bool operator !() const
		{	
		return (value() == 0);
		}

	bool operator==(const error_condition& _Right) const
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_condition& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_condition& _Right) const
		{	
		return (category() < _Right.category()
			|| category() == _Right.category()
				&& value() < _Right.value());
		}

private:
	value_type _Myval;	
	const error_category *_Mycat;	
	};

		
inline error_condition
	error_category::default_error_condition(value_type _Errval) const
	{	
	return (error_condition(_Errval, *this));
	}

inline bool
	error_category::equivalent(value_type _Errval,
		const error_condition& _Cond) const
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

inline bool
	error_category::equivalent(const error_code& _Code,
		value_type _Errval) const
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
inline error_condition error_code::default_error_condition() const
	{	
	return (category().default_error_condition(value()));
	}

		
inline bool operator==(
	const error_code& _Left,
	const error_condition& _Right)
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_code& _Right)
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

		
inline bool operator!=(
	const error_code& _Left,
	const error_condition& _Right)
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_code& _Right)
	{	
	return (!(_Left == _Right));
	}

		
inline error_code make_error_code(generic_errno _Errno)
	{	
	return (error_code(_Errno, generic_category()));
	}

inline error_code make_error_code(_Io_errc _Errno)
	{	
	return (error_code(_Errno, iostream_category()));
	}

		
inline error_condition make_error_condition(generic_errno _Errno)
	{	
	return (error_condition(_Errno, generic_category()));
	}

inline error_condition make_error_condition(_Io_errc _Errno)
	{	
	return (error_condition(_Errno, iostream_category()));
	}

		
template<class _Kty>
	class hash;

template<>
	class hash<::std:: error_code>
		: public unary_function<error_code, size_t>
	{	
public:
	typedef ::std:: error_code _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

template<>
	class hash<::std:: error_condition>
		: public unary_function<error_condition, size_t>
	{	
public:
	typedef ::std:: error_condition _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

		
class system_error
	: public runtime_error
	{	
public:
	explicit system_error(error_code _Errcode,
		const string& _Message = "")
		: runtime_error(_Message), _Mycode(_Errcode)
		{	
		_Makestr();
		}

	system_error(error_code _Errcode,
		const char *_Message)
		: runtime_error(_Message), _Mycode(_Errcode)
		{	
		_Makestr();
		}

	system_error(error_code::value_type _Errval,
		const error_category& _Errcat,
		const string& _Message = "")
		: runtime_error(_Message), _Mycode(_Errval, _Errcat)
		{	
		_Makestr();
		}

	system_error(error_code::value_type _Errval,
		const error_category& _Errcat,
		const char *_Message)
		: runtime_error(_Message), _Mycode(_Errval, _Errcat)
		{	
		_Makestr();
		}










	const error_code& code() const throw ()
		{	
		return (_Mycode);
		}

 

 





#line 559 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

private:
	void _Makestr()
		{	




		}

	error_code _Mycode;	

	};
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 577 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"
#line 578 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"





#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
 #line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"












#pragma once






#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"














#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"

#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"
#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4412)

 

 
 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static const _Fmtflags skipws = (_Fmtflags)0x0001;
	static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static const _Fmtflags uppercase = (_Fmtflags)0x0004;
	static const _Fmtflags showbase = (_Fmtflags)0x0008;
	static const _Fmtflags showpoint = (_Fmtflags)0x0010;
	static const _Fmtflags showpos = (_Fmtflags)0x0020;
	static const _Fmtflags left = (_Fmtflags)0x0040;
	static const _Fmtflags right = (_Fmtflags)0x0080;
	static const _Fmtflags internal = (_Fmtflags)0x0100;
	static const _Fmtflags dec = (_Fmtflags)0x0200;
	static const _Fmtflags oct = (_Fmtflags)0x0400;
	static const _Fmtflags hex = (_Fmtflags)0x0800;
	static const _Fmtflags scientific = (_Fmtflags)0x1000;
	static const _Fmtflags fixed = (_Fmtflags)0x2000;

	static const _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static const _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static const _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static const _Iostate goodbit = (_Iostate)0x0;
	static const _Iostate eofbit = (_Iostate)0x1;
	static const _Iostate failbit = (_Iostate)0x2;
	static const _Iostate badbit = (_Iostate)0x4;
	static const _Iostate _Hardfail = (_Iostate)0x10;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static const _Openmode in = (_Openmode)0x01;
	static const _Openmode out = (_Openmode)0x02;
	static const _Openmode ate = (_Openmode)0x04;
	static const _Openmode app = (_Openmode)0x08;
	static const _Openmode trunc = (_Openmode)0x10;
	static const _Openmode _Nocreate = (_Openmode)0x40;
	static const _Openmode _Noreplace = (_Openmode)0x80;
	static const _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekmask = 0x3};

	static const _Seekdir beg = (_Seekdir)0;
	static const _Seekdir cur = (_Seekdir)1;
	static const _Seekdir end = (_Seekdir)2;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class  ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);
	typedef unsigned int io_state, open_mode, seek_dir;

			
	class failure

 
		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

 












#line 254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 

 





#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
		};

			
	class  Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init()
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	ios_base&  operator=(const ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystate = _Right._Mystate;
			copyfmt(_Right);
			}
		return (*this);
		}

	 operator void *() const
		{	
		return (fail() ? 0 : (void *)this);
		}

	bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_Mystate = (iostate)(_State & _Statmask);
		if ((_Mystate & _Except) == 0)
			;
		else if (_Reraise)
			throw;
		else if (_Mystate & _Except & badbit)
			throw failure("ios_base::badbit set");
		else if (_Mystate & _Except & failbit)
			throw failure("ios_base::failbit set");
		else
			throw failure("ios_base::eofbit set");
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), false);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	bool  good() const
		{	
		return (rdstate() == goodbit);
		}

	bool  eof() const
		{	
		return ((int)rdstate() & (int)eofbit);
		}

	bool  fail() const
		{	
		return (((int)rdstate()
			& ((int)badbit | (int)failbit)) != 0);
		}

	bool  bad() const
		{	
		return (((int)rdstate() & (int)badbit) != 0);
		}

	iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = (iostate)((int)_Newexcept & (int)_Statmask);
		clear(_Mystate);
		}

	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}

	fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Fmtfl
			| (int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
		}

	streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != &_Other)
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base()	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl _Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = 0;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = 0;
		_Calls = 0;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != 0)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete (_Ptr1);
			}
		_Arr = 0;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete (_Pfa1);
			}
		_Calls = 0;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl _Ios_base_dtor(ios_base *);
	};





}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 670 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
#line 671 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
	typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		: _Mylock(_Noinit)
		{	
		}

	 basic_streambuf(const _Myt& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Elem *_Tfirst = pbase();
			_Elem *_Tnext = pptr();
			_Elem *_Tend = epptr();
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Tfirst, _Tnext, _Tend);

			_Tfirst = eback();
			_Tnext = gptr();
			_Tend = egptr();
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Tfirst, _Tnext, _Tend);

			locale _Oldlocale = pubimbue(_Right.getloc());
			_Right.pubimbue(_Oldlocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf()
		{	
		delete (_Plocale);
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}

	_Myt * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != 0 && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}

	int_type  sungetc()
		{	
		return (gptr() != 0 && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		_Mylock._Lock();
		}

	virtual void  _Unlock()
		{	
		_Mylock._Unlock();
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != 0 ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != 0 ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(0, 0);
		setg(0, 0, 0);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr,
		streamsize _Count)
		{	
		int_type _Meta;
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Gnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				gbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
				break;	
			else
				{	
				*_Ptr++ = _Traits::to_char_type(_Meta);
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Pnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				pbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(),
				overflow(_Traits::to_int_type(*_Ptr))))
				break;	
			else
				{	
				++_Ptr;
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual _Myt * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Mutex _Mylock;	
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

	locale *_Plocale;	
	};

 





#line 473 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
		: public iterator<input_iterator_tag,
			_Elem, typename _Traits::off_type, _Elem *, _Elem&>
	{	
	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef typename traits_type::int_type int_type;

	istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
		: _Strbuf(_Sb), _Got(_Sb == 0)
		{	
		}

	istreambuf_iterator(istream_type& _Istr) throw ()
		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
		{	
		}

	_Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 


#line 509 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		return (_Val);
		}

	_Myt& operator++()
		{	
 


#line 519 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		_Inc();
		return (*this);
		}

	_Myt operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool equal(const _Myt& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return (_Strbuf == 0 && _Right._Strbuf == 0
			|| _Strbuf != 0 && _Right._Strbuf != 0);
		}

private:
	void _Inc()
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			_Strbuf = 0, _Got = true;
		else
			_Got = false;
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = 0;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type *_Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Elem,
	class _Traits> inline
	bool  operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits> inline
	bool  operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
		: public _Outit
	{	
	typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostreambuf_iterator(streambuf_type *_Sb) throw ()
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) throw ()
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	_Myt& operator=(_Elem _Right)
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

	bool failed() const throw ()
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 669 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"
#line 670 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"





#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4189 4275)

		


 
extern "C" {
 #line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

extern  float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern  double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern  long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern  long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern  unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern  __int64 __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern  unsigned __int64 __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"


namespace std {
		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	  static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct()
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();

		_Grouping = 0;
		_Falsename = 0;
		_Truename = 0;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());
#line 143 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
		_Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Lobj._Getcvt());
		_Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Lobj._Getcvt());
		} catch (...) {
		_Tidy();
		throw;
		}

		_Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem *)0, _Lobj._Getcvt());
		_Kseparator =
			_Maklocchr(_Ptr->thousands_sep[0], (_Elem *)0, _Lobj._Getcvt());

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', (_Elem *)0, _Lobj._Getcvt());
			_Kseparator = _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
			}
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		delete[] ((void *)_Grouping);
		delete[] ((void *)_Falsename);
		delete[] ((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

 
	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}
 #line 219 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

protected:
	virtual  ~numpunct_byname()
		{	
		}
	};

		
template<class _Elem>
	 locale::id numpunct<_Elem>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get()
		{	
		}

	void _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	_Locinfo::_Cvtvec _Cvt;		

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

 
	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}
 #line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		;
		int _Ans = -1;	

		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			typedef typename _Mystr::size_type _Mystrsize;
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str((_Mystrsize)1, (char_type)0);
			_Str += _Punct_fac.falsename();
			_Str += (char_type)0;
			_Str += _Punct_fac.truename();	
			_Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
			}
		else
			{	
			char _Ac[32], *_Ep;
			int _Errno = 0;
			const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
				_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
					_Iosbase.getloc()), &_Errno);
			if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
				_Ans = _Ulo;
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ans < 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans != 0;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = (unsigned short)(_Ac[0] == '-'
				? 0 -_Ans : _Ans);	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

 
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}
 #line 525 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		float _Ans = :: _Stofx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpf(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		double _Ans = :: _Stodx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexp(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		long double _Ans = :: _Stoldx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpl(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;

 
		int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
			_Iosbase.getloc());	
		const unsigned __int64 _Ans =
			(sizeof (void *) == sizeof (unsigned long))
				? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
				: :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

 



#line 619 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = (void *)((char *)0 + _Ans);	
		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _E0)
			{	
			_Seendigit = true, ++_First;
			if (_First != _Last && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
					|| *_First == _Maklocchr('X', (_Elem *)0, _Cvt))
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Seendigit = false, ++_First;
			else if (_Base == 0)
				_Base = 8;
			}

		int _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			if (:: memchr((const char *)"0123456789abcdefABCDEF",
				*_Ptr = _Maklocbyte((_Elem)*_First, _Cvt), _Dlen) != 0)
				{	
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					++_Ptr, _Nonzero = true;
				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.append((string::size_type)1, '\0');
				++_Group;
				}

		if (_Group == 0)
			;	
		else if ('\0' < _Groups[_Group])
			++_Group;	
		else
			_Seendigit = false;	

		for (const char *_Pg = _Grouping.c_str(); _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if (0 < --_Group && *_Pg != _Groups[_Group]
				|| 0 == _Group && *_Pg < _Groups[_Group])
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;
		bool _Bad = false;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	

		if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Pten;	
				else if (*_First == _E0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if (_E0 <= *_First && *_First <= _E0 + 9)
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Pten;	
					else if (*_First == _E0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = (char)((*_First - _E0) + '0');
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			for (const char *_Pg = _Grouping.c_str();
				!_Bad && 0 < _Group; )
				if (*_Pg == 127)
					break;	
				else if (0 < --_Group && *_Pg != _Groups[_Group]
					|| 0 == _Group && *_Pg < _Groups[_Group])
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _E0;
				_Seendigit = true, ++_First)
				--_Pten;	
			if (_Pten < 0)
				*_Ptr++ = '0', ++_Pten;	
			}

		for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = (char)((*_First - _E0) + '0');
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Maklocchr('e', (_Elem *)0, _Cvt)
				|| *_First == _Maklocchr('E', (_Elem *)0, _Cvt)))
			{	
			*_Ptr++ = 'e', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _E0; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Hexdig(const _Elem _Dig, const _Elem _E0,
		const _Elem _Al, const _Elem _Au) const
		{	
		if (_E0 <= _Dig && _Dig <= _E0 + 9)
			return (_Dig - _E0);	
		else if (_Al <= _Dig && _Dig <= _Al + 5)
			return (_Dig - _Al + 10);	
		else if (_Au <= _Dig && _Dig <= _Au + 5)
			return (_Dig - _Au + 10);	
		else
			return (-1);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		const _Elem _Al = _Maklocchr('a', (_Elem *)0, _Cvt);
		const _Elem _Au = _Maklocchr('A', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;
		bool _Bad = false;
		int _Dig;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First == _Last || *_First != _E0)
			;
		else if (++_First != _Last
			&& (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
				 || *_First == _Maklocchr('X', (_Elem *)0, _Cvt)))
			++_First;	
		else
			_Seendigit = true;	

		if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
			for (; _First != _Last
				&& 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Phex;	
				else if (*_First == _E0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = "0123456789abcdef"[_Dig];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if (0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au)))
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Phex;	
					else if (*_First == _E0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = "0123456789abcdef"[_Dig];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			for (const char *_Pg = _Grouping.c_str();
				!_Bad && 0 < _Group; )
				if (*_Pg == 127)
					break;	
				else if (0 < --_Group && *_Pg != _Groups[_Group]
					|| 0 == _Group && *_Pg < _Groups[_Group])
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _E0;
				_Seendigit = true, ++_First)
				--_Phex;	
			if (_Phex < 0)
				*_Ptr++ = '0', ++_Phex;	
			}

		for (; _First != _Last
				&& 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = "0123456789abcdef"[_Dig];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Maklocchr('p', (_Elem *)0, _Cvt)
				|| *_First == _Maklocchr('P', (_Elem *)0, _Cvt)))
			{	
			*_Ptr++ = 'p', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _E0; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}
	};

		
template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	_Locinfo::_Cvtvec _Cvt;		

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

 
	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}
 #line 1121 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		;
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val)));
		}

 
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val)));
		}
 #line 1212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
			&& _Val * 0.5 != _Val)	
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 0, _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
			: _Ffl == ios_base::hexfloat ? 'a'	
			: _Ffl == ios_base::scientific ? 'e' : 'g';	
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Beforepoint, size_t _Afterpoint,
				size_t _Trailing, size_t _Count) const
		{	
		;
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();
		string _Groupstring;
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

		char _Enders[3];
		_Enders[0] = :: localeconv()->decimal_point[0];
		_Enders[1] = 'e';
		_Enders[2] = '\0';

		const char *_Eptr = (const char *):: memchr(_Buf,
			'e', _Count);	
		const char *_Pointptr = (const char *):: memchr(_Buf,
			_Enders[0], _Count);	
		if (_Pointptr == 0)
			_Trailing = 0;

		if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			_Groupstring.append(_Buf, _Count);	
			if (_Eptr == 0)
				_Groupstring.append(_Trailing, '0');
			else
				{	
				if (_Pointptr == 0)
					{	
					_Groupstring.append(_Beforepoint, '0');
					_Beforepoint = 0;
					}
				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');
				}
			_Trailing = 0;

			if (_Pointptr == 0)
				_Groupstring.append(_Beforepoint, '0');
			else
				{	
				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');
				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');
				_Afterpoint = 0;
				}
			_Beforepoint = 0;

			const char *_Pg = _Grouping.c_str();
			size_t _Off = :: strcspn(&_Groupstring[0], &_Enders[0]);
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off - _Prefix)
				{	
				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');
				if ('\0' < _Pg[1])
					++_Pg;	
				}

			_Buf = &_Groupstring[0];
			_Trailing = 0;
			_Count = _Groupstring.size();
			}

		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;
		_Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Fillcount
				? 0 : (size_t)_Iosbase.width() - _Fillcount;
		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			if (0 < _Prefix)
				{	
				_Dest = _Putc(_Dest, _Buf, 1);
				++_Buf, --_Count;
				}
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}

		_Pointptr = (const char *):: memchr(_Buf,
			_Enders[0], _Count);	
		if (_Pointptr != 0)
			{	
			size_t _Fracoffset = _Pointptr - _Buf + 1;
			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);
			_Dest = _Rep(_Dest, _E0, _Beforepoint);
			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);
			_Dest = _Rep(_Dest, _E0, _Afterpoint);
			_Buf += _Fracoffset, _Count -= _Fracoffset;
			}

		_Eptr = (const char *):: memchr(_Buf,
			'e', _Count);	
		if (_Eptr != 0)
			{	
			size_t _Expoffset = _Eptr - _Buf + 1;
			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);
			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;
			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
				? "E" : "e", 1);
			_Buf += _Expoffset, _Count -= _Expoffset;
			}

		_Dest = _Putgrouped(_Dest, _Buf, _Count,
			_Kseparator);	
		_Dest = _Rep(_Dest, _E0, _Trailing);	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		;
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
			: 0;

		if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			const char *_Pg = _Grouping.c_str();
			size_t _Off = _Count;
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off - _Prefix)
				{	
				_Off -= *_Pg;

				;
				::memmove_s((&_Buf[_Off + 1]), (_Count + 1 - _Off), (&_Buf[_Off]), (_Count + 1 - _Off));
#line 1499 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

				_Buf[_Off] = '\0', ++_Count;
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Putc(_Dest, _Buf, _Prefix);	
			_Buf += _Prefix, _Count -= _Prefix;
			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;
			}

		_Dest = _Putgrouped(_Dest, _Buf, _Count,
			_Punct_fac.thousands_sep());	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Putc(_OutIt _Dest,
		const char *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
			*_Dest = _Maklocchr(*_Ptr, (_Elem *)0, _Cvt);
		return (_Dest);
		}

	_OutIt __cdecl _Putgrouped(_OutIt _Dest,
		const char *_Ptr, size_t _Count, _Elem _Kseparator) const
		{	
		for (; ; ++_Ptr, --_Count)
			{	
			const char *_Pend =
				(const char *):: memchr(_Ptr, '\0', _Count);
			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

			_Dest = _Putc(_Dest, _Ptr, _Groupsize);
			_Ptr += _Groupsize, _Count -= _Groupsize;
			if (_Count == 0)
				break;
			if (_Kseparator != (_Elem)0)
				_Dest = _Rep(_Dest, _Kseparator, 1);
			}
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 

















#line 1599 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 1607 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
#line 1608 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"






#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios()
		{	
		}

	void  clear(iostate _State = goodbit,
		bool _Reraise = false)
		{	
		ios_base::clear((iostate)(_Mystrbuf == 0
			? (int)_State | (int)badbit : (int)_State), _Reraise);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	void  setstate(iostate _State,
		bool _Reraise = false)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Reraise);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	_Myt&  copyfmt(const _Myt& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	_Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != 0)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.widen(_Byte));
		}

	void  move(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  swap(_Myt& _Right)
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = 0,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = 0;
		_Fillch = widen(' ');

		if (_Mystrbuf == 0)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

	 basic_ios(const _Myt&);	
	_Myt&  operator=(const _Myt&);	
	};

 








#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

 
inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}
 #line 211 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

 
	namespace tr1 {	
inline ::std:: ios_base& __cdecl hexfloat(::std:: ios_base& _Iosbase)
	{	
	_Iosbase.setf(::std:: ios_base::hexfloat, ::std:: ios_base::floatfield);
	return (_Iosbase);
	}
	}	
 #line 233 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

 

using tr1::hexfloat;

 #line 239 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 353 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"
#line 354 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ios"





#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189 4390)

namespace std {
		

 
 

 



 



 



#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			ios_base::_Addstd(this);	
		}

	 basic_ostream(_Myt&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

	virtual  ~basic_ostream()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base()
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Unlock();
			}

		_Myt& _Myostr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != 0)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

		 ~sentry()
			{	
 
			if (!uncaught_exception())
				this->_Myostr._Osfx();

 

#line 129 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
			}

		 operator ::std:: _Bool_type() const
			{	
			return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  opfx()
		{	
		if (ios_base::good() && _Myios::tie() != 0)
			_Myios::tie()->flush();
		return (ios_base::good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (ios_base::flags() & ios_base::unitbuf)
			flush();	
		} catch (...) {
		}
		}

  





















	_Myt&  operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator<<(_Bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
			ios_base::fmtflags _Bfl =
				ios_base::flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
			ios_base::fmtflags _Bfl =
				ios_base::flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator<<(__int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned __int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 406 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

	_Myt&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		ios_base::width(0);
		_Myios::setstate(_Strbuf == 0 ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  write(const _Elem *_Str,
		streamsize _Count)
		{	
 


#line 551 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  flush()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)
			_State |= ios_base::badbit;	
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  seekp(pos_type _Pos)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		if (!ios_base::fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(_BADOFF));
		}
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ostream<_Elem, _Traits>& _Left,
		basic_ostream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

  

















































 







#line 674 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, _Ty _Val)
	{	
	return (_Ostr << _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

 inline basic_ostream<char, char_traits<char> >&
	__cdecl endl(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}

 inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl endl(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}

 
 inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl endl(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}
 #line 1029 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 inline basic_ostream<char, char_traits<char> >&
	__cdecl ends(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}

 inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl ends(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}

 
 inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl ends(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}
 #line 1054 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 inline basic_ostream<char, char_traits<char> >&
	__cdecl flush(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

 inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl flush(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

 
 inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl flush(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}
 #line 1079 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 
		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
 #line 1091 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 1097 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
#line 1098 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"






#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;


	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		ios_base::_Addstd(this);
		}

	 basic_istream(_Myt&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

	virtual  ~basic_istream()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base()
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Unlock();
			}

		_Myt& _Myistr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		 operator ::std:: _Bool_type() const
			{	
			return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (ios_base::good())
			{	
			if (_Myios::tie() != 0)
				_Myios::tie()->flush();

			if (!_Noskip && ios_base::flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = use_facet< _Ctype >(ios_base::getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (ios_base::good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  





















	_Myt&  operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator>>(_Bool& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-32768) || 32767 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = (short)_Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator>>(unsigned short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = _Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator>>(__int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned __int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 391 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

	_Myt&  operator>>(float& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(void *& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						if (_Traits::eq_int_type(_Traits::eof(),
							_Strbuf->sputc(_Traits::to_char_type(_Meta))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	_Myt&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	_Myt&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	_Myt&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					++_Chcount;
					*_Str++ = _Traits::to_char_type(_Meta);
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (; ; )
				{	
				int_type _Meta;
				if (_Count != 2147483647 && --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  read(_Elem *_Str, streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Num)
			read(_Str, _Num < _Count ? _Num : _Count);	

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  putback(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  unget()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		int _Ans;

		if (_Myios::rdbuf() == 0)
			_Ans = -1;	
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_State |= ios_base::badbit;
			_Ans = -1;
			}
		else
			_Ans = 0;	

		_Myios::setstate(_State);
		return (_Ans);
		}

	_Myt&  seekg(pos_type _Pos)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		if (!ios_base::fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF));
		}

private:
	streamsize _Chcount;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_istream<_Elem, _Traits>& _Left,
		basic_istream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

  




































 







#line 917 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

	 basic_iostream(_Myt&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: forward<_Myt>(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

	virtual  ~basic_iostream()
		{	
		}
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_iostream<_Elem, _Traits>& _Left,
		basic_iostream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

 





#line 983 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr, _Elem *_Str)
	{	
	;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	return (::std:: move(_Istr) >> _Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (::std:: move(_Istr) >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (::std:: move(_Istr) >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (::std:: move(_Istr) >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (::std:: move(_Istr) >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
	{	
	return (_Istr >> _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

			try {
			for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(_Ctype::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 inline basic_istream<char, char_traits<char> >&
	__cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
	{	
	typedef char _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 inline basic_istream<wchar_t, char_traits<wchar_t> >&
	__cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
	{	
	typedef wchar_t _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 
 inline basic_istream<unsigned short, char_traits<unsigned short> >&
	__cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
	{	
	typedef unsigned short _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}
 #line 1276 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 1282 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"
#line 1283 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\istream"






#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"

 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {

  











		
 extern  istream cin, *_Ptr_cin;
 extern  ostream cout, *_Ptr_cout;
 extern  ostream cerr, *_Ptr_cerr;
 extern  ostream clog, *_Ptr_clog;

 extern  wistream wcin, *_Ptr_wcin;
 extern  wostream wcout, *_Ptr_wcout;
 extern  wostream wcerr, *_Ptr_wcerr;
 extern  wostream wclog, *_Ptr_wclog;

		
class  _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit();
private:
	 static int _Init_cnt;
	};
  #line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"

}
 #pragma warning(pop)
 #pragma pack(pop)

#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"





#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
    #line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"






#pragma once
#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"













namespace boost
{

namespace detail
{

inline void current_function_helper()
{





#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"



#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"



















#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"

}

} 

} 

#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/current_function.hpp"
#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

    
    
    
    
    #line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

    namespace boost
    { 
      namespace assertion 
      { 
        namespace detail
        {
          inline void assertion_failed_msg(char const * expr, char const * msg, char const * function,
            char const * file, long line)
          {
            std::cerr
              << "***** Internal Program Error - assertion (" << expr << ") failed in "
              << function << ":\n"
              << file << '(' << line << "): " << msg << std::endl;
            std::abort();
          }
        } 
      } 
    } 
  #line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

  



#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"



#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"










#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/integer/static_log2.hpp"































































































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"



#pragma once
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"


#pragma warning(push)

#pragma warning(disable:6294) 
                              
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"
#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"

namespace boost
{
    namespace hash_detail
    {
        inline void hash_float_combine(std::size_t& seed, std::size_t value)
        {
            seed ^= value + (seed<<6) + (seed>>2);
        }

        template <class T>
        inline std::size_t float_hash_impl2(T v)
        {
            boost::hash_detail::call_frexp<T> frexp;
            boost::hash_detail::call_ldexp<T> ldexp;
        
            int exp = 0;

            v = frexp(v, &exp);

            
            
            if(v < 0) {
                v = -v;
                exp += limits<T>::max_exponent -
                    limits<T>::min_exponent;
            }

            v = ldexp(v, limits<std::size_t>::digits);
            std::size_t seed = static_cast<std::size_t>(v);
            v -= static_cast<T>(seed);

            
            std::size_t const length
                = (limits<T>::digits *
                        boost::static_log2<limits<T>::radix>::value
                        + limits<std::size_t>::digits - 1)
                / limits<std::size_t>::digits;

            for(std::size_t i = 0; i != length; ++i)
            {
                v = ldexp(v, limits<std::size_t>::digits);
                std::size_t part = static_cast<std::size_t>(v);
                v -= static_cast<T>(part);
                hash_float_combine(seed, part);
            }

            hash_float_combine(seed, exp);

            return seed;
        }

        template <class T>
        inline std::size_t float_hash_impl(T v)
        {
            typedef typename select_hash_type<T>::type type;
            return float_hash_impl2(static_cast<type>(v));
        }
    }
}


#pragma warning(pop)
#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"

#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float_generic.hpp"
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"








#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"








#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"































#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"

namespace boost
{
    namespace hash_detail
    {
        template <class T>
        inline std::size_t float_hash_value(T v)
        {
            return v == 0 ? 0 : float_hash_impl(v);
        }
    }
}

#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"



#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/detail/hash_float.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)
 #pragma warning(disable: 4172)

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Traits::length(_Left) + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Traits::length(_Right));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, 1, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem *_Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	return (::std:: move(_Left.append(1, _Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if(_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.append(1, _Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	_Mysizt _Size = _Str.size();
	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
		? 0 : (_Mysizt)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Str.c_str(), _Size) != (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

 
inline int stoi(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	long _Ans = :: _Stolx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	unsigned long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	_Longlong _Ans = :: _Stollx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	_ULonglong _Ans = :: _Stoullx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	float _Ans = :: _Stofx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	double _Ans = :: _Stodx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	long double _Ans = :: _Stoldx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

 

inline string to_string(_Longlong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "d", _Val);
	return (string(_Buf));
	}

inline string to_string(_ULonglong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "u", _Val);
	return (string(_Buf));
	}

inline string to_string(long double _Val)
	{	
	char _Buf[8 + 36 + 64];

	:: sprintf_s(_Buf, sizeof (_Buf), "%Lg", _Val);
	return (string(_Buf));
	}

	
inline string _Narrow_str(wstring _Str)
	{	
	string _Ans;

	for (const wchar_t *_Ptr = _Str.c_str(); *_Ptr != 0; ++_Ptr)
		_Ans.push_back((char):: wctob(*_Ptr));
	return (_Ans);
	}

inline int stoi(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoi(_Narrow_str(_Str), _Idx, _Base));
	}

inline long stol(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stol(_Narrow_str(_Str), _Idx, _Base));
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoul(_Narrow_str(_Str), _Idx, _Base));
	}

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoll(_Narrow_str(_Str), _Idx, _Base));
	}

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoull(_Narrow_str(_Str), _Idx, _Base));
	}

inline float stof(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stof(_Narrow_str(_Str), _Idx));
	}

inline double stod(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stod(_Narrow_str(_Str), _Idx));
	}

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stold(_Narrow_str(_Str), _Idx));
	}

 

inline wstring to_wstring(_Longlong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
		L"%I64" L"d", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(_ULonglong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
		L"%I64" L"u", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(long double _Val)
	{	
	wchar_t _Buf[8 + 36 + 64];

	:: swprintf(_Buf,sizeof (_Buf) / sizeof (_Buf[0]),
		L"%Lg", _Val);
	return (wstring(_Buf));
	}
 #line 780 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 786 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string"
#line 787 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string"





#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"


















































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"



#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"



#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeindex"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 
namespace std {
class type_index
	{	
public:
	type_index(const type_info &_Tinfo)
		: _Tptr(&_Tinfo)
		{	
		}

	size_t hash_code() const
		{	
		return (_Tptr->hash_code());
		}

	const char *name() const
		{	
		return (_Tptr->name());
		}

	bool operator==(const type_index& _Right) const
		{	
		return (*_Tptr == *_Right._Tptr);
		}

	bool operator!=(const type_index& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const type_index& _Right) const
		{	
		return (_Tptr->before(*_Right._Tptr) != 0);
		}

	bool operator>=(const type_index& _Right) const
		{	
		return (!(*this < _Right));
		}

	bool operator>(const type_index& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const type_index& _Right) const
		{	
		return (!(_Right < *this));
		}

private:
	const type_info *_Tptr;
	};

template<class _Kty>
	class hash;

template<>
	class hash<type_index>
		: public unary_function<type_index, size_t>
	{	
public:
	typedef type_index _Kty;

	size_t operator()(_Kty _Keyval) const
		{	
		return (_Keyval.hash_code());
		}
	};
}
 #line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeindex"

 #pragma warning(pop)
 #pragma pack(pop)

#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeindex"
#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\typeindex"





#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"



#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

namespace boost
{










#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    std::size_t hash_value(bool);
    std::size_t hash_value(char);
    std::size_t hash_value(unsigned char);
    std::size_t hash_value(signed char);
    std::size_t hash_value(short);
    std::size_t hash_value(unsigned short);
    std::size_t hash_value(int);
    std::size_t hash_value(unsigned int);
    std::size_t hash_value(long);
    std::size_t hash_value(unsigned long);


    std::size_t hash_value(wchar_t);
#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
    

    std::size_t hash_value(boost::long_long_type);
    std::size_t hash_value(boost::ulong_long_type);
#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    template <class T> std::size_t hash_value(T* const&);


#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    template< class T, unsigned N >
    std::size_t hash_value(const T (&x)[N]);

    template< class T, unsigned N >
    std::size_t hash_value(T (&x)[N]);
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    std::size_t hash_value(float v);
    std::size_t hash_value(double v);
    std::size_t hash_value(long double v);

    template <class Ch, class A>
    std::size_t hash_value(
        std::basic_string<Ch, std::char_traits<Ch>, A> const&);


    std::size_t hash_value(std::type_index);
#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    

    namespace hash_detail
    {
        template <class T>
        inline std::size_t hash_value_signed(T val)
        {
             const int size_t_bits = std::numeric_limits<std::size_t>::digits;
             
             const int length = (std::numeric_limits<T>::digits - 1)
                 / size_t_bits;

             std::size_t seed = 0;
             T positive = val < 0 ? -1 - val : val;

             
             for(unsigned int i = length * size_t_bits; i > 0; i -= size_t_bits)
             {
                 seed ^= (std::size_t) (positive >> i) + (seed<<6) + (seed>>2);
             }
             seed ^= (std::size_t) val + (seed<<6) + (seed>>2);

             return seed;
        }

        template <class T>
        inline std::size_t hash_value_unsigned(T val)
        {
             const int size_t_bits = std::numeric_limits<std::size_t>::digits;
             
             const int length = (std::numeric_limits<T>::digits - 1)
                 / size_t_bits;

             std::size_t seed = 0;

             
             for(unsigned int i = length * size_t_bits; i > 0; i -= size_t_bits)
             {
                 seed ^= (std::size_t) (val >> i) + (seed<<6) + (seed>>2);
             }
             seed ^= (std::size_t) val + (seed<<6) + (seed>>2);

             return seed;
        }
    }

    inline std::size_t hash_value(bool v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(char v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(unsigned char v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(signed char v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(short v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(unsigned short v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(int v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(unsigned int v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(long v)
    {
        return static_cast<std::size_t>(v);
    }

    inline std::size_t hash_value(unsigned long v)
    {
        return static_cast<std::size_t>(v);
    }


    inline std::size_t hash_value(wchar_t v)
    {
        return static_cast<std::size_t>(v);
    }
#line 200 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    inline std::size_t hash_value(boost::long_long_type v)
    {
        return hash_detail::hash_value_signed(v);
    }

    inline std::size_t hash_value(boost::ulong_long_type v)
    {
        return hash_detail::hash_value_unsigned(v);
    }
#line 212 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    

    template <class T> std::size_t hash_value(T* const& v)


#line 219 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
    {





#line 226 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
        std::size_t x = static_cast<std::size_t>(
           reinterpret_cast<std::ptrdiff_t>(v));
#line 229 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
        return x + (x >> 3);
    }


#pragma warning(push)





#line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 241 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"




#line 246 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
    template <class T>
    inline void hash_combine(std::size_t& seed, T const& v)
#line 249 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
    {
        boost::hash<T> hasher;
        seed ^= hasher(v) + 0x9e3779b9 + (seed<<6) + (seed>>2);
    }


#pragma warning(pop)
#line 257 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    template <class It>
    inline std::size_t hash_range(It first, It last)
    {
        std::size_t seed = 0;

        for(; first != last; ++first)
        {
            hash_combine(seed, *first);
        }

        return seed;
    }

    template <class It>
    inline void hash_range(std::size_t& seed, It first, It last)
    {
        for(; first != last; ++first)
        {
            hash_combine(seed, *first);
        }
    }

























#line 305 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    template< class T, unsigned N >
    inline std::size_t hash_value(const T (&x)[N])
    {
        return hash_range(x, x + N);
    }

    template< class T, unsigned N >
    inline std::size_t hash_value(T (&x)[N])
    {
        return hash_range(x, x + N);
    }
#line 319 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    template <class Ch, class A>
    inline std::size_t hash_value(
        std::basic_string<Ch, std::char_traits<Ch>, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    inline std::size_t hash_value(float v)
    {
        return boost::hash_detail::float_hash_value(v);
    }

    inline std::size_t hash_value(double v)
    {
        return boost::hash_detail::float_hash_value(v);
    }

    inline std::size_t hash_value(long double v)
    {
        return boost::hash_detail::float_hash_value(v);
    }


    inline std::size_t hash_value(std::type_index v)
    {
        return v.hash_code();
    }
#line 348 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



























































#line 424 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"

    template <> struct hash<bool> : public std::unary_function<bool, std::size_t> { std::size_t operator()(bool v) const { return boost::hash_value(v); } };
    template <> struct hash<char> : public std::unary_function<char, std::size_t> { std::size_t operator()(char v) const { return boost::hash_value(v); } };
    template <> struct hash<signed char> : public std::unary_function<signed char, std::size_t> { std::size_t operator()(signed char v) const { return boost::hash_value(v); } };
    template <> struct hash<unsigned char> : public std::unary_function<unsigned char, std::size_t> { std::size_t operator()(unsigned char v) const { return boost::hash_value(v); } };

    template <> struct hash<wchar_t> : public std::unary_function<wchar_t, std::size_t> { std::size_t operator()(wchar_t v) const { return boost::hash_value(v); } };
#line 432 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
    template <> struct hash<short> : public std::unary_function<short, std::size_t> { std::size_t operator()(short v) const { return boost::hash_value(v); } };
    template <> struct hash<unsigned short> : public std::unary_function<unsigned short, std::size_t> { std::size_t operator()(unsigned short v) const { return boost::hash_value(v); } };
    template <> struct hash<int> : public std::unary_function<int, std::size_t> { std::size_t operator()(int v) const { return boost::hash_value(v); } };
    template <> struct hash<unsigned int> : public std::unary_function<unsigned int, std::size_t> { std::size_t operator()(unsigned int v) const { return boost::hash_value(v); } };
    template <> struct hash<long> : public std::unary_function<long, std::size_t> { std::size_t operator()(long v) const { return boost::hash_value(v); } };
    template <> struct hash<unsigned long> : public std::unary_function<unsigned long, std::size_t> { std::size_t operator()(unsigned long v) const { return boost::hash_value(v); } };

    template <> struct hash<float> : public std::unary_function<float, std::size_t> { std::size_t operator()(float v) const { return boost::hash_value(v); } };
    template <> struct hash<double> : public std::unary_function<double, std::size_t> { std::size_t operator()(double v) const { return boost::hash_value(v); } };
    template <> struct hash<long double> : public std::unary_function<long double, std::size_t> { std::size_t operator()(long double v) const { return boost::hash_value(v); } };

    template <> struct hash<std::string> : public std::unary_function<std::string, std::size_t> { std::size_t operator()(std::string const& v) const { return boost::hash_value(v); } };

    template <> struct hash<std::wstring> : public std::unary_function<std::wstring, std::size_t> { std::size_t operator()(std::wstring const& v) const { return boost::hash_value(v); } };
#line 447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    template <> struct hash<boost::long_long_type> : public std::unary_function<boost::long_long_type, std::size_t> { std::size_t operator()(boost::long_long_type v) const { return boost::hash_value(v); } };
    template <> struct hash<boost::ulong_long_type> : public std::unary_function<boost::ulong_long_type, std::size_t> { std::size_t operator()(boost::ulong_long_type v) const { return boost::hash_value(v); } };
#line 452 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"


    template <> struct hash<std::type_index> : public std::unary_function<std::type_index, std::size_t> { std::size_t operator()(std::type_index v) const { return boost::hash_value(v); } };
#line 456 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"








    template <class T>
    struct hash<T*>
        : public std::unary_function<T*, std::size_t>
    {
        std::size_t operator()(T* v) const
        {

            return boost::hash_value(v);





#line 478 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
        }
    };










































#line 523 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
}



#line 528 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"






#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"














































































































































































































































































































































































































































































































































#line 528 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"







#line 537 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"









#pragma once
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"












#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"











#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"



#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"



#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"


#pragma warning(push)
#pragma warning(disable:4099) 
#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

namespace std
{
    template <class T> class allocator;
    template <class charT, class traits, class Allocator> class basic_string;



#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
    template <class charT> struct char_traits;
#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

    

#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
        template <class T> class complex;
    #line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
}


namespace std
{

    template <class T, class Allocator> class deque;
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

    template <class T, class Allocator> class list;
    template <class T, class Allocator> class vector;
    template <class Key, class T, class Compare, class Allocator> class map;
    template <class Key, class T, class Compare, class Allocator>
    class multimap;
    template <class Key, class Compare, class Allocator> class set;
    template <class Key, class Compare, class Allocator> class multiset;


    template <size_t N> class bitset;
#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
    template <class T1, class T2> struct pair;
}


#pragma warning(pop)
#line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

#line 105 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"

#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/container_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"


#pragma once
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"



#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"



#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"

namespace boost
{
    template <class A, class B>
    std::size_t hash_value(std::pair<A, B> const&);
    template <class T, class A>
    std::size_t hash_value(std::vector<T, A> const&);
    template <class T, class A>
    std::size_t hash_value(std::list<T, A> const& v);
    template <class T, class A>
    std::size_t hash_value(std::deque<T, A> const& v);
    template <class K, class C, class A>
    std::size_t hash_value(std::set<K, C, A> const& v);
    template <class K, class C, class A>
    std::size_t hash_value(std::multiset<K, C, A> const& v);
    template <class K, class T, class C, class A>
    std::size_t hash_value(std::map<K, T, C, A> const& v);
    template <class K, class T, class C, class A>
    std::size_t hash_value(std::multimap<K, T, C, A> const& v);

    template <class T>
    std::size_t hash_value(std::complex<T> const&);

    template <class A, class B>
    std::size_t hash_value(std::pair<A, B> const& v)
    {
        std::size_t seed = 0;
        hash_combine(seed, v.first);
        hash_combine(seed, v.second);
        return seed;
    }

    template <class T, class A>
    std::size_t hash_value(std::vector<T, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class T, class A>
    std::size_t hash_value(std::list<T, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class T, class A>
    std::size_t hash_value(std::deque<T, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class K, class C, class A>
    std::size_t hash_value(std::set<K, C, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class K, class C, class A>
    std::size_t hash_value(std::multiset<K, C, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class K, class T, class C, class A>
    std::size_t hash_value(std::map<K, T, C, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class K, class T, class C, class A>
    std::size_t hash_value(std::multimap<K, T, C, A> const& v)
    {
        return hash_range(v.begin(), v.end());
    }

    template <class T>
    std::size_t hash_value(std::complex<T> const& v)
    {
        boost::hash<T> hasher;
        std::size_t seed = hasher(v.imag());
        seed ^= hasher(v.real()) + (seed<<6) + (seed>>2);
        return seed;
    }

    
    
    

    











































#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"

    
    
    




    template <class T> struct hash
        : std::unary_function<T, std::size_t>
    {

        std::size_t operator()(T const& val) const
        {
            return hash_value(val);
        }





#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"
    };










#line 196 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"























































































#line 284 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"
}

#line 287 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/extensions.hpp"
#line 536 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 537 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash/hash.hpp"
#line 7 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/functional/hash.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"











#pragma once
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"



#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/msvc_never_true.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/msvc_never_true.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"

#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/msvc_never_true.hpp"













#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/msvc_never_true.hpp"

#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/msvc_never_true.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"



#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"

#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"

#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"





#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"





#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"

#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"






#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"





#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"





#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"

#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"

































#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"




#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"





#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"



#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"


namespace boost { namespace mpl { namespace aux {

template< typename T > struct value_type_wknd
{
    typedef typename T::value_type type;
};






#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"

}}}

#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"



























#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/void_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/intel.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/intel.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/intel.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"

#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"











#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/adl.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"



















#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"






#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"

#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/void_fwd.hpp"

namespace boost { namespace mpl {

struct void_;

}}


#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/void_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool_fwd.hpp"

namespace boost { namespace mpl {

template< bool C_ > struct bool_;


typedef bool_<true> true_;
typedef bool_<false> false_;

}}





#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"



#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"

namespace boost { namespace mpl {
struct integral_c_tag { static const int value = 0; };
}}


#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"

namespace boost { namespace mpl {

template< bool C_ > struct bool_
{
    static const bool value = C_;
    typedef integral_c_tag tag;
    typedef bool_ type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};


template< bool C_ >
bool const bool_<C_>::value;
#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"

}}

#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_fwd.hpp"

namespace boost { namespace mpl {


struct na
{
    typedef na type;
    enum { value = 0 };
};

}}


#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_fwd.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"





#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"



#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"

namespace boost { namespace mpl {

template< typename T >
struct is_na
    : false_
{


#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
};

template<>
struct is_na<na>
    : true_
{


#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
};

template< typename T >
struct is_not_na
    : true_
{


#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
};

template<>
struct is_not_na<na>
    : false_
{


#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
};


template< typename T, typename U > struct if_na
{
    typedef T type;
};

template< typename U > struct if_na<na,U>
{
    typedef U type;
};





















#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"

}}

#line 96 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"





#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"






#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"






























#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"








#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"

#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"


















#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"











#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"

#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int_fwd.hpp"

namespace boost { namespace mpl {

template< int N > struct int_;

}}


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"


























#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"



























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"




























#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"





#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"



#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"





#line 59 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"








#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"
#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"

#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"








#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"


#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"

#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"




#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< int N >
struct int_
{
    static const int value = N;




#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef int_ type;
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef int value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef boost::mpl::int_< static_cast<int>((value + 1)) > next;
    typedef boost::mpl::int_< static_cast<int>((value - 1)) > prior;
#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator int() const { return static_cast<int>(this->value); } 
};


template< int N >
int const boost::mpl::int_< N >::value;
#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"

#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_arity_param.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"









































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_arity_param.hpp"





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_arity_param.hpp"

#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_arity_param.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"
















namespace boost { namespace mpl { namespace aux {

template< typename F > struct template_arity;

}}}

#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"
#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"

namespace boost { namespace mpl {

template< 
      typename T = na
    , typename Tag = void_
    
#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
    >
struct lambda;

}}
















#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"

#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/lambda_fwd.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"











#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"






#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"

#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity.hpp"



















#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity.hpp"

#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"





#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"



#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"


#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

























#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/comma_if.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"






#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"



#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"


#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"




#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bool.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bool.hpp"








#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bool.hpp"





































































































































































































































































#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bool.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"








#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"

#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/empty.hpp"




















#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/empty.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma.hpp"




















#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"








#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/comma_if.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/comma_if.hpp"
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repeat.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"





#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"










#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"


































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"














































































































































































































































































#line 293 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"








#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"






























#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"





#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"





























































































































































































































































































































































































































































































































































































































































































































































































































#line 826 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"

#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repeat.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repeat.hpp"
#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/inc.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"








#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"





































































































































































































































































#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/inc.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/inc.hpp"
#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"














#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"







































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"

























#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/comma_if.hpp"

















#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repeat.hpp"

















#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"













#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"

#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/enum.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/limits/arity.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/limits/arity.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/limits/arity.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"














































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"







































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/comma_if.hpp"

















#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bool.hpp"
































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"








#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"


#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"






#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"








#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"

#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/and.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/identity.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/identity.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/empty.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/identity.hpp"





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/identity.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/identity.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/identity.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/empty.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/facilities/empty.hpp"





















#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/empty.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/empty.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"







































#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/dec.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/dec.hpp"








#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/dec.hpp"





































































































































































































































































#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/dec.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"
































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"

































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"

































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"





#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"











#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/expr_iif.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/expr_iif.hpp"








#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/expr_iif.hpp"






#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/expr_iif.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/iif.hpp"


































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/is_binary.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/is_binary.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"








#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"





#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"












#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"



#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/check.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/is_binary.hpp"








#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/is_binary.hpp"




#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/is_binary.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"








#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"


#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"




#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/compl.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"

























































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"

















#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"











#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"










#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"

#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"







#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"

#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"

























































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"


































































































































































































































































#line 280 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_left.hpp"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"




































































































































































































































































#line 304 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"

































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"



#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"











#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_right.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"















































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_right.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_left.hpp"















































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"








#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"










#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/reverse.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_right.hpp"


































































































































































































































































#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/detail/fold_right.hpp"

#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/logical/bitand.hpp"






































#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"





#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"





#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"

#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"





#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/detail/msvc/while.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"






























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/detail/msvc/while.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"

























































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/detail/msvc/while.hpp"


































































































































































































































































#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/detail/msvc/while.hpp"

#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"




#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"






































































































































































































































































#line 313 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"






#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"




#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"































































































































































































































































































































































#line 386 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"








#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"










#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"
#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/dec.hpp"
































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"








#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"







#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"










#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"

#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"
#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/inc.hpp"

















#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repeat.hpp"

















#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"

















#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"













#line 104 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"

#line 106 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_arity_param.hpp"

























#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"














































#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/eti.hpp"















































#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"









































#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"

#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"
#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"



















#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"

#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"







































#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"













#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"





















#line 136 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"

#line 138 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"










#line 149 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"

#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
























#line 176 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"





















































































































































#line 168 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"

#line 170 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/integral.hpp"






































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"






























#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"

namespace boost { namespace mpl {



template<
      bool C
    , typename T1
    , typename T2
    >
struct if_c
{
    typedef T1 type;
};

template<
      typename T1
    , typename T2
    >
struct if_c<false,T1,T2>
{
    typedef T2 type;
};



template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = na
    >
struct if_
{
 private:
    
    typedef if_c<


#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
          static_cast<bool>(T1::value)
#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
        , T2
        , T3
        > almost_type_;
 
 public:
    typedef typename almost_type_::type type;
    
    
};























































#line 130 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"

template<> struct if_<  na , na , na > { template<  typename T1 , typename T2 , typename T3 , typename T4 =na  , typename T5 =na  > struct apply : if_<  T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< if_<  na , na , na > , Tag  > { typedef false_ is_le; typedef if_<  na , na , na > result_; typedef if_<  na , na , na > type; };   

}}

#line 136 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"















































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"

namespace boost { namespace mpl {

template<
      typename C = na
    , typename F1 = na
    , typename F2 = na
    >
struct eval_if




#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
    : if_<C,F1,F2>::type
{
#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
    
};



template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c




#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
    : if_c<C,F1,F2>::type
{
#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
};

template<> struct eval_if<  na , na , na > { template<  typename T1 , typename T2 , typename T3 , typename T4 =na  , typename T5 =na  > struct apply : eval_if<  T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< eval_if<  na , na , na > , Tag  > { typedef false_ is_le; typedef eval_if<  na , na , na > result_; typedef eval_if<  na , na , na > type; };   

}}

#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"










#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"





#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"



#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"








#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"








#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"

#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"


#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"






#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"








#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"

namespace boost { namespace mpl {




#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"
template< typename T, T N > struct integral_c;
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"

}}


#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"






























#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"




#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"

#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"


























#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"



























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"







#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< typename T, T N >
struct integral_c
{
    static const T value = N;




#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c type;
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef T value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c< T, static_cast<T>((value + 1)) > next;
    typedef integral_c< T, static_cast<T>((value - 1)) > prior;
#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator T() const { return static_cast<T>(this->value); } 
};


template< typename T, T N >
T const integral_c< T, N >::value;
#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"



namespace boost { namespace mpl {

template< bool C >
struct integral_c<bool, C>
{
    static const bool value = C;
    typedef integral_c_tag tag;
    typedef integral_c type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};
}}
#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c.hpp"
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"

namespace boost{



#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
template <class T, T val>
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
struct integral_constant : public mpl::integral_c<T, val>
{
   typedef integral_constant<T,val> type;
};

template<> struct integral_constant<bool,true> : public mpl::true_ 
{






#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
   typedef integral_constant<bool,true> type;
};
template<> struct integral_constant<bool,false> : public mpl::false_ 
{






#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
   typedef integral_constant<bool,false> type;
};

typedef integral_constant<bool,true> true_type;
typedef integral_constant<bool,false> false_type;

}

#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"

namespace boost {



template< typename T, typename U > struct is_same : public ::boost::integral_constant<bool,false> { public:   }; 
template< typename T > struct is_same< T,T > : public ::boost::integral_constant<bool,true> { public:   };




#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"




















































#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"

#line 103 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"




namespace boost{

namespace detail{






namespace allocator{






template<typename Type>
class partial_std_allocator_wrapper:public std::allocator<Type>
{
public:
  




  typedef Type value_type;

  partial_std_allocator_wrapper(){};

  template<typename Other>
  partial_std_allocator_wrapper(const partial_std_allocator_wrapper<Other>&){}

  partial_std_allocator_wrapper(const std::allocator<Type>& x):
    std::allocator<Type>(x)
  {
  };


  



  Type* allocate(std::size_t n,const void* hint=0)
  {
    std::allocator<Type>& a=*this;
    return a.allocate(n,hint);
  }
#line 69 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

};



























#line 100 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

template<typename Allocator>
struct is_partial_std_allocator
{
  static const bool value=false;
};

#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"



template<typename Allocator,typename Type>
struct partial_std_allocator_rebind_to
{
  typedef partial_std_allocator_wrapper<Type> type;
};

























#line 142 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
template<typename Allocator>
struct rebinder
{
  template<typename Type>
  struct result
  {
      typedef typename Allocator::template 
          rebind<Type>::other other;
  };
};
#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

template<typename Allocator,typename Type>
struct compliant_allocator_rebind_to
{
  typedef typename rebinder<Allocator>::
      template result<Type>::other type;
};



template<typename Allocator,typename Type>
struct rebind_to:
  mpl::eval_if_c<
    is_partial_std_allocator<Allocator>::value,
    partial_std_allocator_rebind_to<Allocator,Type>,
    compliant_allocator_rebind_to<Allocator,Type>
  >
{
};



template<typename Type>
void construct(void* p,const Type& t)
{
  new (p) Type(t);
}






#pragma warning(push)
#pragma warning(disable:4100)  
#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

template<typename Type>
void destroy(const Type* p)
{



#line 197 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
  p->~Type();
#line 199 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

}


#pragma warning(pop)
#line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"

} 

} 

} 

#line 213 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/allocator_utilities.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"

namespace boost { namespace unordered_detail {

    
    
    
    


    template <class Alloc, class T>
    struct rebind_wrap : ::boost::detail::allocator::rebind_to<Alloc, T> {};








#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"

    
    
    
    
    

    template <class Allocator>
    struct allocator_array_constructor
    {
        typedef typename Allocator::pointer pointer;

        Allocator& alloc_;
        pointer ptr_;
        pointer constructed_;
        std::size_t length_;

        allocator_array_constructor(Allocator& a)
            : alloc_(a), ptr_(), constructed_(), length_(0)
        {
            constructed_ = pointer();
            ptr_ = pointer();
        }

        ~allocator_array_constructor() {
            if (ptr_) {
                for(pointer p = ptr_; p != constructed_; ++p)
                    alloc_.destroy(p);

                alloc_.deallocate(ptr_, length_);
            }
        }

        template <class V>
        void construct(V const& v, std::size_t l)
        {
            (void)( (!!(!ptr_)) || (_wassert(L"!ptr_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp", 81), 0) );
            length_ = l;
            ptr_ = alloc_.allocate(length_);
            pointer end = ptr_ + static_cast<std::ptrdiff_t>(length_);
            for(constructed_ = ptr_; constructed_ != end; ++constructed_)
                alloc_.construct(constructed_, v);
        }

        pointer get() const
        {
            return ptr_;
        }

        pointer release()
        {
            pointer p(ptr_);
            ptr_ = pointer();
            return p;
        }
    private:
        allocator_array_constructor(allocator_array_constructor const&);
        allocator_array_constructor& operator=(
            allocator_array_constructor const&);
    };
}}



#line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"

#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/allocator_helpers.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4244)

namespace std {
		
const int _ISORT_MAX = 32;	

		
template<class _InIt,
	class _Fn1> inline
	_Fn1 _For_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	for (; _First != _Last; ++_First)
		_Func(*_First);
	return (_Func);
	}

template<class _InIt,
	class _Fn1> inline
	_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	;
	;
	return (_For_each(_Unchecked(_First), _Unchecked(_Last), _Func));
	}

		
template<class _InIt,
	class _Ty> inline
	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

inline const char *_Find(const char *_First, const char *_Last, int _Val)
	{	
	_First = (const char *):: memchr(_First, _Val, _Last - _First);
	return (_First == 0 ? _Last : _First);
	}

inline const signed char *_Find(const signed char *_First,
	const signed char *_Last, int _Val)
	{	
	_First = (const signed char *):: memchr(_First, _Val,
		_Last - _First);
	return (_First == 0 ? _Last : _First);
	}

inline const unsigned char *_Find(const unsigned char *_First,
	const unsigned char *_Last, int _Val)
	{	
	_First = (const unsigned char *):: memchr(_First, _Val,
		_Last - _First);
	return (_First == 0 ? _Last : _First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (*_Firstb == *_First)
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		_Count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

 
		
template<class _InIt,
	class _Pr> inline
	bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (true);
	return (false);
	}

template<class _InIt,
	class _Pr> inline
	bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 














































#line 340 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	::std:: pair<_OutIt1, _OutIt2>
		_Partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest1++ = *_First;
		else
			*_Dest2++ = *_First;
	return (::std:: pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));
	}

 
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	::std:: pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	return (::std:: pair<_OutIt1, _OutIt2>(
		_Partition_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest1, _Dest2, _Pred)));
	}

 




































































































































#line 506 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _Pr> inline
	bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);	
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),
		_Pred));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition_point(_Unchecked(_First), _Unchecked(_Last),
			_Pred)));
	}
 #line 553 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2> inline
	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);

	for (; _Count2 <= _Count1; ++_First1, --_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!(*_Mid1 == *_Mid2))
				break;
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Search(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2),
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);

	for (; _Count2 <= _Count1; ++_First1, --_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!_Pred(*_Mid1, *_Mid2))
				break;
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Search(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	for (; _First1 != _Last1; ++_First1)
		if (*_First1 == _Val)
			{	
			_FwdIt1 _Mid1 = _First1;

			for (_Diff2 _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First1);	
				else if (++_Mid1 == _Last1)
					return (_Last1);	
				else if (!(*_Mid1 == _Val))
					break;	

			_First1 = _Mid1;	
			}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	_FwdIt1 _Oldfirst1 = _First1;
	for (_Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )
		{	
		_First1 = _Oldfirst1 + _Inc;
		if (*_First1 == _Val)
			{	
			_Diff2 _Count1 = _Count;
			_FwdIt1 _Mid1 = _First1;

			for (; _Oldfirst1 != _First1 && _First1[-1] == _Val; --_First1)
				--_Count1;	

			if (_Count1 <= _Last1 - _Mid1)
				for (; ; )	
					if (--_Count1 == 0)
						return (_First1);	
					else if (!(*++_Mid1 == _Val))
						break;	

			_Oldfirst1 = ++_Mid1;	
			_Inc = 0;
			}
		else
			{	
			_Oldfirst1 = _First1 + 1;
			_Inc = _Count - 1;
			}
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First1,
		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
			_Iter_cat(_First1))));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, _Val))
			{	
			_FwdIt1 _Mid1 = _First1;

			for (_Diff2 _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First1);	
				else if (++_Mid1 == _Last1)
					return (_Last1);	
				else if (!_Pred(*_Mid1, _Val))
					break;	

			_First1 = _Mid1;	
			}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	_FwdIt1 _Oldfirst1 = _First1;
	for (; _Count <= _Last1 - _Oldfirst1; )
		{	
		if (_Pred(*_First1, _Val))
			{	
			_Diff2 _Count1 = _Count;
			_FwdIt1 _Mid1 = _First1;

			for (; _Oldfirst1 != _First1 && _Pred(_First1[-1], _Val);
				--_First1)
				--_Count1;	

			if (_Count1 <= _Last1 - _Mid1)
				for (; ; )	
					if (--_Count1 == 0)
						return (_First1);	
					else if (!_Pred(*++_Mid1, _Val))
						break;	

			_Oldfirst1 = ++_Mid1;	
			_First1 = _Oldfirst1;
			}
		else
			{	
			_Oldfirst1 = _First1 + 1;
			_First1 += _Count;
			}
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
			_Pred, _Iter_cat(_First1))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2> inline
	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		for (; _Count2 <= _Count1; ++_First1, --_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!(*_Mid1 == *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2),
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		for (; _Count2 <= _Count1; ++_First1, --_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!_Pred(*_Mid1, *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (*_First1 == *_Mid2)
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (_Pred(*_First1, *_Mid2))
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	for (; _First1 != _Last1; ++_First1, ++_Dest)
		::std:: iter_swap(_First1, _Dest);
	return (_Dest);
	}

 
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),
		_Dest));
	}

 































































#line 1025 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _Ty,
	size_t _Size> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
	{	
	if (&_Left != &_Right)
		_Swap_ranges(&_Left[0], &_Left[0] + _Size, &_Right[0]);
	}

		
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Func(*_First);
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	if (_First != _Last)
		return (_Transform(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Func));
	return (_Dest);
	}

 










































































#line 1136 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)
		*_Dest = _Func(*_First1, *_First2);
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	if (_First1 != _Last1)
		return (_Transform(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Dest, _Func));
	return (_Dest);
	}

 









































































































































#line 1303 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	void _Replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Oldval)
			*_First = _Newval;
	}

template<class _FwdIt,
	class _Ty> inline
	void replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	;
	_Replace(_Unchecked(_First), _Unchecked(_Last),
		_Oldval, _Newval);
	}

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_First = _Val;
	}

template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	;
	;
	_Replace_if(_Unchecked(_First), _Unchecked(_Last),
		_Pred, _Val);
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = *_First == _Oldval ? _Newval : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Oldval, _Newval));
	}

 










































































#line 1446 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Pred(*_First) ? _Val : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred, _Val));
	}

 

















































































#line 1555 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Fn0> inline
	void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Func();
	}

template<class _FwdIt,
	class _Fn0> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	;
	;
	_Generate(_Unchecked(_First), _Unchecked(_Last), _Func);
	}

		
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	void _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Func();
	}

 
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	void generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	_Generate_n(_Dest, _Count, _Func);
	}

 





























































#line 1656 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Val));
	}

 
















































#line 1731 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 

















































#line 1807 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = ::std:: find(_First, _Last, _Val);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
	if (!_Pred(*_First))
		*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_First = ::std:: find_if(_First, _Last, _Pred);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (*_Firstb == *_First)
				{	
				for (; ++_First != _Last; )
					if (!(*_Firstb == *_First))
						*++_Firstb = _Move(*_First);
				return (++_Firstb);
				}
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Unique(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				{	
				for (; ++_First != _Last; )
					if (!_Pred(*_Firstb, *_First))
						*++_Firstb = _Move(*_First);
				return (++_Firstb);
				}
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest++ = _Val; ++_First != _Last; )
		if (!(_Val == *_First))
			{	
			_Val = *_First;
			*_Dest++ = _Val;
			}
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag)
	{	
	return (_Unique_copy(_First, _Last, _Dest,
		_Val_type(_First)));
	}

template<class _FwdIt,
	class _OutIt> inline
	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, forward_iterator_tag)
	{	
	_FwdIt _Firstb = _First;
	for (*_Dest++ = *_Firstb; ++_First != _Last; )
		if (!(*_Firstb == *_First))
			{	
			_Firstb = _First;
			*_Dest++ = *_Firstb;
			}
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_First == _Last ? _Dest :
		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Iter_cat(_First)));
	}

 










































#line 2003 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = *_First;

	for (*_Dest++ = _Val; ++_First != _Last; )
		if (!_Pred(_Val, *_First))
			{	
			_Val = *_First;
			*_Dest++ = _Val;
			}
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, input_iterator_tag)
	{	
	return (_Unique_copy(_First, _Last, _Dest, _Pred,
		_Val_type(_First)));
	}

template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr _Pred, forward_iterator_tag)
	{	
	_FwdIt _Firstb = _First;

	for (*_Dest++ = *_Firstb; ++_First != _Last; )
		if (!_Pred(*_Firstb, *_First))
			{	
			_Firstb = _First;
			*_Dest++ = *_Firstb;
			}
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_First == _Last ? _Dest :
		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Pred, _Iter_cat(_First)));
	}

 














































#line 2110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	for (; _First != _Last; ++_Dest)
		*_Dest = *--_Last;
	return (_Dest);
	}

 
template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest));
	}

 

































































#line 2199 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest)
	{	
	_Dest = ::std:: copy(_Mid, _Last, _Dest);
	return (::std:: copy(_First, _Mid, _Dest));
	}

		
template<class _RanIt,
	class _Diff> inline
	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Diff *)
	{	
	const int _RANDOM_BITS = 15;	
	const int _RANDOM_MAX = (1U << _RANDOM_BITS) - 1;

	_RanIt _Next = _First;
	for (unsigned long _Index = 2; ++_Next != _Last; ++_Index)
		{	
		unsigned long _Rm = _RANDOM_MAX;
		unsigned long _Rn = :: rand() & _RANDOM_MAX;
		for (; _Rm < _Index && _Rm != ~0UL;
			_Rm = _Rm << _RANDOM_BITS | _RANDOM_MAX)
			_Rn = _Rn << _RANDOM_BITS
				| (:: rand() & _RANDOM_MAX);	

		::std:: iter_swap(_Next, _First + _Diff(_Rn % _Index));	
		}
	}

template<class _RanIt> inline
	void random_shuffle(_RanIt _First, _RanIt _Last)
	{	
	;
	if (_First != _Last)
		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First));
	}

		
template<class _RanIt,
	class _Fn1,
	class _Diff> inline
	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)
	{	
	_RanIt _Next = _First;
	for (_Diff _Index = 2; ++_Next != _Last; ++_Index)
		::std:: iter_swap(_Next, _First + _Diff(_Func(_Index) % _Index));
	}

template<class _RanIt,
	class _Fn1> inline
	void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func)
	{	
	;
	;
	if (_First != _Last)
		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,
			_Dist_type(_First));
	}

		
template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	for (; ; ++_First)
		{	
		for (; _First != _Last && _Pred(*_First); ++_First)
			;	
		if (_First == _Last)
			break;	

		for (; _First != --_Last && !_Pred(*_Last); )
			;	
		if (_First == _Last)
			break;	

		::std:: iter_swap(_First, _Last);	
		}
	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count == 0)
		return (_First);
	else if (_Count == 1)
		return (_Pred(*_First) ? _Last : _First);
	else if (_Count <= _Tempbuf._Maxlen())
		{	
		_BidIt _Next = _First;
		for (_Tempbuf._Init(); _First != _Last; ++_First)
			if (_Pred(*_First))
				*_Next++ = _Move(*_First);
			else
				*_Tempbuf++ = _Move(*_First);

		_Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);	
		return (_Next);
		}
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count / 2);

		_BidIt _Left = _Stable_partition(_First, _Mid, _Pred,
			_Count / 2, _Tempbuf);	
		_BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,
			_Count - _Count / 2, _Tempbuf);	

		_Diff _Count1 = 0;
		_Distance(_Left, _Mid, _Count1);
		_Diff _Count2 = 0;
		_Distance(_Mid, _Right, _Count2);

		return (_Buffered_rotate(_Left, _Mid, _Right,
			_Count1, _Count2, _Tempbuf));	
		}
	}

template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf(_Count);
	return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_First == _Last ? _First
		: _Rechecked(_First,
			_Stable_partition(_Unchecked(_First), _Unchecked(_Last),
				_Pred, _Dist_type(_First), _Val_type(_First))));
	}

 


































#line 2400 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
  
  
 #line 2403 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Push_heap(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty && _Val)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && ((*(_First + _Idx)) < (_Val));
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = _Move(_Val);	
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Count = _Last - _First;
	if (0 < _Count)
		{	
		_Ty _Val = _Move(*_Last);
		_Push_heap(_First, _Count, _Diff(0), _Move(_Val));
		}
	}

template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	if (_First != _Last)
		{	
		--_Last;
		;
		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
		}
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty && _Val, _Pr _Pred)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && _Pred(*(_First + _Idx), _Val);
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = _Move(_Val);	
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Count = _Last - _First;
	if (0 < _Count)
		{	
		_Ty _Val = _Move(*_Last);
		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		{	
		--_Last;
		;
		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
		}
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty && _Val)
	{	
	_Diff _Top = _Hole;
	_Diff _Idx = 2 * _Hole + 2;

	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
		{	
		if (((*(_First + _Idx)) < (*(_First + (_Idx - 1)))))
			--_Idx;
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Bottom)
		{	
		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}
	_Push_heap(_First, _Hole, _Top, _Move(_Val));
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty && _Val, _Diff *)
	{	
	*_Dest = _Move(*_First);
	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
		_Move(_Val));
	}

template<class _RanIt,
	class _Ty> inline
	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Ty *)
	{	
	_Ty _Val = _Move(*(_Last - 1));
	_Pop_heap(_First, _Last - 1, _Last - 1,
		_Move(_Val), _Dist_type(_First));
	}

template<class _RanIt> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last)
	{	
	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last),
		_Val_type(_First));
	}

template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	;
	if (1 < _Last - _First)
		_Pop_heap(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty && _Val, _Pr _Pred)
	{	
	_Diff _Top = _Hole;
	_Diff _Idx = 2 * _Hole + 2;

	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
		{	
		if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Bottom)
		{	
		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}
	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty && _Val, _Pr _Pred, _Diff *)
	{	
	*_Dest = _Move(*_First);
	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
		_Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = _Move(*(_Last - 1));
	_Pop_heap(_First, _Last - 1, _Last - 1,
		_Move(_Val), _Pred, _Dist_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	if (1 < _Last - _First)
		_Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Make_heap(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Bottom = _Last - _First;

	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
		{	
		--_Hole;
		_Ty _Val = _Move(*(_First + _Hole));
		_Adjust_heap(_First, _Hole, _Bottom,
			_Move(_Val));
		}
	}

template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	if (1 < _Last - _First)
		_Make_heap(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Bottom = _Last - _First;
	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
		{	
		--_Hole;
		_Ty _Val = _Move(*(_First + _Hole));
		_Adjust_heap(_First, _Hole, _Bottom,
			_Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (1 < _Last - _First)
		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _RanIt> inline
	void _Sort_heap(_RanIt _First, _RanIt _Last)
	{	
	for (; 1 < _Last - _First; --_Last)
		_Pop_heap(_First, _Last);
	}

template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	;
	_Sort_heap(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	for (; 1 < _Last - _First; --_Last)
		_Pop_heap(_First, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (*_Mid < _Val)

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	

	return (_Rechecked(_First,
		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!(_Val < *_Mid))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	

	return (_Rechecked(_First,
		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!_Pred(_Val, *_Mid))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (((*_Mid) < (_Val)))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Val < *_Mid)
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty> inline
	::std:: pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
			_Val, _Dist_type(_First)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_Mid))
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val, _Pred);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val, _Pred);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
			_Val, _Pred, _Dist_type(_First)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = ::std:: lower_bound(_First, _Last, _Val);
	return (_First != _Last && !(_Val < *_First));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_First = ::std:: lower_bound(_First, _Last, _Val, _Pred);
	return (_First != _Last && !_Pred(_Val, *_First));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)
		if (((*_First2) < (*_First1)))
			{	
			*_Dest = _Move(*_First2);
			++_First2;
			}
		else
			{	
			*_Dest = _Move(*_First1);
			++_First1;
			}

	_Dest = _Move(_First1, _Last1, _Dest);	
	return (_Move(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 





















































































#line 3116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)
		if (_Pred(*_First2, *_First1))
			{	
			*_Dest = _Move(*_First2);
			++_First2;
			}
		else
			{	
			*_Dest = _Move(*_First1);
			++_First1;
			}

	_Dest = _Move(_First1, _Last1, _Dest);	
	return (_Move(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 




























































































#line 3250 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt,
	class _Diff,
	class _Ty> inline
	_BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Move(_Mid, _Last, _First);
		return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),
			_Last));
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Move_backward(_First, _Mid, _Last);
		return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));
		}
	else
		{	
		::std:: rotate(_First, _Mid, _Last);
		::std:: advance(_First, _Count2);
		return (_First);
		}
	}

template<class _BidIt1,
	class _BidIt2,
	class _BidIt3> inline
	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest)
	{	
	for (; ; )
		if (_First1 == _Last1)
			return (_Move_backward(_First2, _Last2, _Dest));
		else if (_First2 == _Last2)
			return (_Move_backward(_First1, _Last1, _Dest));
		else if (((*--_Last2) < (*--_Last1)))
			{	
			*--_Dest = _Move(*_Last1);
			++_Last2;
			}
		else
			{	
			*--_Dest = _Move(*_Last2);
			++_Last1;
			}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 + _Count2 == 2)
		{	
		if (((*_Mid) < (*_First)))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Merge(_Tempbuf._First(), _Tempbuf._Last(), _Mid, _Last, _First);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Merge_backward(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;

		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2, _Count2n = 0;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn);
			_Distance(_Mid, _Lastn, _Count2n);
			}
		else
			{	
			_Count1n = 0, _Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn);
			_Distance(_First, _Firstn, _Count1n);
			}

		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff *, _Ty *)
	{	
	_Diff _Count1 = 0;
	_Distance(_First, _Mid, _Count1);
	_Diff _Count2 = 0;
	_Distance(_Mid, _Last, _Count2);
	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
	_Buffered_merge(_First, _Mid, _Last,
		_Count1, _Count2, _Tempbuf);
	}

template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Inplace_merge(
			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt1,
	class _BidIt2,
	class _BidIt3,
	class _Pr> inline
	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
	{	
	for (; ; )
		if (_First1 == _Last1)
			return (_Move_backward(_First2, _Last2, _Dest));
		else if (_First2 == _Last2)
			return (_Move_backward(_First1, _Last1, _Dest));
		else if (_Pred(*--_Last2, *--_Last1))
			{	
			*--_Dest = _Move(*_Last1);
			++_Last2;
			}
		else
			{	
			*--_Dest = _Move(*_Last2);
			++_Last1;
			}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count1 + _Count2 == 2)
		{	
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
			_Mid, _Last, _First, _Pred);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Merge_backward(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;
		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2, _Count2n = 0;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
			_Distance(_Mid, _Lastn, _Count2n);
			}
		else
			{	
			_Count1n = 0, _Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
			_Distance(_First, _Firstn, _Count1n);
			}
		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf, _Pred);	
		_Buffered_merge(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count1 = 0;
	_Distance(_First, _Mid, _Count1);
	_Diff _Count2 = 0;
	_Distance(_Mid, _Last, _Count2);
	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
	_Buffered_merge(_First, _Mid, _Last,
		_Count1, _Count2, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Inplace_merge(
			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt,
	class _Ty> inline
	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Ty *)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Ty _Val = _Move(*_Next);

			if (((_Val) < (*_First)))
				{	
				_Move_backward(_First, _Next, ++_Next1);
				*_First = _Move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					((_Val) < (*--_First1));
					_Next1 = _First1)
					*_Next1 = _Move(*_First1);	
				*_Next1 = _Move(_Val);	
				}
			}
	}

template<class _BidIt> inline
	void _Insertion_sort(_BidIt _First, _BidIt _Last)
	{	
	_Insertion_sort1(_First, _Last, _Val_type(_First));
	}

template<class _RanIt> inline
	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	if (((*_Mid) < (*_First)))
		::std:: iter_swap(_Mid, _First);
	if (((*_Last) < (*_Mid)))
		::std:: iter_swap(_Last, _Mid);
	if (((*_Mid) < (*_First)))
		::std:: iter_swap(_Mid, _First);
	}

template<class _RanIt> inline
	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3(_First, _First + _Step, _First + 2 * _Step);
		_Med3(_Mid - _Step, _Mid, _Mid + _Step);
		_Med3(_Last - 2 * _Step, _Last - _Step, _Last);
		_Med3(_First + _Step, _Mid, _Last - _Step);
		}
	else
		_Med3(_First, _Mid, _Last);
	}

template<class _RanIt> inline
	::std:: pair<_RanIt, _RanIt>
		_Unguarded_partition(_RanIt _First, _RanIt _Last)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;	
	_Median(_First, _Mid, _Last - 1);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !((*(_Pfirst - 1)) < (*_Pfirst))
		&& !(*_Pfirst < *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !((*_Plast) < (*_Pfirst))
		&& !(*_Pfirst < *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (((*_Pfirst) < (*_Gfirst)))
				;
			else if (*_Gfirst < *_Pfirst)
				break;
			else
				::std:: iter_swap(_Plast++, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (((*(_Glast - 1)) < (*_Pfirst)))
				;
			else if (*_Pfirst < *(_Glast - 1))
				break;
			else
				::std:: iter_swap(--_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (::std:: pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff> inline
	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal)
	{	
	_Diff _Count;
	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort(_First, _Mid.first, _Ideal);
			_First = _Mid.second;
			}
		else
			{	
			_Sort(_Mid.second, _Last, _Ideal);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		::std:: make_heap(_First, _Last);
		::std:: sort_heap(_First, _Last);
		}
	else if (1 < _Count)
		_Insertion_sort(_First, _Last);	
	}

template<class _RanIt> inline
	void sort(_RanIt _First, _RanIt _Last)
	{	
	;
	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First);
	}

		
template<class _BidIt,
	class _Pr,
	class _Ty> inline
	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Ty _Val = _Move(*_Next);

			if (_Pred(_Val, *_First))
				{	
				_Move_backward(_First, _Next, ++_Next1);
				*_First = _Move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Pred(_Val, *--_First1);
					_Next1 = _First1)
					*_Next1 = _Move(*_First1);	
				*_Next1 = _Move(_Val);	
				}
			}
	}

template<class _BidIt,
	class _Pr> inline
	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	if (_Pred(*_Last, *_Mid))
		::std:: iter_swap(_Last, _Mid);
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	}

template<class _RanIt,
	class _Pr> inline
	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);
		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		_Med3(_First, _Mid, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	::std:: pair<_RanIt, _RanIt>
		_Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;
	_Median(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Pred(*(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !_Pred(*_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (_Pred(*_Pfirst, *_Gfirst))
				;
			else if (_Pred(*_Gfirst, *_Pfirst))
				break;
			else
				::std:: iter_swap(_Plast++, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (_Pred(*(_Glast - 1), *_Pfirst))
				;
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				break;
			else
				::std:: iter_swap(--_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (::std:: pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff,
	class _Pr> inline
	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
	{	
	_Diff _Count;
	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		::std:: make_heap(_First, _Last, _Pred);
		::std:: sort_heap(_First, _Last, _Pred);
		}
	else if (1 < _Count)
		_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff> inline
	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Chunk);

		_Merge(_First, _Mid, _Mid, _Last, _Dest);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midend = _Mid;
		::std:: advance(_Midend, (int)_ISORT_MAX);

		_Insertion_sort(_Mid, _Midend);
		_Mid = _Midend;
		}
	_Insertion_sort(_Mid, _Last);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count);
		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort(_First, _Last);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf);
			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);
			}
		else
			{	
			_Stable_sort(_First, _Mid, _Count2, _Tempbuf);
			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);
			}

		_Buffered_merge(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf);	
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
	_Stable_sort(_First, _Last, _Count, _Tempbuf);
	}

template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	;
	if (_First != _Last)
		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff,
	class _Pr> inline
	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count, _Pr _Pred)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);

		_Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midn = _Mid;
		::std:: advance(_Midn, (int)_ISORT_MAX);

		_Insertion_sort(_Mid, _Midn, _Pred);
		_Mid = _Midn;
		}
	_Insertion_sort(_Mid, _Last, _Pred);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count, _Pred);
		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort(_First, _Last, _Pred);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
				_Tempbuf, _Pred);
			}
		else
			{	
			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
			}

		_Buffered_merge(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf, _Pred);	
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First), _Pred);
	}

		
template<class _RanIt,
	class _Ty> inline
	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Ty *)
	{	
	;
	;
	::std:: make_heap(_First, _Mid);

	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (((*_Next) < (*_First)))
			{	
			_Ty _Val = _Move(*_Next);
			_Pop_heap(_First, _Mid, _Next, _Move(_Val),
				_Dist_type(_First));
			}
	::std:: sort_heap(_First, _Mid);
	}

template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	_Partial_sort(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
		_Val_type(_First));
	}

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		_Pr _Pred, _Ty *)
	{	
	;
	;
	;
	::std:: make_heap(_First, _Mid, _Pred);

	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (_Pred(*_Next, *_First))
			{	
			_Ty _Val = _Move(*_Next);
			_Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,
				_Dist_type(_First));
			}
	::std:: sort_heap(_First, _Mid, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	_Partial_sort(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

		
template<class _InIt,
	class _RanIt,
	class _Diff,
	class _Ty> inline
	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Diff *, _Ty *)
	{	
	_RanIt _Mid2 = _First2;
	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
		*_Mid2 = *_First1;	
	::std:: make_heap(_First2, _Mid2);

	for (; _First1 != _Last1; ++_First1)
		if (((*_First1) < (*_First2)))
			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
				_Ty(*_First1));	

	::std:: sort_heap(_First2, _Mid2);
	return (_Mid2);
	}

template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	;
	;
	return (_First1 == _Last1 || _First2 == _Last2 ? _First2
		: _Rechecked(_First2,
			_Partial_sort_copy(
				_Unchecked(_First1), _Unchecked(_Last1),
				_Unchecked(_First2), _Unchecked(_Last2),
				_Dist_type(_First2), _Val_type(_First1))));
	}

		
template<class _InIt,
	class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)
	{	
	_RanIt _Mid2 = _First2;
	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
		*_Mid2 = *_First1;	
	::std:: make_heap(_First2, _Mid2, _Pred);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, *_First2))
			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
				_Ty(*_First1), _Pred);	

	::std:: sort_heap(_First2, _Mid2, _Pred);
	return (_Mid2);
	}

template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_First1 == _Last1 || _First2 == _Last2 ? _First2
		: _Rechecked(_First2,
			_Partial_sort_copy(
				_Unchecked(_First1), _Unchecked(_Last1),
				_Unchecked(_First2), _Unchecked(_Last2), _Pred,
				_Dist_type(_First2), _Val_type(_First1))));
	}

		
template<class _RanIt> inline
	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	for (; _ISORT_MAX < _Last - _First; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort(_First, _Last);	
	}

template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	;
	_Nth_element(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	for (; _ISORT_MAX < _Last - _First; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Nth_element(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool _Includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First2) < (*_First1)))
			return (false);
		else if (*_First1 < *_First2)
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}
	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	;
	;
	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2)));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First2, *_First1))
			return (false);
		else if (_Pred(*_First1, *_First2))
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}
	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 




















































#line 4378 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 
























































#line 4479 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			++_First1;
		else if (*_First2 < *_First1)
			++_First2;
		else
			{	
			*_Dest++ = *_First1++;
			++_First2;
			}
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 




















































#line 4566 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			++_First1;
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			*_Dest++ = *_First1++;
			++_First2;
			}
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 
























































#line 4659 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}
	return (::std:: copy(_First1, _Last1, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 






















































#line 4753 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}
	return (::std:: copy(_First1, _Last1, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 


























































#line 4853 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_symmetric_difference(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 























































#line 4953 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_symmetric_difference(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 



























































#line 5059 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt> inline
	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (((*_Found) < (*_First)))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Max_element(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_Found, *_First))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (((*_First) < (*_Found)))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Min_element(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_First, *_Found))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

 
		
template<class _FwdIt> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	::std:: pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (((*_First) < (*_Found.first)))
					_Found.first = _First;
				else if (((*_Found.second) < (*_First)))
					_Found.second = _First;
				}
			else
				{	
				if (((*_Next) < (*_First)))
					{	
					if (((*_Next) < (*_Found.first)))
						_Found.first = _Next;
					if (((*_Found.second) < (*_First)))
						_Found.second = _First;
					}
				else
					{	
					if (((*_First) < (*_Found.first)))
						_Found.first = _First;
					if (((*_Found.second) < (*_Next)))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}
	return (_Found);
	}

template<class _FwdIt> inline
	::std:: pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Minmax_element(_Unchecked(_First), _Unchecked(_Last)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	::std:: pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Pred(*_First, *_Found.first))
					_Found.first = _First;
				else if (_Pred(*_Found.second, *_First))
					_Found.second = _First;
				}
			else
				{	
				if (_Pred(*_Next, *_First))
					{	
					if (_Pred(*_Next, *_Found.first))
						_Found.first = _Next;
					if (_Pred(*_Found.second, *_First))
						_Found.second = _First;
					}
				else
					{	
					if (_Pred(*_First, *_Found.first))
						_Found.first = _First;
					if (_Pred(*_Found.second, *_Next))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}
 #line 5254 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt> inline
	bool _Next_permutation(_BidIt _First, _BidIt _Last)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (((*--_Next) < (*_Next1)))
			{	
			_BidIt _Mid = _Last;
			for (; !((*_Next) < (*--_Mid)); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	;
	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last)));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*--_Next, *_Next1))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*_Next, *--_Mid); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool _Prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);
	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (((*_Next1) < (*--_Next)))
			{	
			_BidIt _Mid = _Last;
			for (; !((*--_Mid) < (*_Next)); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	;
	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last)));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*_Next1, *--_Next))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*--_Mid, *_Next); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

 
		
template<class _RanIt,
	class _Diff> inline
	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Diff *)
	{	
	_Diff _Size = _Last - _First;

	if (2 <= _Size)
		for (_Diff _Off = 0; ++_Off < _Size; )
			if (((*(_First + (_Off - 1) / 2)) < (*(_First + _Off))))
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First))));
	}

template<class _RanIt>
	bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (_Is_heap_until(_First, _Last, _Dist_type(_First))
		== _Last);
	}

		
template<class _RanIt,
	class _Diff,
	class _Pr> inline
	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)
	{	
	_Diff _Size = _Last - _First;

	if (2 <= _Size)
		for (_Diff _Off = 0; ++_Off < _Size; )
			if (_Pred(*(_First + (_Off - 1) / 2), *(_First + _Off)))
#line 5447 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt,
	class _Pr>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First))));
	}

template<class _RanIt,
	class _Pr>
	bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	return (_Is_heap_until(_First, _Last, _Pred, _Dist_type(_First))
		== _Last);
	}

		
template<class _FwdIt> inline
	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
		if (((*_Next) < (*_First)))
			return (_First);
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last))));
	}

template<class _FwdIt> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last) == _Last);
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
		if (_Pred(*_Next, *_First))
			return (_First);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

template<class _FwdIt,
	class _Pr> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	return (::std:: is_sorted_until(_First, _Last, _Pred) == _Last);
	}
 #line 5522 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 5527 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
#line 5528 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"























#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config/no_tr1/cmath.hpp"




























#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"








#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"




















































#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		
template<class _Container>
	class back_insert_iterator
		: public _Outit
	{	
public:
	typedef back_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	explicit back_insert_iterator(_Container& _Cont)
		: container(&_Cont)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_back(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<back_insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (::std:: back_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class front_insert_iterator
		: public _Outit
	{	
public:
	typedef front_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	explicit front_insert_iterator(_Container& _Cont)
		: container(&_Cont)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_front(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_front(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<front_insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	front_insert_iterator<_Container> front_inserter(_Container& _Cont)
	{	
	return (::std:: front_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class insert_iterator
		: public _Outit
	{	
public:
	typedef insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
		: container(&_Cont), iter(_Where)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		iter = container->insert(iter, _Val);
		++iter;
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
		++iter;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	typename _Container::iterator iter;	
	};

template<class _Container>
	struct _Is_checked_helper<insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where)
	{	
	return (::std:: insert_iterator<_Container>(_Cont, _Where));
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
 	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
 	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
 	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef value_type&& reference;
	typedef _RanIt iterator_type;

	move_iterator()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (move(*current));
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
	: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2> inline
	typename _RanIt1::difference_type operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(const _RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem>,
	class _Diff = ptrdiff_t>
	class istream_iterator
		: public iterator<input_iterator_tag, _Ty, _Diff,
			const _Ty *, const _Ty&>
	{	
	typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	istream_iterator()
		: _Myistr(0)
		{	
		}

	istream_iterator(istream_type& _Istr)
		: _Myistr(&_Istr)
		{	
		_Getval();
		}

	const _Ty& operator*() const
		{	
		return (_Myval);
		}

	const _Ty *operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		_Getval();
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool _Equal(const _Myt& _Right) const
		{	
		return (_Myistr == _Right._Myistr);
		}

protected:
	void _Getval()
		{	
		if (_Myistr != 0 && !(*_Myistr >> _Myval))
			_Myistr = 0;
		}

	istream_type *_Myistr;	
	_Ty _Myval;	
	};

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator==(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator!=(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (!(_Left == _Right));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem> >
	class ostream_iterator
		: public _Outit
	{	
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostream_iterator(ostream_type& _Ostr,
		const _Elem *_Delim = 0)
		: _Myostr(&_Ostr), _Mydelim(_Delim)
		{	
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
		{	
		*_Myostr << _Val;
		if (_Mydelim != 0)
			*_Myostr << _Mydelim;
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator*()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator++()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits> operator++(int)
		{	
		return (*this);
		}

protected:
	const _Elem *_Mydelim;	
	ostream_type *_Myostr;	
	};

template<class _Ty,
	class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};
}

namespace stdext {
		
template<class _Iterator>
	class checked_array_iterator
	{	
public:
	typedef checked_array_iterator<_Iterator> _Myt;

	typedef typename ::std:: iterator_traits<_Iterator>::iterator_category iterator_category;
	typedef typename ::std:: iterator_traits<_Iterator>::value_type value_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type difference_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type distance_type;	
	typedef typename ::std:: iterator_traits<_Iterator>::pointer pointer;
	typedef typename ::std:: iterator_traits<_Iterator>::reference reference;

	checked_array_iterator()
		: _Myarray(), _Mysize(0), _Myindex(0)
		{	
		}

	checked_array_iterator(_Iterator _Array, ::std:: size_t _Size, ::std:: size_t _Index = 0)
		: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
		{	
		{ if (!(_Index <= _Size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}

	_Iterator base() const
		{	
		return (_Myarray + _Myindex);
		}


	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myindex = _Right - _Myarray;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}


	reference operator*() const
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myarray[_Myindex]);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		++_Myindex;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		{ if (!(_Myarray != 0 && _Myindex > 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		--_Myindex;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		{ if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Myindex += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex - _Right._Myindex);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex == _Right._Myindex);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex < _Right._Myindex);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myarray;	
	::std:: size_t _Mysize;	
	::std:: size_t _Myindex;	
	};

template<class _Iterator> inline
	typename checked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(checked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator>&
		_Rechecked(checked_array_iterator<_Iterator>& _Iter,
			typename checked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> operator+(
		typename checked_array_iterator<_Iterator>::difference_type _Off,
		checked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> make_checked_array_iterator(
		_Iterator _Array, ::std:: size_t _Size, ::std:: size_t _Index = 0)
	{	
	return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
	}

		
template<class _Iterator>
	class unchecked_array_iterator
	{	
public:
	typedef unchecked_array_iterator<_Iterator> _Myt;

	typedef typename ::std:: iterator_traits<_Iterator>::iterator_category iterator_category;
	typedef typename ::std:: iterator_traits<_Iterator>::value_type value_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type difference_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type distance_type;	
	typedef typename ::std:: iterator_traits<_Iterator>::pointer pointer;
	typedef typename ::std:: iterator_traits<_Iterator>::reference reference;

	unchecked_array_iterator()
		: _Myptr()
		{	
		}

	explicit unchecked_array_iterator(_Iterator _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	_Iterator base() const
		{	
		return (_Myptr);
		}


	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}


	reference operator*() const
		{	
		return (*_Myptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		++_Myptr;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--_Myptr;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		_Myptr += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Myptr - _Right._Myptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (_Myptr == _Right._Myptr);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		return (_Myptr < _Right._Myptr);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myptr;	
	};

template<class _Iterator> inline
	typename unchecked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(unchecked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator>&
		_Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
			typename unchecked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> operator+(
		typename unchecked_array_iterator<_Iterator>::difference_type _Off,
		unchecked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
		_Iterator _Ptr)
	{	
	return (unchecked_array_iterator<_Iterator>(_Ptr));
	}
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 937 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"
#line 938 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"






















#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"
















#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"


    
namespace boost { namespace detail {


template <class Iterator>
struct iterator_traits
    : std::iterator_traits<Iterator>
{};
using std::distance;

}} 

















































































































































































































































































































































































































#line 489 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"





#line 495 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/iterator.hpp"
#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"






















#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"

































#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"



#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"




















#line 113 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"




#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"





#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"










#line 136 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_def.hpp"


#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"







































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/identity.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"















































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/identity.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/identity.hpp"

namespace boost { namespace mpl {

template<
      typename T = na
    >
struct identity
{
    typedef T type;
    
};

template<
      typename T = na
    >
struct make_identity
{
    typedef identity<T> type;
    
};

template<> struct identity<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : identity<  T1 > { }; }; template< typename Tag > struct lambda< identity<  na > , Tag  > { typedef false_ is_le; typedef identity<  na > result_; typedef identity<  na > type; };  
template<> struct make_identity<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : make_identity<  T1 > { }; }; template< typename Tag > struct lambda< make_identity<  na > , Tag  > { typedef false_ is_le; typedef make_identity<  na > result_; typedef make_identity<  na > type; };  

}}

#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/identity.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"






















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg_fwd.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg_fwd.hpp"

namespace boost { namespace mpl {

template< int N > struct arg;

}}


#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg_fwd.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"




















#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"



#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"

#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_spec.hpp"















































































































































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"

namespace boost { namespace mpl {

namespace aux {

template< long C_ > 
struct not_impl
    : bool_<!C_>
{
};

} 


template<
      typename T = na
    >
struct not_
    : aux::not_impl<
          T::type::value
        >
{
    
};

template<> struct not_<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : not_<  T1 > { }; }; template< typename Tag > struct lambda< not_<  na > , Tag  > { typedef false_ is_le; typedef not_<  na > result_; typedef not_<  na > type; };   

}}

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/not.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/value_wknd.hpp"

























































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nested_type_wknd.hpp"
















































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/arrays.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/arrays.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/arrays.hpp"





#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/arrays.hpp"

#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/arrays.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"


namespace boost { namespace mpl { namespace aux {

typedef char (&no_tag)[1];
typedef char (&yes_tag)[2];

template< bool C_ > struct yes_no_tag
{
    typedef no_tag type;
};

template<> struct yes_no_tag<true>
{
    typedef yes_tag type;
};


template< long n > struct weighted_tag
{

    typedef char (&type)[n];



#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
};






#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"

}}}

#line 59 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/yes_no.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na.hpp"































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/nttp.hpp"









































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"














































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/pp_counter.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/pp_counter.hpp"




#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/pp_counter.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/pp_counter.hpp"

#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/pp_counter.hpp"
#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"





#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"



#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"






#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"


namespace boost { namespace mpl {

struct failed {};






#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

template< bool C >  struct assert { typedef void* type; };
template<>          struct assert<false> { typedef assert type; };

template< bool C >
int assertion_failed( typename assert<C>::type );

template< bool C >
struct assertion
{
    static int failed( assert<false> );
};

template<>
struct assertion<true>
{
    static int failed( void* );
};

struct assert_
{

    template< typename T1, typename T2 = na, typename T3 = na, typename T4 = na > struct types {};
#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
    static assert_ const arg;
    enum relations { equal = 1, not_equal, greater, greater_equal, less, less_equal };
};




bool operator==( failed, failed );
bool operator!=( failed, failed );
bool operator>( failed, failed );
bool operator>=( failed, failed );
bool operator<( failed, failed );
bool operator<=( failed, failed );




#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
template< long x, long y, bool (*)(failed, failed) > 
struct assert_relation {};

#line 120 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"












#line 133 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"




template< bool > struct assert_arg_pred_impl { typedef int type; };
template<> struct assert_arg_pred_impl<true> { typedef void* type; };

template< typename P > struct assert_arg_pred
{
    typedef typename P::type p_type;
    typedef typename assert_arg_pred_impl< p_type::value >::type type;
};

template< typename P > struct assert_arg_pred_not
{
    typedef typename P::type p_type;
    static const bool p = !p_type::value;
    typedef typename assert_arg_pred_impl<p>::type type;
};

template< typename Pred >
failed ************ (Pred::************ 
      assert_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type )
    );

template< typename Pred >
failed ************ (boost::mpl::not_<Pred>::************ 
      assert_not_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type )
    );

template< typename Pred >
assert<false>
assert_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type );

template< typename Pred >
assert<false>
assert_not_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type );






































#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"



}}



























#line 241 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"










#line 252 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"



















































#line 304 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"












#line 317 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"









#line 327 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"

#line 329 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"




















#line 350 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"














#line 365 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"





#line 371 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/assert.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"








#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"

#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/na_assert.hpp"
#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/limits/arity.hpp"





















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"














































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity.hpp"







































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"









































#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
















#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"

#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
















#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"


#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arity_spec.hpp"
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"





#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"



#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/arg_typedef.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/use_preprocessed.hpp"


















#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/use_preprocessed.hpp"
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/dtp.hpp"














































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ttp.hpp"









































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/ctps.hpp"






























#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/msvc.hpp"





















#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/gcc.hpp"























#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"




#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"








#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"






#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"

#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"

#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"

#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"







































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/stringize.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/stringize.hpp"











#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/stringize.hpp"



#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/stringize.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"









#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessed/plain/arg.hpp"












namespace boost { namespace mpl {
template<> struct arg< -1 >
{
    static const int value = -1;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_0 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<1>
{
    static const int value = 1;
    typedef arg<2> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_1 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<2>
{
    static const int value = 2;
    typedef arg<3> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U2 type;
        static const std::size_t mpl_assertion_in_line_2 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<3>
{
    static const int value = 3;
    typedef arg<4> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U3 type;
        static const std::size_t mpl_assertion_in_line_3 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<4>
{
    static const int value = 4;
    typedef arg<5> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U4 type;
        static const std::size_t mpl_assertion_in_line_4 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<5>
{
    static const int value = 5;
    typedef arg<6> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U5 type;
        static const std::size_t mpl_assertion_in_line_5 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};



}}
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"




#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"













































#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"














































#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/arg.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"





#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"

#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"

#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/use_preprocessed.hpp"



















#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/compiler.hpp"


































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/preprocessor.hpp"







































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/stringize.hpp"

































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"









#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp"












namespace boost { namespace mpl {
typedef arg< -1 > _;
}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_;
}

}}



namespace boost { namespace mpl {
typedef arg<1> _1;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_1;
}

}}
namespace boost { namespace mpl {
typedef arg<2> _2;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_2;
}

}}
namespace boost { namespace mpl {
typedef arg<3> _3;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_3;
}

}}
namespace boost { namespace mpl {
typedef arg<4> _4;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_4;
}

}}
namespace boost { namespace mpl {
typedef arg<5> _5;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_5;
}

}}
namespace boost { namespace mpl {
typedef arg<6> _6;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_6;
}

}}
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/include_preprocessed.hpp"




#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"































#line 76 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"
#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"























#line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/placeholders.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"
















































































#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"







































































































#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"
























#line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"















#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"





































#line 164 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


























#line 191 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"




























#line 220 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"

#line 222 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"





#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"





















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"

namespace boost {































































































































































































































































































































































































template< typename From, typename To > struct is_convertible : public ::boost::integral_constant<bool,((__is_convertible_to(From,To) || is_same<From,To>::value) && !__is_abstract(To))> { public:   }; 

#line 426 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 430 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"

#line 432 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"





#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"










#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"







#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"

#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"
























































































#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"

#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"


#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

namespace boost {





struct no_traversal_tag {};

struct incrementable_traversal_tag 
  : no_traversal_tag
{


};
  
struct single_pass_traversal_tag
  : incrementable_traversal_tag
{


};
  
struct forward_traversal_tag
  : single_pass_traversal_tag
{


};
  
struct bidirectional_traversal_tag
  : forward_traversal_tag
{


};
  
struct random_access_traversal_tag
  : bidirectional_traversal_tag
{


};

namespace detail
{  
  
  
  
  
  
  
  template <class Cat>
  struct old_category_to_traversal
    : mpl::eval_if<
          is_convertible<Cat,std::random_access_iterator_tag>
        , mpl::identity<random_access_traversal_tag>
        , mpl::eval_if<
              is_convertible<Cat,std::bidirectional_iterator_tag>
            , mpl::identity<bidirectional_traversal_tag>
            , mpl::eval_if<
                  is_convertible<Cat,std::forward_iterator_tag>
                , mpl::identity<forward_traversal_tag>
                , mpl::eval_if<
                      is_convertible<Cat,std::input_iterator_tag>
                    , mpl::identity<single_pass_traversal_tag>
                    , mpl::eval_if<
                          is_convertible<Cat,std::output_iterator_tag>
                        , mpl::identity<incrementable_traversal_tag>
                        , void
                      >
                  >
              >
          >
      >
  {};







#line 107 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

  template <class Traversal>
  struct pure_traversal_tag
    : mpl::eval_if<
          is_convertible<Traversal,random_access_traversal_tag>
        , mpl::identity<random_access_traversal_tag>
        , mpl::eval_if<
              is_convertible<Traversal,bidirectional_traversal_tag>
            , mpl::identity<bidirectional_traversal_tag>
            , mpl::eval_if<
                  is_convertible<Traversal,forward_traversal_tag>
                , mpl::identity<forward_traversal_tag>
                , mpl::eval_if<
                      is_convertible<Traversal,single_pass_traversal_tag>
                    , mpl::identity<single_pass_traversal_tag>
                    , mpl::eval_if<
                          is_convertible<Traversal,incrementable_traversal_tag>
                        , mpl::identity<incrementable_traversal_tag>
                        , void
                      >
                  >
              >
          >
      >
  {
  };
  






#line 141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

} 





template <class Cat>
struct iterator_category_to_traversal
  : mpl::eval_if< 
        is_convertible<Cat,incrementable_traversal_tag>
      , mpl::identity<Cat>
      , boost::detail::old_category_to_traversal<Cat>
    >
{};


template <class Iterator = mpl::_1>
struct iterator_traversal
  : iterator_category_to_traversal<
        typename boost::detail::iterator_traits<Iterator>::iterator_category
    >
{};




















} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_undef.hpp"
























#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/detail/config_undef.hpp"
#line 187 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"

#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"






#pragma once
#line 9 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/detail/attribute_noreturn.hpp"














#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/detail/attribute_noreturn.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/detail/attribute_noreturn.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"




#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"



#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"









#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"

#pragma warning(push,1)
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"

namespace
boost
    {
    namespace
    exception_detail
        {
        template <class T>
        class
        refcount_ptr
            {
            public:

            refcount_ptr():
                px_(0)
                {
                }

            ~refcount_ptr()
                {
                release();
                }

            refcount_ptr( refcount_ptr const & x ):
                px_(x.px_)
                {
                add_ref();
                }

            refcount_ptr &
            operator=( refcount_ptr const & x )
                {
                adopt(x.px_);
                return *this;
                }

            void
            adopt( T * px )
                {
                release();
                px_=px;
                add_ref();
                }

            T *
            get() const
                {
                return px_;
                }

            private:

            T * px_;

            void
            add_ref()
                {
                if( px_ )
                    px_->add_ref();
                }

            void
            release()
                {
                if( px_ && px_->release() )
                    px_=0;
                }
            };
        }

    

    template <class Tag,class T>
    class error_info;

    typedef error_info<struct throw_function_,char const *> throw_function;
    typedef error_info<struct throw_file_,char const *> throw_file;
    typedef error_info<struct throw_line_,int> throw_line;

    template <>
    class
    error_info<throw_function_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_file_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_line_,int>
        {
        public:
        typedef int value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };





#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
    class exception;




#line 146 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"

    template <class T>
    class shared_ptr;

    namespace
    exception_detail
        {
        class error_info_base;
        struct type_info_;

        struct
        error_info_container
            {
            virtual char const * diagnostic_information( char const * ) const = 0;
            virtual shared_ptr<error_info_base> get( type_info_ const & ) const = 0;
            virtual void set( shared_ptr<error_info_base> const &, type_info_ const & ) = 0;
            virtual void add_ref() const = 0;
            virtual bool release() const = 0;
            virtual refcount_ptr<exception_detail::error_info_container> clone() const = 0;

            protected:

            ~error_info_container() throw()
                {
                }
            };

        template <class>
        struct get_info;

        template <>
        struct get_info<throw_function>;

        template <>
        struct get_info<throw_file>;

        template <>
        struct get_info<throw_line>;

        char const * get_diagnostic_information( exception const &, char const * );

        void copy_boost_exception( exception *, exception const * );

        template <class E,class Tag,class T>
        E const & set_info( E const &, error_info<Tag,T> const & );

        template <class E>
        E const & set_info( E const &, throw_function const & );

        template <class E>
        E const & set_info( E const &, throw_file const & );

        template <class E>
        E const & set_info( E const &, throw_line const & );
        }





#line 207 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
    class
    exception
        {
        protected:

        exception():
            throw_function_(0),
            throw_file_(0),
            throw_line_(-1)
            {
            }













        virtual ~exception() throw()

            = 0 
#line 235 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
            ;



#line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
        private:

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_function const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_file const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_line const & );

        template <class E,class Tag,class T>
        friend E const & exception_detail::set_info( E const &, error_info<Tag,T> const & );

        friend char const * exception_detail::get_diagnostic_information( exception const &, char const * );

        template <class>
        friend struct exception_detail::get_info;
        friend struct exception_detail::get_info<throw_function>;
        friend struct exception_detail::get_info<throw_file>;
        friend struct exception_detail::get_info<throw_line>;
        friend void exception_detail::copy_boost_exception( exception *, exception const * );
#line 263 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
        mutable exception_detail::refcount_ptr<exception_detail::error_info_container> data_;
        mutable char const * throw_function_;
        mutable char const * throw_file_;
        mutable int throw_line_;
        };




#line 273 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"

    inline
    exception::
    ~exception() throw()
        {
        }

    namespace
    exception_detail
        {
        template <class E>
        E const &
        set_info( E const & x, throw_function const & y )
            {
            x.throw_function_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_file const & y )
            {
            x.throw_file_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_line const & y )
            {
            x.throw_line_=y.v_;
            return x;
            }
        }

    

    namespace
    exception_detail
        {
        template <class T>
        struct
        error_info_injector:
            public T,
            public exception
            {
            explicit
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
                {
                }
            };

        struct large_size { char c[256]; };
        large_size dispatch_boost_exception( exception const * );

        struct small_size { };
        small_size dispatch_boost_exception( void const * );

        template <class,int>
        struct enable_error_info_helper;

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(large_size)>
            {
            typedef T type;
            };

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(small_size)>
            {
            typedef error_info_injector<T> type;
            };

        template <class T>
        struct
        enable_error_info_return_type
            {
            typedef typename enable_error_info_helper<T,sizeof(exception_detail::dispatch_boost_exception(static_cast<T *>(0)))>::type type;
            };
        }

    template <class T>
    inline
    typename
    exception_detail::enable_error_info_return_type<T>::type
    enable_error_info( T const & x )
        {
        typedef typename exception_detail::enable_error_info_return_type<T>::type rt;
        return rt(x);
        }

    

    namespace
    exception_detail
        {
        class
        clone_base
            {
            public:

            virtual clone_base const * clone() const = 0;
            virtual void rethrow() const = 0;

            virtual
            ~clone_base() throw()
                {
                }
            };

        inline
        void
        copy_boost_exception( exception * a, exception const * b )
            {
            refcount_ptr<error_info_container> data;
            if( error_info_container * d=b->data_.get() )
                data = d->clone();
            a->throw_file_ = b->throw_file_;
            a->throw_line_ = b->throw_line_;
            a->throw_function_ = b->throw_function_;
            a->data_ = data;
            }

        inline
        void
        copy_boost_exception( void *, void const * )
            {
            }

        template <class T>
        class
        clone_impl:
            public T,
            public clone_base
            {
            public:

            explicit
            clone_impl( T const & x ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            ~clone_impl() throw()
                {
                }

            private:

            clone_base const *
            clone() const
                {
                return new clone_impl(*this);
                }

            void
            rethrow() const
                {
                throw*this;
                }
            };
        }

    template <class T>
    inline
    exception_detail::clone_impl<T>
    enable_current_exception( T const & x )
        {
        return exception_detail::clone_impl<T>(x);
        }
    }


#pragma warning(pop)
#line 456 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
#line 457 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/exception/exception.hpp"
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"




#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"

namespace boost
{






inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> __declspec(noreturn) inline void throw_exception( E const & e )
{
    
    
    throw_exception_assert_compatibility(e);


    throw enable_current_exception(enable_error_info(e));


#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"
}

#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"


    namespace
    exception_detail
    {
        template <class E>
        __declspec(noreturn)
        void
        throw_exception_( E const & x, char const * current_function, char const * file, int line )
        {
            boost::throw_exception(
                set_info(
                    set_info(
                        set_info(
                            boost::enable_error_info(x),
                            throw_function(current_function)),
                        throw_file(file)),
                    throw_line(line)));
        }
    }
#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"
} 

#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/throw_exception.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"


































#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"










extern "C" {
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"

 void __cdecl _wassert(   const wchar_t * _Message,    const wchar_t *_File,   unsigned _Line);


}
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
  































  



#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"



#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"


































#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"










extern "C" {
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"

 void __cdecl _wassert(   const wchar_t * _Message,    const wchar_t *_File,   unsigned _Line);


}
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"



#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\assert.h"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"

#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"













#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
  































  



#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"











#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"



#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/assert.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"


















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"

namespace boost
{












#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"

  
  
  namespace detail {
   template <class Category, class T, class Distance, class Pointer, class Reference>

   struct iterator_base : std::iterator<Category, T, Distance, Pointer, Reference> {};







#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"
  }

  template <class Category, class T, class Distance = std::ptrdiff_t,
            class Pointer = T*, class Reference = T&>
  struct iterator : boost::detail::iterator_base<Category, T, Distance, Pointer, Reference> {};
#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"
} 

#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/compressed_pair.hpp"




















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"










#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"



































































#line 94 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"





#line 100 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"

















#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"







namespace boost {
namespace detail {





#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"

template <typename T> struct cv_traits_imp {};

template <typename T>
struct cv_traits_imp<T*>
{
    static const bool is_const = false;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<const T*>
{
    static const bool is_const = true;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<volatile T*>
{
    static const bool is_const = false;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<const volatile T*>
{
    static const bool is_const = true;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

























#line 91 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"

} 
} 

#line 96 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"

#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"




















































#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"

namespace boost {

namespace detail{

template <class T>
struct rvalue_ref_filter_rem_cv
{
   typedef typename boost::detail::cv_traits_imp<T*>::unqualified_type type;
};






template <class T>
struct rvalue_ref_filter_rem_cv<T&&>
{
   typedef T&& type;
};
#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"

}




template< typename T > struct remove_cv { public: typedef typename boost::detail::rvalue_ref_filter_rem_cv<T>::type type;  }; 
template< typename T > struct remove_cv<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_cv<T const[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T volatile[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T const volatile[N]> { public: typedef T type[N]; };
#line 62 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"















#line 78 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"

#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"
#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_convertible.hpp"















































































































































































































































































































































































































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"

namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = false, bool b4 = false, bool b5 = false, bool b6 = false, bool b7 = false>
struct ice_or;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_or
{
    static const bool value = true;
};

template <>
struct ice_or<false, false, false, false, false, false, false>
{
    static const bool value = false;
};

} 
} 

#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"



















































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"












#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"






















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"

namespace boost {

namespace detail {














































































template <typename T>
struct is_class_impl
{
    static const bool value = __is_class(T);
};
#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"

} 





template< typename T > struct is_class : public ::boost::integral_constant<bool,::boost::detail::is_class_impl<T>::value> { public:   }; 
#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"
    
} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"

#line 141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_class.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"







#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"

namespace boost {



#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"

template< typename T > struct is_lvalue_reference : public ::boost::integral_constant<bool,false> { public:   }; 
template< typename T > struct is_lvalue_reference< T& > : public ::boost::integral_constant<bool,true> { public:  };









#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"













#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"













































#line 112 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 116 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"

#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_lvalue_reference.hpp"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"

namespace boost {

template< typename T > struct is_rvalue_reference : public ::boost::integral_constant<bool,false> { public:   }; 

template< typename T > struct is_rvalue_reference< T&& > : public ::boost::integral_constant<bool,true> { public:  };
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"

#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_rvalue_reference.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/yes_no_type.hpp"













namespace boost {
namespace type_traits {

typedef char yes_type;
struct no_type
{
   char padding[8];
};

} 
} 

#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/yes_no_type.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"


































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_and.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_and.hpp"

namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = true, bool b4 = true, bool b5 = true, bool b6 = true, bool b7 = true>
struct ice_and;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_and
{
    static const bool value = false;
};

template <>
struct ice_and<true, true, true, true, true, true, true>
{
    static const bool value = true;
};

} 
} 

#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_and.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_not.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_not.hpp"

namespace boost {
namespace type_traits {

template <bool b>
struct ice_not
{
    static const bool value = true;
};

template <>
struct ice_not<true>
{
    static const bool value = false;
};

} 
} 

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_not.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_eq.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_eq.hpp"

namespace boost {
namespace type_traits {

template <int b1, int b2>
struct ice_eq
{
    static const bool value = (b1 == b2);
};

template <int b1, int b2>
struct ice_ne
{
    static const bool value = (b1 != b2);
};


template <int b1, int b2> bool const ice_eq<b1,b2>::value;
template <int b1, int b2> bool const ice_ne<b1,b2>::value;
#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_eq.hpp"

} 
} 

#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_eq.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"

#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/ice.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"

namespace boost {

namespace detail {

template <typename T>
struct is_reference_impl
{
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_lvalue_reference<T>::value, ::boost::is_rvalue_reference<T>::value >::value);
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"
};

} 

template< typename T > struct is_reference : public ::boost::integral_constant<bool,::boost::detail::is_reference_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"

#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"

#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"




















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

namespace boost {

namespace detail {































#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"





template <typename T>
struct add_reference_rvalue_layer
{
    typedef T& type;
};


template <typename T>
struct add_reference_rvalue_layer<T&&>
{
    typedef T&& type;
};
#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

template <typename T>
struct add_reference_impl
{
    typedef typename add_reference_rvalue_layer<T>::type type;
};


template< typename T > struct add_reference_impl<T&> { public: typedef T& type; };
#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"


template<> struct add_reference_impl<void> { public: typedef void type; };

template<> struct add_reference_impl<void const> { public: typedef void const type; };
template<> struct add_reference_impl<void volatile> { public: typedef void volatile type; };
template<> struct add_reference_impl<void const volatile> { public: typedef void const volatile type; };
#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

} 

template< typename T > struct add_reference { public: typedef typename boost::detail::add_reference_impl<T>::type type;  }; 





#line 102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 106 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"

#line 108 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/add_reference.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"








#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"





#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"

namespace boost {

namespace detail {




#pragma warning(push)
#pragma warning(disable:4624) 
#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"

template <typename T>
struct empty_helper_t1 : public T
{
    empty_helper_t1();  
    int i[256];
private:
   
   empty_helper_t1(const empty_helper_t1&);
   empty_helper_t1& operator=(const empty_helper_t1&);
};


#pragma warning(pop)
#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"

struct empty_helper_t2 { int i[256]; };



template <typename T, bool is_a_class = false>
struct empty_helper
{
    static const bool value = false;
};

template <typename T>
struct empty_helper<T, true>
{
    static const bool value = (sizeof(empty_helper_t1<T>) == sizeof(empty_helper_t2));
#line 82 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
};

template <typename T>
struct is_empty_impl
{
    typedef typename remove_cv<T>::type cvt;
    static const bool value = ( ::boost::type_traits::ice_or< ::boost::detail::empty_helper<cvt,::boost::is_class<T>::value>::value , false >::value );
#line 95 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"
};



































#line 132 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"












































































#line 209 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"


template<> struct is_empty_impl< void > { public: static const bool value = (false); };

template<> struct is_empty_impl< void const > { public: static const bool value = (false); };
template<> struct is_empty_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_empty_impl< void const volatile > { public: static const bool value = (false); };
#line 217 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"

} 

template< typename T > struct is_empty : public ::boost::integral_constant<bool,::boost::detail::is_empty_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 225 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"



#line 229 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_empty.hpp"

#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_same.hpp"







































































































#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/call_traits.hpp"




















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"

























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"












#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"

namespace boost {






#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"
template< typename T > struct is_integral : public ::boost::integral_constant<bool,false> { public:   }; 

template<> struct is_integral< unsigned char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned short > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned int > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned long > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long const volatile > : public ::boost::integral_constant<bool,true> { public:   };

template<> struct is_integral< signed char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed short > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed int > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed long > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long const volatile > : public ::boost::integral_constant<bool,true> { public:   };

template<> struct is_integral< bool > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char const volatile > : public ::boost::integral_constant<bool,true> { public:   };





template<> struct is_integral< wchar_t > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t const volatile > : public ::boost::integral_constant<bool,true> { public:   };
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"














#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"


template<> struct is_integral< ::boost::ulong_long_type > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< ::boost::long_long_type > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type const volatile > : public ::boost::integral_constant<bool,true> { public:   };



#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"

#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 77 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"

#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_integral.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_float.hpp"












#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_float.hpp"

namespace boost {


template< typename T > struct is_float : public ::boost::integral_constant<bool,false> { public:   }; 
template<> struct is_float< float > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_float< double > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_float< long double > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double const volatile > : public ::boost::integral_constant<bool,true> { public:   };

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_float.hpp"

#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_float.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"


































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"

namespace boost {


namespace detail {

template< typename T >
struct is_arithmetic_impl
{ 
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_integral<T>::value, ::boost::is_float<T>::value >::value); 
#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
};

} 
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"




#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
template< typename T > struct is_arithmetic : public ::boost::integral_constant<bool,::boost::detail::is_arithmetic_impl<T>::value> { public:   }; 
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"

#line 52 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"
#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"









#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_reference.hpp"













































#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"

namespace boost {



#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"
template< typename T > struct is_array : public ::boost::integral_constant<bool,false> { public:   }; 

template< typename T, std::size_t N > struct is_array< T[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T const[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T volatile[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T const volatile[N] > : public ::boost::integral_constant<bool,true> { public:  };

template< typename T > struct is_array< T[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T const[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T volatile[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T const volatile[] > : public ::boost::integral_constant<bool,true> { public:  };
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"
#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"






































#line 86 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"

#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_array.hpp"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/yes_no_type.hpp"


























#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/false_result.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/false_result.hpp"

namespace boost {
namespace type_traits {


struct false_result
{
    template <typename T> struct result_
    {
        static const bool value = false;
    };
};

}} 

#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/false_result.hpp"
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"


































#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/yes_no_type.hpp"


























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"





#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

namespace boost {
namespace type_traits {

no_type __cdecl is_mem_fun_pointer_tester(...);





template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const volatile);
#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) const volatile);
#line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) const volatile);
#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const volatile);
#line 160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) const volatile);
#line 210 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) const volatile);
#line 235 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const volatile);
#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) const volatile);
#line 310 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) const volatile);
#line 335 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 360 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 410 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 435 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 460 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 510 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 535 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 560 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 610 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 635 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 660 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 710 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 735 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 760 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 810 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 835 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 860 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 910 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 935 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 1010 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 1035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1060 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1210 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1235 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1310 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1335 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1360 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1410 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1435 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1460 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1510 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1535 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1560 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1610 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1635 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1660 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1710 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1735 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1760 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1810 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1835 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1860 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1910 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1935 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 1960 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 2010 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 2035 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2060 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2160 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2210 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2235 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2310 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2335 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2360 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2410 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2435 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2460 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2510 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2535 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2560 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2610 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2635 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"







#line 2643 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

} 
} 

#line 2648 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"















































































































#line 2760 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

namespace boost {



#line 43 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"







#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

namespace detail {



template <bool>
struct is_mem_fun_pointer_select
    : public ::boost::type_traits::false_result
{
};

template <>
struct is_mem_fun_pointer_select<false>
{
    template <typename T> struct result_
    {

#pragma warning(push)
#pragma warning(disable:6334)
#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
        static T* make_t;
        typedef result_<T> self_type;

        static const bool value = ( 1 == sizeof(::boost::type_traits::is_mem_fun_pointer_tester(self_type::make_t)) );
#line 78 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

#pragma warning(pop)
#line 81 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
    };
};

template <typename T>
struct is_member_function_pointer_impl
    : public is_mem_fun_pointer_select<
          ::boost::type_traits::ice_or<
              ::boost::is_reference<T>::value
            , ::boost::is_array<T>::value
            >::value
        >::template result_<T>
{
};


template <typename T>
struct is_member_function_pointer_impl<T&> : public false_type{};
#line 99 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"


















#line 118 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

template<> struct is_member_function_pointer_impl< void > { public: static const bool value = (false); };

template<> struct is_member_function_pointer_impl< void const > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void const volatile > { public: static const bool value = (false); };
#line 125 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

} 

template< typename T > struct is_member_function_pointer : public ::boost::integral_constant<bool,::boost::detail::is_member_function_pointer_impl<T>::value> { public:   }; 

#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 135 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"

#line 137 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_function_pointer.hpp"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"







#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"

namespace boost {



#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"



#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"
template< typename T > struct is_member_pointer : public ::boost::integral_constant<bool,::boost::is_member_function_pointer<T>::value> { public:   }; 
template< typename T, typename U > struct is_member_pointer< U T::* > : public ::boost::integral_constant<bool,true> { public:  };


template< typename T, typename U > struct is_member_pointer< U T::*const > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, typename U > struct is_member_pointer< U T::*volatile > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, typename U > struct is_member_pointer< U T::*const volatile > : public ::boost::integral_constant<bool,true> { public:  };
#line 58 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"




















































#line 111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"
#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_and.hpp"



































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_not.hpp"































#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_cv.hpp"



















































































#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"

namespace boost {



#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"

namespace detail {

template< typename T > struct is_pointer_helper
{
    static const bool value = false;
};








template< typename T > struct is_pointer_helper<T*> { static const bool value = true; };



template< typename T >
struct is_pointer_impl
{









#line 80 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
    static const bool value = (::boost::type_traits::ice_and< ::boost::detail::is_pointer_helper<typename remove_cv<T>::type>::value , ::boost::type_traits::ice_not< ::boost::is_member_pointer<T>::value >::value >::value);
#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
};

} 

template< typename T > struct is_pointer : public ::boost::integral_constant<bool,::boost::detail::is_pointer_impl<T>::value> { public:   }; 






#line 101 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"























































#line 157 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"

#line 163 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"

namespace boost{

namespace detail{

template <typename T, bool small_>
struct ct_imp2
{
   typedef const T& param_type;
};

template <typename T>
struct ct_imp2<T, true>
{
   typedef const T param_type;
};

template <typename T, bool isp, bool b1>
struct ct_imp
{
   typedef const T& param_type;
};

template <typename T, bool isp>
struct ct_imp<T, isp, true>
{
   typedef typename ct_imp2<T, sizeof(T) <= sizeof(void*)>::param_type param_type;
};

template <typename T, bool b1>
struct ct_imp<T, true, b1>
{
   typedef const T param_type;
};

}

template <typename T>
struct call_traits
{
public:
   typedef T value_type;
   typedef T& reference;
   typedef const T& const_reference;
   
   
   
   
   
   
   typedef typename boost::detail::ct_imp<
      T,
      ::boost::is_pointer<T>::value,
      ::boost::is_arithmetic<T>::value
   >::param_type param_type;
};

template <typename T>
struct call_traits<T&>
{
   typedef T& value_type;
   typedef T& reference;
   typedef const T& const_reference;
   typedef T& param_type;  
};







































#line 134 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"

template <typename T, std::size_t N>
struct call_traits<T [N]>
{
private:
   typedef T array_type[N];
public:
   
   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};

template <typename T, std::size_t N>
struct call_traits<const T [N]>
{
private:
   typedef const T array_type[N];
public:
   
   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};
#line 161 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"

}

#line 165 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/call_traits.hpp"
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/call_traits.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/call_traits.hpp"

#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/call_traits.hpp"
#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"


#pragma warning(push)
#pragma warning(disable:4512)
#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
namespace boost
{

template <class T1, class T2>
class compressed_pair;




namespace details
{
   
   template <class T1, class T2, bool IsSame, bool FirstEmpty, bool SecondEmpty>
   struct compressed_pair_switch;

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, false, false, false>
      {static const int value = 0;};

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, false, true, true>
      {static const int value = 3;};

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, false, true, false>
      {static const int value = 1;};

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, false, false, true>
      {static const int value = 2;};

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, true, true, true>
      {static const int value = 4;};

   template <class T1, class T2>
   struct compressed_pair_switch<T1, T2, true, false, false>
      {static const int value = 5;};

   template <class T1, class T2, int Version> class compressed_pair_imp;





   
   
   
   
   
   template <typename T>
   inline void cp_swap(T& t1, T& t2)
   {

      using std::swap;
#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
      swap(t1, t2);
   }

   

   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 0>
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {} 

      compressed_pair_imp(first_param_type x, second_param_type y)
         : first_(x), second_(y) {}

      compressed_pair_imp(first_param_type x)
         : first_(x) {}

      compressed_pair_imp(second_param_type y)
         : second_(y) {}

      first_reference       first()       {return first_;}
      first_const_reference first() const {return first_;}

      second_reference       second()       {return second_;}
      second_const_reference second() const {return second_;}

      void swap(::boost::compressed_pair<T1, T2>& y)
      {
         cp_swap(first_, y.first());
         cp_swap(second_, y.second());
      }
   private:
      first_type first_;
      second_type second_;
   };

   

   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 1>
      : protected ::boost::remove_cv<T1>::type
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {}

      compressed_pair_imp(first_param_type x, second_param_type y)
         : first_type(x), second_(y) {}

      compressed_pair_imp(first_param_type x)
         : first_type(x) {}

      compressed_pair_imp(second_param_type y)
         : second_(y) {}

      first_reference       first()       {return *this;}
      first_const_reference first() const {return *this;}

      second_reference       second()       {return second_;}
      second_const_reference second() const {return second_;}

      void swap(::boost::compressed_pair<T1,T2>& y)
      {
         
         cp_swap(second_, y.second());
      }
   private:
      second_type second_;
   };

   

   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 2>
      : protected ::boost::remove_cv<T2>::type
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {}

      compressed_pair_imp(first_param_type x, second_param_type y)
         : second_type(y), first_(x) {}

      compressed_pair_imp(first_param_type x)
         : first_(x) {}

      compressed_pair_imp(second_param_type y)
         : second_type(y) {}

      first_reference       first()       {return first_;}
      first_const_reference first() const {return first_;}

      second_reference       second()       {return *this;}
      second_const_reference second() const {return *this;}

      void swap(::boost::compressed_pair<T1,T2>& y)
      {
         
         cp_swap(first_, y.first());
      }

   private:
      first_type first_;
   };

   

   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 3>
      : protected ::boost::remove_cv<T1>::type,
        protected ::boost::remove_cv<T2>::type
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {}

      compressed_pair_imp(first_param_type x, second_param_type y)
         : first_type(x), second_type(y) {}

      compressed_pair_imp(first_param_type x)
         : first_type(x) {}

      compressed_pair_imp(second_param_type y)
         : second_type(y) {}

      first_reference       first()       {return *this;}
      first_const_reference first() const {return *this;}

      second_reference       second()       {return *this;}
      second_const_reference second() const {return *this;}
      
      
      void swap(::boost::compressed_pair<T1,T2>&) {}
   };

   
   
   
   
   
   
   
   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 4>
      : protected ::boost::remove_cv<T1>::type
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {}

      compressed_pair_imp(first_param_type x, second_param_type y)
         : first_type(x), m_second(y) {}

      compressed_pair_imp(first_param_type x)
         : first_type(x), m_second(x) {}

      first_reference       first()       {return *this;}
      first_const_reference first() const {return *this;}

      second_reference       second()       {return m_second;}
      second_const_reference second() const {return m_second;}

      void swap(::boost::compressed_pair<T1,T2>&) {}
   private:
      T2 m_second;
   };

   

   template <class T1, class T2>
   class compressed_pair_imp<T1, T2, 5>
   {
   public:
      typedef T1                                                 first_type;
      typedef T2                                                 second_type;
      typedef typename call_traits<first_type>::param_type       first_param_type;
      typedef typename call_traits<second_type>::param_type      second_param_type;
      typedef typename call_traits<first_type>::reference        first_reference;
      typedef typename call_traits<second_type>::reference       second_reference;
      typedef typename call_traits<first_type>::const_reference  first_const_reference;
      typedef typename call_traits<second_type>::const_reference second_const_reference;

      compressed_pair_imp() {}

      compressed_pair_imp(first_param_type x, second_param_type y)
         : first_(x), second_(y) {}

      compressed_pair_imp(first_param_type x)
         : first_(x), second_(x) {}

      first_reference       first()       {return first_;}
      first_const_reference first() const {return first_;}

      second_reference       second()       {return second_;}
      second_const_reference second() const {return second_;}

      void swap(::boost::compressed_pair<T1, T2>& y)
      {
         cp_swap(first_, y.first());
         cp_swap(second_, y.second());
      }
   private:
      first_type first_;
      second_type second_;
   };

}  

template <class T1, class T2>
class compressed_pair
   : private ::boost::details::compressed_pair_imp<T1, T2,
             ::boost::details::compressed_pair_switch<
                    T1,
                    T2,
                    ::boost::is_same<typename remove_cv<T1>::type, typename remove_cv<T2>::type>::value,
                    ::boost::is_empty<T1>::value,
                    ::boost::is_empty<T2>::value>::value>
{
private:
   typedef details::compressed_pair_imp<T1, T2,
             ::boost::details::compressed_pair_switch<
                    T1,
                    T2,
                    ::boost::is_same<typename remove_cv<T1>::type, typename remove_cv<T2>::type>::value,
                    ::boost::is_empty<T1>::value,
                    ::boost::is_empty<T2>::value>::value> base;
public:
   typedef T1                                                 first_type;
   typedef T2                                                 second_type;
   typedef typename call_traits<first_type>::param_type       first_param_type;
   typedef typename call_traits<second_type>::param_type      second_param_type;
   typedef typename call_traits<first_type>::reference        first_reference;
   typedef typename call_traits<second_type>::reference       second_reference;
   typedef typename call_traits<first_type>::const_reference  first_const_reference;
   typedef typename call_traits<second_type>::const_reference second_const_reference;

            compressed_pair() : base() {}
            compressed_pair(first_param_type x, second_param_type y) : base(x, y) {}
   explicit compressed_pair(first_param_type x) : base(x) {}
   explicit compressed_pair(second_param_type y) : base(y) {}

   first_reference       first()       {return base::first();}
   first_const_reference first() const {return base::first();}

   second_reference       second()       {return base::second();}
   second_const_reference second() const {return base::second();}

   void swap(compressed_pair& y) { base::swap(y); }
};




template <class T>
class compressed_pair<T, T>
   : private details::compressed_pair_imp<T, T,
             ::boost::details::compressed_pair_switch<
                    T,
                    T,
                    ::boost::is_same<typename remove_cv<T>::type, typename remove_cv<T>::type>::value,
                    ::boost::is_empty<T>::value,
                    ::boost::is_empty<T>::value>::value>
{
private:
   typedef details::compressed_pair_imp<T, T,
             ::boost::details::compressed_pair_switch<
                    T,
                    T,
                    ::boost::is_same<typename remove_cv<T>::type, typename remove_cv<T>::type>::value,
                    ::boost::is_empty<T>::value,
                    ::boost::is_empty<T>::value>::value> base;
public:
   typedef T                                                  first_type;
   typedef T                                                  second_type;
   typedef typename call_traits<first_type>::param_type       first_param_type;
   typedef typename call_traits<second_type>::param_type      second_param_type;
   typedef typename call_traits<first_type>::reference        first_reference;
   typedef typename call_traits<second_type>::reference       second_reference;
   typedef typename call_traits<first_type>::const_reference  first_const_reference;
   typedef typename call_traits<second_type>::const_reference second_const_reference;

            compressed_pair() : base() {}
            compressed_pair(first_param_type x, second_param_type y) : base(x, y) {}

   explicit 
#line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"
      compressed_pair(first_param_type x) : base(x) {}

   first_reference       first()       {return base::first();}
   first_const_reference first() const {return base::first();}

   second_reference       second()       {return base::second();}
   second_const_reference second() const {return base::second();}

   void swap(::boost::compressed_pair<T,T>& y) { base::swap(y); }
};

template <class T1, class T2>
inline
void
swap(compressed_pair<T1, T2>& x, compressed_pair<T1, T2>& y)
{
   x.swap(y);
}

} 


#pragma warning(pop)
#line 441 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"

#line 443 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/compressed_pair.hpp"

#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/compressed_pair.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/compressed_pair.hpp"

#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/compressed_pair.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/aligned_storage.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


































































































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t_fwd.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/adl_barrier.hpp"
















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t_fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t_fwd.hpp"


namespace boost { namespace mpl {

template< std::size_t N > struct size_t;

}}


#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t_fwd.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t.hpp"





#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/integral_c_tag.hpp"


























#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/static_cast.hpp"



























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/nttp_decl.hpp"



































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/static_constant.hpp"

























#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/workaround.hpp"



















#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"




#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< std::size_t N >
struct size_t
{
    static const std::size_t value = N;




#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef size_t type;
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef std::size_t value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef boost::mpl::size_t< static_cast<std::size_t>((value + 1)) > next;
    typedef boost::mpl::size_t< static_cast<std::size_t>((value - 1)) > prior;
#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator std::size_t() const { return static_cast<std::size_t>(this->value); } 
};


template< std::size_t N >
std::size_t const boost::mpl::size_t< N >::value;
#line 87 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t.hpp"

#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/size_t.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"












#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_def.hpp"






























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"


#pragma warning(push)
#pragma warning(disable: 4121 4512) 
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"


#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

namespace boost {

template <typename T> struct alignment_of;


namespace detail {


#pragma warning(push)
#pragma warning(disable:4324) 
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"
template <typename T>
struct alignment_of_hack
{
    char c;
    T t;
    alignment_of_hack();
};

#pragma warning(pop)
#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

template <unsigned A, unsigned S>
struct alignment_logic
{
    static const std::size_t value = A < S ? A : S;
};


template< typename T >
struct alignment_of_impl
{

    
    
    
    
    
    static const std::size_t value = (::boost::detail::alignment_logic< sizeof(::boost::detail::alignment_of_hack<T>) - sizeof(T), __alignof(T) >::value);
#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"














#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"
};

} 

template< typename T > struct alignment_of : public ::boost::integral_constant<std::size_t,::boost::detail::alignment_of_impl<T>::value> { public:   }; 




template <typename T>
struct alignment_of<T&>
    : public alignment_of<T*>
{
};
#line 100 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"









template<> struct alignment_of<void> : public ::boost::integral_constant<std::size_t,0> { public:   };

template<> struct alignment_of<void const> : public ::boost::integral_constant<std::size_t,0> { public:   };
template<> struct alignment_of<void volatile> : public ::boost::integral_constant<std::size_t,0> { public:   };
template<> struct alignment_of<void const volatile> : public ::boost::integral_constant<std::size_t,0> { public:   };
#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

} 



#line 121 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

#pragma warning(pop)
#line 124 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/size_t_trait_undef.hpp"
















#line 126 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

#line 128 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"

#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"










#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/if.hpp"







































































































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/inc.hpp"
































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/adt.hpp"









































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"

































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"





#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"











#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/detail/msvc/for.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/if.hpp"






























#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/detail/msvc/for.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/eat.hpp"

























































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/detail/msvc/for.hpp"


































































































































































































































































#line 278 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/detail/msvc/for.hpp"

#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"




#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"






































































































































































































































































#line 307 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/for.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"








#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"





































#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"







#line 71 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"

#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"
#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"





#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"


#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"




#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"

#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"






#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"






#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"










#line 64 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"

#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/for_each_i.hpp"
#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"







#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"


#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"




#line 34 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"




























#line 63 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/to_list.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"








































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"








































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"








#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"






#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"










#line 48 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"

#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/transform.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/fold_right.hpp"








































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"








#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"










#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"

#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/list/append.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"
































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/config.hpp"












































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"

namespace boost {




#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"
template< typename T > struct is_void : public ::boost::integral_constant<bool,false> { public:   }; 
template<> struct is_void< void > : public ::boost::integral_constant<bool,true> { public:   };


template<> struct is_void< void const > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_void< void volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_void< void const volatile > : public ::boost::integral_constant<bool,true> { public:   };
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"

#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"

#line 39 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_void.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_arithmetic.hpp"



















































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


































































































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"

















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"

namespace boost {


















































































































































template< typename T > struct is_enum : public ::boost::integral_constant<bool,__is_enum(T)> { public:   }; 

#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 188 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"

#line 190 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_enum.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pointer.hpp"


































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_member_pointer.hpp"




















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"


































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"

namespace boost {

namespace detail {

template <typename T>
struct is_scalar_impl
{ 
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_arithmetic<T>::value, ::boost::is_enum<T>::value, ::boost::is_pointer<T>::value, ::boost::is_member_pointer<T>::value >::value);
#line 36 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
};



template <> struct is_scalar_impl<void>{ static const bool value = false; };

template <> struct is_scalar_impl<void const>{ static const bool value = false; };
template <> struct is_scalar_impl<void volatile>{ static const bool value = false; };
template <> struct is_scalar_impl<void const volatile>{ static const bool value = false; };
#line 46 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"

} 

template< typename T > struct is_scalar : public ::boost::integral_constant<bool,::boost::detail::is_scalar_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"

#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_scalar.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/ice_or.hpp"


































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/intrinsics.hpp"


































































































































































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"




#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"





#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"

namespace boost {


template< typename T > struct is_POD;

namespace detail {



template <typename T> struct is_pod_impl
{ 
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_scalar<T>::value, ::boost::is_void<T>::value, (__is_pod(T) && __has_trivial_constructor(T)) >::value);
#line 47 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
};


template <typename T, std::size_t sz>
struct is_pod_impl<T[sz]>
    : public is_pod_impl<T>
{
};
#line 56 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"

































































#line 122 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"


template<> struct is_pod_impl< void > { public: static const bool value = (true); };


template<> struct is_pod_impl< void const > { public: static const bool value = (true); };
template<> struct is_pod_impl< void volatile > { public: static const bool value = (true); };
template<> struct is_pod_impl< void const volatile > { public: static const bool value = (true); };
#line 131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"

} 

template< typename T > struct is_POD : public ::boost::integral_constant<bool,::boost::detail::is_pod_impl<T>::value> { public:   }; 
template< typename T > struct is_pod : public ::boost::integral_constant<bool,::boost::detail::is_pod_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"



#line 144 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"
#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/static_assert.hpp"










































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"




#pragma warning(push)
#pragma warning(disable: 4121) 
#line 31 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"

namespace boost {



namespace detail {

class alignment_dummy;
typedef void (*function_ptr)();
typedef int (alignment_dummy::*member_ptr);
typedef int (alignment_dummy::*member_function_ptr)();











#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"















































template <bool found, std::size_t target, class TestType>
struct lower_alignment_helper
{
    typedef char type;
    enum { value = true };
};

template <std::size_t target, class TestType>
struct lower_alignment_helper<false,target,TestType>
{
    enum { value = (alignment_of<TestType>::value == target) };
    typedef typename mpl::if_c<value, TestType, char>::type type;
};
#line 115 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"












template <typename T>
struct has_one_T
{
  T data;
};

template <std::size_t target>
union lower_alignment
{
    enum { found0 = false };

    typename lower_alignment_helper< found0,target,char >::type t0; enum { found1 = lower_alignment_helper<found0,target,char >::value }; typename lower_alignment_helper< found1,target,short >::type t1; enum { found2 = lower_alignment_helper<found1,target,short >::value }; typename lower_alignment_helper< found2,target,int >::type t2; enum { found3 = lower_alignment_helper<found2,target,int >::value }; typename lower_alignment_helper< found3,target,long >::type t3; enum { found4 = lower_alignment_helper<found3,target,long >::value }; typename lower_alignment_helper< found4,target,::boost::long_long_type >::type t4; enum { found5 = lower_alignment_helper<found4,target,::boost::long_long_type >::value }; typename lower_alignment_helper< found5,target,float >::type t5; enum { found6 = lower_alignment_helper<found5,target,float >::value }; typename lower_alignment_helper< found6,target,double >::type t6; enum { found7 = lower_alignment_helper<found6,target,double >::value }; typename lower_alignment_helper< found7,target,long double >::type t7; enum { found8 = lower_alignment_helper<found7,target,long double >::value }; typename lower_alignment_helper< found8,target,void* >::type t8; enum { found9 = lower_alignment_helper<found8,target,void* >::value }; typename lower_alignment_helper< found9,target,function_ptr >::type t9; enum { found10 = lower_alignment_helper<found9,target,function_ptr >::value }; typename lower_alignment_helper< found10,target,member_ptr >::type t10; enum { found11 = lower_alignment_helper<found10,target,member_ptr >::value }; typename lower_alignment_helper< found11,target,member_function_ptr >::type t11; enum { found12 = lower_alignment_helper<found11,target,member_function_ptr >::value }; typename lower_alignment_helper< found12,target,boost::detail::has_one_T< char > >::type t12; enum { found13 = lower_alignment_helper<found12,target,boost::detail::has_one_T< char > >::value }; typename lower_alignment_helper< found13,target,boost::detail::has_one_T< short > >::type t13; enum { found14 = lower_alignment_helper<found13,target,boost::detail::has_one_T< short > >::value }; typename lower_alignment_helper< found14,target,boost::detail::has_one_T< int > >::type t14; enum { found15 = lower_alignment_helper<found14,target,boost::detail::has_one_T< int > >::value }; typename lower_alignment_helper< found15,target,boost::detail::has_one_T< long > >::type t15; enum { found16 = lower_alignment_helper<found15,target,boost::detail::has_one_T< long > >::value }; typename lower_alignment_helper< found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::type t16; enum { found17 = lower_alignment_helper<found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::value }; typename lower_alignment_helper< found17,target,boost::detail::has_one_T< float > >::type t17; enum { found18 = lower_alignment_helper<found17,target,boost::detail::has_one_T< float > >::value }; typename lower_alignment_helper< found18,target,boost::detail::has_one_T< double > >::type t18; enum { found19 = lower_alignment_helper<found18,target,boost::detail::has_one_T< double > >::value }; typename lower_alignment_helper< found19,target,boost::detail::has_one_T< long double > >::type t19; enum { found20 = lower_alignment_helper<found19,target,boost::detail::has_one_T< long double > >::value }; typename lower_alignment_helper< found20,target,boost::detail::has_one_T< void* > >::type t20; enum { found21 = lower_alignment_helper<found20,target,boost::detail::has_one_T< void* > >::value }; typename lower_alignment_helper< found21,target,boost::detail::has_one_T< function_ptr > >::type t21; enum { found22 = lower_alignment_helper<found21,target,boost::detail::has_one_T< function_ptr > >::value }; typename lower_alignment_helper< found22,target,boost::detail::has_one_T< member_ptr > >::type t22; enum { found23 = lower_alignment_helper<found22,target,boost::detail::has_one_T< member_ptr > >::value }; typename lower_alignment_helper< found23,target,boost::detail::has_one_T< member_function_ptr > >::type t23; enum { found24 = lower_alignment_helper<found23,target,boost::detail::has_one_T< member_function_ptr > >::value };  
#line 143 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
};

union max_align
{
    char t0; short t1; int t2; long t3; ::boost::long_long_type t4; float t5; double t6; long double t7; void* t8; function_ptr t9; member_ptr t10; member_function_ptr t11; boost::detail::has_one_T< char > t12; boost::detail::has_one_T< short > t13; boost::detail::has_one_T< int > t14; boost::detail::has_one_T< long > t15; boost::detail::has_one_T< ::boost::long_long_type > t16; boost::detail::has_one_T< float > t17; boost::detail::has_one_T< double > t18; boost::detail::has_one_T< long double > t19; boost::detail::has_one_T< void* > t20; boost::detail::has_one_T< function_ptr > t21; boost::detail::has_one_T< member_ptr > t22; boost::detail::has_one_T< member_function_ptr > t23;  
#line 152 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
};








template<std::size_t TAlign, std::size_t Align>
struct is_aligned
{
    static const bool value = (TAlign >= Align) & (TAlign % Align == 0);
#line 167 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"
};












} 


template<std::size_t Align>
struct is_pod< ::boost::detail::lower_alignment<Align> >
{
        static const std::size_t value = true;
};
#line 189 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"



namespace detail{

template <std::size_t Align>
class type_with_alignment_imp
{
    typedef ::boost::detail::lower_alignment<Align> t1;
    typedef typename mpl::if_c<
          ::boost::detail::is_aligned< ::boost::alignment_of<t1>::value,Align >::value
        , t1
        , ::boost::detail::max_align
        >::type align_t;

    static const std::size_t found = alignment_of<align_t>::value;

    static_assert(found >= Align, "found >= Align");
    static_assert(found % Align == 0, "found % Align == 0");

 public:
    typedef align_t type;
};

}

template <std::size_t Align>
class type_with_alignment 
  : public ::boost::detail::type_with_alignment_imp<Align>
{
};
























#line 245 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"

















namespace align {
struct __declspec(align(8)) a8 { 
   char m[8]; 
   typedef a8 type;
};
struct __declspec(align(16)) a16 { 
   char m[16]; 
   typedef a16 type;
};
struct __declspec(align(32)) a32 { 
   char m[32]; 
   typedef a32 type;
};
struct __declspec(align(64)) a64 
{ 
   char m[64]; 
   typedef a64 type;
};
struct __declspec(align(128)) a128 { 
   char m[128]; 
   typedef a128 type;
};
}

template<> class type_with_alignment<8>  
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 8,
      align::a8,
      boost::detail::type_with_alignment_imp<8> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<16> 
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 16,
      align::a16,
      boost::detail::type_with_alignment_imp<16> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<32> 
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 32,
      align::a32,
      boost::detail::type_with_alignment_imp<32> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<64> {
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 64,
      align::a64,
      boost::detail::type_with_alignment_imp<64> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<128> {
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 128,
      align::a128,
      boost::detail::type_with_alignment_imp<128> >::type t1; 
public: 
   typedef t1::type type;
};

namespace detail {
template<> struct is_pod_impl< ::boost::align::a8 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a16 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a32 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a64 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a128 > { public: static const bool value = (true); };
}
#line 338 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"











































#line 382 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"

} 


#pragma warning(pop)
#line 388 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 390 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"

#line 392 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/type_with_alignment.hpp"


#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_pod.hpp"















































































































































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/eval_if.hpp"







































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/identity.hpp"













































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

namespace boost {

namespace detail { namespace aligned_storage {

static const std::size_t alignment_of_max_align = ::boost::alignment_of<max_align>::value;
#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"




template <
      std::size_t size_
    , std::size_t alignment_
>
struct aligned_storage_imp
{
    union data_t
    {
        char buf[size_];

        typename mpl::eval_if_c<
              alignment_ == std::size_t(-1)
            , mpl::identity<detail::max_align>
            , type_with_alignment<alignment_>
            >::type align_;
    } data_;
    void* address() const { return const_cast<aligned_storage_imp*>(this); }
};

template< std::size_t alignment_ >
struct aligned_storage_imp<0u,alignment_>
{
    
    void* address() const { return 0; }
};

}} 

template <
      std::size_t size_
    , std::size_t alignment_ = std::size_t(-1)
>
class aligned_storage : 

   private 


#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
   detail::aligned_storage::aligned_storage_imp<size_, alignment_> 
{
 
public: 

    typedef detail::aligned_storage::aligned_storage_imp<size_, alignment_> type;

    static const std::size_t size = size_;
#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
    static const std::size_t alignment = ( alignment_ == std::size_t(-1) ? ::boost::detail::aligned_storage::alignment_of_max_align : alignment_ );
#line 98 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"








#line 110 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

public: 

    aligned_storage(const aligned_storage&);
    aligned_storage& operator=(const aligned_storage&);

#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

public: 

    aligned_storage()
    {
    }

    ~aligned_storage()
    {
    }

public: 

    void* address()
    {
        return static_cast<type*>(this)->address();
    }



    const void* address() const
    {
        return static_cast<const type*>(this)->address();
    }





#line 147 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

};












#line 162 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"






template <std::size_t size_, std::size_t alignment_>
struct is_pod<boost::detail::aligned_storage::aligned_storage_imp<size_,alignment_> >
   : public ::boost::integral_constant<bool,true>
{ 
    
}; 
#line 175 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"


} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 180 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"

#line 182 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/aligned_storage.hpp"
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/aligned_storage.hpp"
#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/aligned_storage.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/alignment_of.hpp"
































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"





















#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"



#line 45 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"



#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"


























































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"








#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"










#line 40 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"

#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_params.hpp"
#line 49 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/punctuation/comma_if.hpp"































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"


























































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"








































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"








#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"




#line 35 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"




#line 42 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 44 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"








#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
















#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/add.hpp"



















































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/arithmetic/sub.hpp"


















































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/debug/error.hpp"

































#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"











#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"



#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/detail/auto_rec.hpp"
#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat.hpp"


























































































































































































































































































































































































































































































































































































































































































































































































































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/elem.hpp"


































































































































































































































































































































































































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/tuple/rem.hpp"








































































#line 27 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"





#line 33 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
















#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"














#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"








#line 74 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"



#line 78 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"









#line 88 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"








#line 60 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"

namespace boost { namespace unordered_detail {

    static const float minimum_max_load_factor = 1e-3f;
    static const std::size_t default_bucket_count = 11;
    struct move_tag {};

    template <class T> class hash_unique_table;
    template <class T> class hash_equivalent_table;
    template <class Alloc, class Grouped>
    class hash_node_constructor;
    template <class ValueType>
    struct set_extractor;
    template <class Key, class ValueType>
    struct map_extractor;
    struct no_key;

    


#pragma warning(push)
#pragma warning(disable:4100) 
#line 83 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"

    template <class T>
    inline void destroy(T* x) {
        x->~T();
    }


#pragma warning(pop)
#line 92 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    template <class A>
    class hash_bucket
    {
        hash_bucket& operator=(hash_bucket const&);
    public:
        typedef hash_bucket<A> bucket;
        typedef typename
            boost::unordered_detail::rebind_wrap<A, bucket>::type
            bucket_allocator;
        typedef typename bucket_allocator::pointer bucket_ptr;
        typedef bucket_ptr node_ptr;
    
        node_ptr next_;

        hash_bucket() : next_() {}
    };

    
    
    
    
    

    
    
    

    template <class A>
    struct ungrouped_node_base : hash_bucket<A> {
        typedef hash_bucket<A> bucket;
        typedef typename bucket::bucket_ptr bucket_ptr;
        typedef typename bucket::node_ptr node_ptr;

        ungrouped_node_base() : bucket() {}
        static inline node_ptr& next_group(node_ptr ptr);
        static inline std::size_t group_count(node_ptr ptr);
        static inline void add_to_bucket(node_ptr n, bucket& b);
        static inline void add_after_node(node_ptr n, node_ptr position);
        static void unlink_node(bucket& b, node_ptr n);
        static void unlink_nodes(bucket& b, node_ptr begin, node_ptr end);
        static void unlink_nodes(bucket& b, node_ptr end);
    };

    
    
    

    template <class A>
    struct grouped_node_base : hash_bucket<A>
    {
        typedef hash_bucket<A> bucket;
        typedef typename bucket::bucket_ptr bucket_ptr;
        typedef typename bucket::node_ptr node_ptr;

        node_ptr group_prev_;

        grouped_node_base() : bucket(), group_prev_() {}
        static inline node_ptr& next_group(node_ptr ptr);
        static inline node_ptr first_in_group(node_ptr n);
        static inline std::size_t group_count(node_ptr ptr);
        static inline void add_to_bucket(node_ptr n, bucket& b);
        static inline void add_after_node(node_ptr n, node_ptr position);
        static void unlink_node(bucket& b, node_ptr n);
        static void unlink_nodes(bucket& b, node_ptr begin, node_ptr end);
        static void unlink_nodes(bucket& b, node_ptr end);

    private:
        static inline node_ptr split_group(node_ptr split);
        static inline grouped_node_base& get(node_ptr ptr) {
            return static_cast<grouped_node_base&>(*ptr);
        }
    };

    
    
    

    struct ungrouped
    {
        template <class A>
        struct base {
            typedef ungrouped_node_base<A> type;
        };
    };

    struct grouped
    {
        template <class A>
        struct base {
            typedef grouped_node_base<A> type;
        };
    };

    

    template <class ValueType>
    struct value_base
    {
        typedef ValueType value_type;
        typename boost::aligned_storage<
            sizeof(value_type),
            ::boost::alignment_of<value_type>::value>::type data_;

        void* address() {
            return this;
        }
        value_type& value() {
            return *(ValueType*) this;
        }
        value_type* value_ptr() {
            return (ValueType*) this;
        }
    private:
        value_base& operator=(value_base const&);
    };

    
    
    template <class A, class G>
    class hash_node :
        public G::template base<A>::type,
        public value_base<typename A::value_type>
    {
    public:
        typedef typename A::value_type value_type;
        typedef typename hash_bucket<A>::node_ptr node_ptr;

        static value_type& get_value(node_ptr p) {
            return static_cast<hash_node&>(*p).value();
        }
        static value_type* get_value_ptr(node_ptr p) {
            return static_cast<hash_node&>(*p).value_ptr();
        }
    private:
        hash_node& operator=(hash_node const&);
    };

    
    
    
    
    
    
    

    template <class A, class G>
    class hash_iterator_base
    {
    public:
        typedef A value_allocator;
        typedef hash_bucket<A> bucket;
        typedef hash_node<A, G> node;
        typedef typename A::value_type value_type;
        typedef typename bucket::bucket_ptr bucket_ptr;
        typedef typename bucket::node_ptr node_ptr;

        bucket_ptr bucket_;
        node_ptr node_;

        hash_iterator_base() : bucket_(), node_() {}
        explicit hash_iterator_base(bucket_ptr b)
          : bucket_(b),
            node_(b ? b->next_ : node_ptr()) {}
        hash_iterator_base(bucket_ptr b, node_ptr n)
          : bucket_(b),
            node_(n) {}
        
        bool operator==(hash_iterator_base const& x) const {
            return node_ == x.node_; }
        bool operator!=(hash_iterator_base const& x) const {
            return node_ != x.node_; }
        value_type& operator*() const {
            return node::get_value(node_);
        }
    
        void increment_bucket(node_ptr n) {
            while(!n) {
                ++bucket_;
                n = bucket_->next_;
            }
            node_ = bucket_ == n ? node_ptr() : n;
        }

        void increment() {
            increment_bucket(node_->next_);
        }
    };

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    template <class A, class G>
    class hash_buckets
    {
        hash_buckets(hash_buckets const&);
        hash_buckets& operator=(hash_buckets const&);
    public:
        

        typedef A value_allocator;
        typedef hash_bucket<A> bucket;
        typedef hash_iterator_base<A, G> iterator_base;
        typedef typename A::value_type value_type;
        typedef typename iterator_base::node node;

        typedef typename bucket::bucket_allocator
            bucket_allocator;
        typedef typename bucket::bucket_ptr bucket_ptr;
        typedef typename bucket::node_ptr node_ptr;

        typedef typename rebind_wrap<value_allocator, node>::type
            node_allocator;
        typedef typename node_allocator::pointer real_node_ptr;

        

        bucket_ptr buckets_;
        std::size_t bucket_count_;
        boost::compressed_pair<bucket_allocator, node_allocator> allocators_;
        
        

        bucket_allocator const& bucket_alloc() const {
            return allocators_.first(); }
        node_allocator const& node_alloc() const {
            return allocators_.second(); }
        bucket_allocator& bucket_alloc() {
            return allocators_.first(); }
        node_allocator& node_alloc() {
            return allocators_.second(); }
        std::size_t max_bucket_count() const;

        

        hash_buckets(node_allocator const& a, std::size_t n);
        void create_buckets();
        ~hash_buckets();
        
        
        void swap(hash_buckets& other);
        void move(hash_buckets& other);

        
        
        bucket_ptr get_bucket(std::size_t n) const;
        bucket_ptr bucket_ptr_from_hash(std::size_t hashed) const;
        std::size_t bucket_size(std::size_t index) const;
        node_ptr bucket_begin(std::size_t n) const;

        
        
        void delete_node(node_ptr);

        
        void delete_buckets();
        void clear_bucket(bucket_ptr);
        std::size_t delete_nodes(node_ptr begin, node_ptr end);
        std::size_t delete_to_bucket_end(node_ptr begin);
    };

    
    
    
    
    
    
    
    
    
    

    template <class H, class P> class set_hash_functions;

    template <class H, class P>
    class hash_buffered_functions
    {
        friend class set_hash_functions<H, P>;
        hash_buffered_functions& operator=(hash_buffered_functions const&);

        typedef boost::compressed_pair<H, P> function_pair;
        typedef typename boost::aligned_storage<
            sizeof(function_pair),
            ::boost::alignment_of<function_pair>::value>::type aligned_function;

        bool current_; 
        aligned_function funcs_[2];

        function_pair const& current() const {
            return *static_cast<function_pair const*>(
                static_cast<void const*>(&funcs_[current_]));
        }

        void construct(bool which, H const& hf, P const& eq)
        {
            new((void*) &funcs_[which]) function_pair(hf, eq);
        }

        void construct(bool which, function_pair const& f)
        {
            new((void*) &funcs_[which]) function_pair(f);
        }
        
        void destroy(bool which)
        {
            boost::unordered_detail::destroy((function_pair*)(&funcs_[which]));
        }
        
    public:

        hash_buffered_functions(H const& hf, P const& eq)
            : current_(false)
        {
            construct(current_, hf, eq);
        }

        hash_buffered_functions(hash_buffered_functions const& bf)
            : current_(false)
        {
            construct(current_, bf.current());
        }

        ~hash_buffered_functions() {
            destroy(current_);
        }

        H const& hash_function() const {
            return current().first();
        }

        P const& key_eq() const {
            return current().second();
        }
    };
    
    template <class H, class P>
    class set_hash_functions
    {
        set_hash_functions(set_hash_functions const&);
        set_hash_functions& operator=(set_hash_functions const&);
    
        typedef hash_buffered_functions<H, P> buffered_functions;
        buffered_functions& buffered_functions_;
        bool tmp_functions_;

    public:

        set_hash_functions(buffered_functions& f, H const& h, P const& p)
          : buffered_functions_(f),
            tmp_functions_(!f.current_)
        {
            f.construct(tmp_functions_, h, p);
        }

        set_hash_functions(buffered_functions& f,
            buffered_functions const& other)
          : buffered_functions_(f),
            tmp_functions_(!f.current_)
        {
            f.construct(tmp_functions_, other.current());
        }

        ~set_hash_functions()
        {
            buffered_functions_.destroy(tmp_functions_);
        }

        void commit()
        {
            buffered_functions_.current_ = tmp_functions_;
            tmp_functions_ = !tmp_functions_;
        }
    };

    
    
    
    
    

    template <class T>
    class hash_table : public T::buckets, public T::buffered_functions
    {
        hash_table(hash_table const&);
    public:
        typedef typename T::hasher hasher;
        typedef typename T::key_equal key_equal;
        typedef typename T::value_allocator value_allocator;
        typedef typename T::key_type key_type;
        typedef typename T::value_type value_type;
        typedef typename T::buffered_functions base;
        typedef typename T::buckets buckets;
        typedef typename T::extractor extractor;
        typedef typename T::node_constructor node_constructor;

        typedef typename T::node node;
        typedef typename T::bucket bucket;
        typedef typename T::node_ptr node_ptr;
        typedef typename T::bucket_ptr bucket_ptr;
        typedef typename T::iterator_base iterator_base;
        typedef typename T::node_allocator node_allocator;
        typedef typename T::iterator_pair iterator_pair;

        
        
        std::size_t size_;
        float mlf_;
        
        bucket_ptr cached_begin_bucket_;
        std::size_t max_load_;

        

        key_type const& get_key(value_type const& v) const {
            return extractor::extract(v);
        }
        key_type const& get_key_from_ptr(node_ptr n) const {
            return extractor::extract(node::get_value(n));
        }
        bool equal(key_type const& k, value_type const& v) const;
        template <class Key, class Pred>
        node_ptr find_iterator(bucket_ptr bucket, Key const& k,
            Pred const&) const;
        node_ptr find_iterator(bucket_ptr bucket, key_type const& k) const;
        node_ptr find_iterator(key_type const& k) const;
        node_ptr* find_for_erase(bucket_ptr bucket, key_type const& k) const;
        
        

        std::size_t max_size() const;
        std::size_t bucket_index(key_type const& k) const;
        void max_load_factor(float z);
        std::size_t min_buckets_for_size(std::size_t n) const;
        std::size_t calculate_max_load();

        

        hash_table(std::size_t n, hasher const& hf, key_equal const& eq,
            node_allocator const& a);
        hash_table(hash_table const& x, node_allocator const& a);
        hash_table(hash_table& x, move_tag m);
        hash_table(hash_table& x, node_allocator const& a, move_tag m);
        ~hash_table() {}
        hash_table& operator=(hash_table const&);

        

        iterator_base begin() const {
            return this->size_ ?
                iterator_base(this->cached_begin_bucket_) :
                iterator_base();
        }
        iterator_base end() const {
            return iterator_base();
        }

        

        void swap(hash_table& x);
        void fast_swap(hash_table& other);
        void slow_swap(hash_table& other);
        void partial_swap(hash_table& other);
        void move(hash_table& x);

        

        void create_for_insert(std::size_t n);
        bool reserve_for_insert(std::size_t n);
        void rehash(std::size_t n);
        void rehash_impl(std::size_t n);

        

        void move_buckets_to(buckets& dst);
        void copy_buckets_to(buckets& dst) const;

        

        std::size_t count(key_type const& k) const;
        iterator_base find(key_type const& k) const;
        template <class Key, class Hash, class Pred>
        iterator_base find(Key const& k, Hash const& h, Pred const& eq) const;
        value_type& at(key_type const& k) const;
        iterator_pair equal_range(key_type const& k) const;

        
        
        

        void clear();
        std::size_t erase_key(key_type const& k);
        iterator_base erase_return_iterator(iterator_base r);
        void erase(iterator_base r);
        std::size_t erase_group(node_ptr* it, bucket_ptr bucket);
        iterator_base erase_range(iterator_base r1, iterator_base r2);

        

        void init_buckets();

        
        
        
        

        void recompute_begin_bucket(bucket_ptr b);

        
        
        

        void recompute_begin_bucket(bucket_ptr b1, bucket_ptr b2);
        
        
        float load_factor() const;
        
        iterator_base emplace_empty_impl_with_node(
            node_constructor&, std::size_t);
    };

    
    
    

    
    

    class iterator_access
    {
    public:
        template <class Iterator>
        static typename Iterator::base const&
            get(Iterator const& it)
        {
            return it.base_;
        }
    };

    template <class A, class G> class hash_iterator;
    template <class A, class G> class hash_const_iterator;
    template <class A, class G> class hash_local_iterator;
    template <class A, class G> class hash_const_local_iterator;

    
    
    

    template <class A, class G>
    class hash_local_iterator
        : public boost::iterator <
            std::forward_iterator_tag,
            typename A::value_type,
            std::ptrdiff_t,
            typename A::pointer,
            typename A::reference>
    {
    public:
        typedef typename A::value_type value_type;

    private:
        typedef hash_buckets<A, G> buckets;
        typedef typename buckets::node_ptr node_ptr;
        typedef typename buckets::node node;
        typedef hash_const_local_iterator<A, G> const_local_iterator;

        friend class hash_const_local_iterator<A, G>;
        node_ptr ptr_;

    public:
        hash_local_iterator() : ptr_() {}
        explicit hash_local_iterator(node_ptr x) : ptr_(x) {}
        typename A::reference operator*() const {
            return node::get_value(ptr_);
        }
        value_type* operator->() const {
            return node::get_value_ptr(ptr_);
        }
        hash_local_iterator& operator++() {
            ptr_ = ptr_->next_; return *this;
        }
        hash_local_iterator operator++(int) {
            hash_local_iterator tmp(ptr_); ptr_ = ptr_->next_; return tmp; }
        bool operator==(hash_local_iterator x) const {
            return ptr_ == x.ptr_;
        }
        bool operator==(const_local_iterator x) const {
            return ptr_ == x.ptr_;
        }
        bool operator!=(hash_local_iterator x) const {
            return ptr_ != x.ptr_;
        }
        bool operator!=(const_local_iterator x) const {
            return ptr_ != x.ptr_;
        }
    };

    template <class A, class G>
    class hash_const_local_iterator
        : public boost::iterator <
            std::forward_iterator_tag,
            typename A::value_type,
            std::ptrdiff_t,
            typename A::const_pointer,
            typename A::const_reference >
    {
    public:
        typedef typename A::value_type value_type;

    private:
        typedef hash_buckets<A, G> buckets;
        typedef typename buckets::node_ptr ptr;
        typedef typename buckets::node node;
        typedef hash_local_iterator<A, G> local_iterator;
        friend class hash_local_iterator<A, G>;
        ptr ptr_;

    public:
        hash_const_local_iterator() : ptr_() {}
        explicit hash_const_local_iterator(ptr x) : ptr_(x) {}
        hash_const_local_iterator(local_iterator x) : ptr_(x.ptr_) {}
        typename A::const_reference
            operator*() const {
            return node::get_value(ptr_);
        }
        value_type const* operator->() const {
            return node::get_value_ptr(ptr_);
        }
        hash_const_local_iterator& operator++() {
            ptr_ = ptr_->next_; return *this;
        }
        hash_const_local_iterator operator++(int) {
            hash_const_local_iterator tmp(ptr_); ptr_ = ptr_->next_; return tmp;
        }
        bool operator==(local_iterator x) const {
            return ptr_ == x.ptr_;
        }
        bool operator==(hash_const_local_iterator x) const {
            return ptr_ == x.ptr_;
        }
        bool operator!=(local_iterator x) const {
            return ptr_ != x.ptr_;
        }
        bool operator!=(hash_const_local_iterator x) const {
            return ptr_ != x.ptr_;
        }
    };

    
    
    


    template <class A, class G>
    class hash_iterator
        : public boost::iterator <
            std::forward_iterator_tag,
            typename A::value_type,
            std::ptrdiff_t,
            typename A::pointer,
            typename A::reference >
    {
    public:
        typedef typename A::value_type value_type;

    private:
        typedef hash_buckets<A, G> buckets;
        typedef typename buckets::node node;
        typedef typename buckets::iterator_base base;
        typedef hash_const_iterator<A, G> const_iterator;
        friend class hash_const_iterator<A, G>;
        base base_;

    public:

        hash_iterator() : base_() {}
        explicit hash_iterator(base const& x) : base_(x) {}
        typename A::reference operator*() const {
            return *base_;
        }
        value_type* operator->() const {
            return &*base_;
        }
        hash_iterator& operator++() {
            base_.increment(); return *this;
        }
        hash_iterator operator++(int) {
            hash_iterator tmp(base_); base_.increment(); return tmp;
        }
        bool operator==(hash_iterator const& x) const {
            return base_ == x.base_;
        }
        bool operator==(const_iterator const& x) const {
            return base_ == x.base_;
        }
        bool operator!=(hash_iterator const& x) const {
            return base_ != x.base_;
        }
        bool operator!=(const_iterator const& x) const {
            return base_ != x.base_;
        }
    };

    template <class A, class G>
    class hash_const_iterator
        : public boost::iterator <
            std::forward_iterator_tag,
            typename A::value_type,
            std::ptrdiff_t,
            typename A::const_pointer,
            typename A::const_reference >
    {
    public:
        typedef typename A::value_type value_type;

    private:
        typedef hash_buckets<A, G> buckets;
        typedef typename buckets::node node;
        typedef typename buckets::iterator_base base;
        typedef hash_iterator<A, G> iterator;
        friend class hash_iterator<A, G>;
        friend class iterator_access;
        base base_;

    public:

        hash_const_iterator() : base_() {}
        explicit hash_const_iterator(base const& x) : base_(x) {}
        hash_const_iterator(iterator const& x) : base_(x.base_) {}
        typename A::const_reference operator*() const {
            return *base_;
        }
        value_type const* operator->() const {
            return &*base_;
        }
        hash_const_iterator& operator++() {
            base_.increment(); return *this;
        }
        hash_const_iterator operator++(int) {
            hash_const_iterator tmp(base_); base_.increment(); return tmp;
        }
        bool operator==(iterator const& x) const {
            return base_ == x.base_;
        }
        bool operator==(hash_const_iterator const& x) const {
            return base_ == x.base_;
        }
        bool operator!=(iterator const& x) const {
            return base_ != x.base_;
        }
        bool operator!=(hash_const_iterator const& x) const {
            return base_ != x.base_;
        }
    };

    
    
    
    
    
    

    template <class K, class V, class H, class P, class A, class E, class G>
    struct types
    {
    public:
        typedef K key_type;
        typedef V value_type;
        typedef H hasher;
        typedef P key_equal;
        typedef A value_allocator;
        typedef E extractor;
        typedef G group_type;
        
        typedef hash_node_constructor<value_allocator, group_type>
            node_constructor;
        typedef hash_buckets<value_allocator, group_type> buckets;
        typedef hash_buffered_functions<hasher, key_equal> buffered_functions;

        typedef typename buckets::node node;
        typedef typename buckets::bucket bucket;
        typedef typename buckets::node_ptr node_ptr;
        typedef typename buckets::bucket_ptr bucket_ptr;
        typedef typename buckets::iterator_base iterator_base;
        typedef typename buckets::node_allocator node_allocator;

        typedef std::pair<iterator_base, iterator_base> iterator_pair;
    };
}}

#line 933 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"

#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"



#line 22 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"

#line 24 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"

namespace boost { namespace unordered_detail {

    
    
    
    template <class A>
    inline typename ungrouped_node_base<A>::node_ptr&
        ungrouped_node_base<A>::next_group(node_ptr ptr)
    {
        return ptr->next_;
    }

    template <class A>
    inline std::size_t ungrouped_node_base<A>::group_count(node_ptr)
    {
        return 1;
    }

    template <class A>
    inline void ungrouped_node_base<A>::add_to_bucket(node_ptr n, bucket& b)
    {
        n->next_ = b.next_;
        b.next_ = n;
    }

    template <class A>
    inline void ungrouped_node_base<A>::add_after_node(node_ptr n,
        node_ptr position)
    {
        n->next_ = position->next_;
        position->next_ = position;
    }
    
    template <class A>
    inline void ungrouped_node_base<A>::unlink_nodes(bucket& b,
        node_ptr begin, node_ptr end)
    {
        node_ptr* pos = &b.next_;
        while(*pos != begin) pos = &(*pos)->next_;
        *pos = end;
    }

    template <class A>
    inline void ungrouped_node_base<A>::unlink_nodes(bucket& b, node_ptr end)
    {
        b.next_ = end;
    }

    template <class A>
    inline void ungrouped_node_base<A>::unlink_node(bucket& b, node_ptr n)
    {
        unlink_nodes(b, n, n->next_);
    }

    
    
    
    
    
    template <class A>
    inline typename grouped_node_base<A>::node_ptr&
        grouped_node_base<A>::next_group(node_ptr ptr)
    {
        return get(ptr).group_prev_->next_;
    }

    template <class A>
    inline typename grouped_node_base<A>::node_ptr
        grouped_node_base<A>::first_in_group(node_ptr ptr)
    {
        while(next_group(ptr) == ptr)
            ptr = get(ptr).group_prev_;
        return ptr;
    }

    template <class A>
    inline std::size_t grouped_node_base<A>::group_count(node_ptr ptr)
    {
        node_ptr start = ptr;
        std::size_t size = 0;
        do {
            ++size;
            ptr = get(ptr).group_prev_;
        } while(ptr != start);
        return size;
    }

    template <class A>
    inline void grouped_node_base<A>::add_to_bucket(node_ptr n, bucket& b)
    {
        n->next_ = b.next_;
        get(n).group_prev_ = n;
        b.next_ = n;
    }

    template <class A>
    inline void grouped_node_base<A>::add_after_node(node_ptr n, node_ptr pos)
    {
        n->next_ = next_group(pos);
        get(n).group_prev_ = get(pos).group_prev_;
        next_group(pos) = n;
        get(pos).group_prev_ = n;
    }

    
    
    
    template <class A>
    inline typename grouped_node_base<A>::node_ptr
        grouped_node_base<A>::split_group(node_ptr split)
    {
        node_ptr first = first_in_group(split);
        if(first == split) return split;

        node_ptr last = get(first).group_prev_;
        get(first).group_prev_ = get(split).group_prev_;
        get(split).group_prev_ = last;

        return first;
    }

    template <class A>
    void grouped_node_base<A>::unlink_node(bucket& b, node_ptr n)
    {
        node_ptr next = n->next_;
        node_ptr* pos = &next_group(n);

        if(*pos != n) {
            

            
            pos = &b.next_;
            while(*pos != n) pos = &next_group(*pos);

            
            if(next &&
                get(next).group_prev_ == n)
            {
                get(next).group_prev_ = get(n).group_prev_;
            }
        }
        else if(next &&
            get(next).group_prev_ == n)
        {
            
            
            get(next).group_prev_ = get(n).group_prev_;
        }
        else {
            
            
            
            node_ptr x = get(n).group_prev_;
            while(get(x).group_prev_ != n) {
                x = get(x).group_prev_;
            }
            get(x).group_prev_ = get(n).group_prev_;
        }
        *pos = next;
    }

    template <class A>
    void grouped_node_base<A>::unlink_nodes(bucket& b,
        node_ptr begin, node_ptr end)
    {
        node_ptr* pos = &next_group(begin);

        if(*pos != begin) {
            

            
            pos = &b.next_;
            while(*pos != begin) pos = &next_group(*pos);

            
            if(end) split_group(end);
        }
        else {
            node_ptr group1 = split_group(begin);
            if(end) {
                node_ptr group2 = split_group(end);

                if(begin == group2) {
                    node_ptr end1 = get(group1).group_prev_;
                    node_ptr end2 = get(group2).group_prev_;
                    get(group1).group_prev_ = end2;
                    get(group2).group_prev_ = end1;
                }
            }
        }
        *pos = end;
    }

    template <class A>
    void grouped_node_base<A>::unlink_nodes(bucket& b, node_ptr end)
    {
        split_group(end);
        b.next_ = end;
    }
}}

#line 227 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/node.hpp"
#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"












#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/limits.hpp"


















































































































































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/iterator/iterator_categories.hpp"




























































































































































































#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"





#line 23 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"






#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"





































































































































































































































































































































































































































































































































#line 548 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"

#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"














#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/cat.hpp"



































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/config/config.hpp"






































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/size.hpp"




































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"






#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"


#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"

#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"


































































































































































































































































#line 289 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/preprocessor/seq/enum.hpp"
#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"

namespace boost { namespace unordered_detail {

    
    

    inline std::size_t double_to_size_t(double f)
    {
        return f >= static_cast<double>(
            (std::numeric_limits<std::size_t>::max)()) ?
            (std::numeric_limits<std::size_t>::max)() :
            static_cast<std::size_t>(f);
    }

    
    










    template<class T> struct prime_list_template
    {
        static std::size_t const value[];


        static std::ptrdiff_t const length;



#line 54 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
    };

    template<class T>
    std::size_t const prime_list_template<T>::value[] = {
        5ul, 11ul, 17ul, 29ul, 37ul, 53ul, 67ul, 79ul, 97ul, 131ul, 193ul, 257ul, 389ul, 521ul, 769ul, 1031ul, 1543ul, 2053ul, 3079ul, 6151ul, 12289ul, 24593ul, 49157ul, 98317ul, 196613ul, 393241ul, 786433ul, 1572869ul, 3145739ul, 6291469ul, 12582917ul, 25165843ul, 50331653ul, 100663319ul, 201326611ul, 402653189ul, 805306457ul, 1610612741ul, 3221225473ul, 4294967291ul
    };


    template<class T>
    std::ptrdiff_t const prime_list_template<T>::length
        = 40;
#line 66 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"



    typedef prime_list_template<std::size_t> prime_list;

    
    inline std::size_t next_prime(std::size_t num) {
        std::size_t const* const prime_list_begin = prime_list::value;
        std::size_t const* const prime_list_end = prime_list_begin +
            prime_list::length;
        std::size_t const* bound =
            std::lower_bound(prime_list_begin, prime_list_end, num);
        if(bound == prime_list_end)
            bound--;
        return *bound;
    }

    
    inline std::size_t prev_prime(std::size_t num) {
        std::size_t const* const prime_list_begin = prime_list::value;
        std::size_t const* const prime_list_end = prime_list_begin +
            prime_list::length;
        std::size_t const* bound =
            std::upper_bound(prime_list_begin,prime_list_end, num);
        if(bound != prime_list_begin)
            bound--;
        return *bound;
    }

    
    

    template <class Dst1, class Dst2, class Src1, class Src2>
    inline std::pair<Dst1, Dst2> pair_cast(std::pair<Src1, Src2> const& x)
    {
        return std::pair<Dst1, Dst2>(Dst1(x.first), Dst2(x.second));
    }

    
    


    using ::std::distance;







#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"

    template <class I>
    inline std::size_t insert_size(I i, I j, boost::forward_traversal_tag)
    {
        return std::distance(i, j);
    }

    template <class I>
    inline std::size_t insert_size(I, I, boost::incrementable_traversal_tag)
    {
        return 1;
    }

    template <class I>
    inline std::size_t insert_size(I i, I j)
    {
        typename boost::iterator_traversal<I>::type
            iterator_traversal_tag;
        return insert_size(i, j, iterator_traversal_tag);
    }
    
    template <class I>
    inline std::size_t initial_size(I i, I j,
        std::size_t num_buckets = boost::unordered_detail::default_bucket_count)
    {
        return (std::max)(static_cast<std::size_t>(insert_size(i, j)) + 1,
            num_buckets);
    }

    
    




















#line 169 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"


























    template < class T,  class Arg0 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 ) { new(address) T(  arg0); } template <class First, class Second, class Key,  class Arg0 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0) { new(address) std::pair<First, Second>(k, Second( arg0)); } template < class T,  class Arg0 , class Arg1 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 ) { new(address) T(  arg0 , arg1); } template <class First, class Second, class Key,  class Arg0 , class Arg1 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1)); } template < class T,  class Arg0 , class Arg1 , class Arg2 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { new(address) T(  arg0 , arg1 , arg2); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { new(address) T(  arg0 , arg1 , arg2 , arg3); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { new(address) T(  arg0 , arg1 , arg2 , arg3 , arg4); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3 , arg4)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { new(address) T(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3 , arg4 , arg5)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { new(address) T(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { new(address) T(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7)); } template < class T,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > inline void construct_impl( T*, void* address,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { new(address) T(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); } template <class First, class Second, class Key,  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > inline void construct_impl( std::pair<First, Second>*, void* address, Key const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { new(address) std::pair<First, Second>(k, Second( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8)); }
#line 197 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"


#line 200 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"

    
    
    

    template <class Alloc, class Grouped>
    class hash_node_constructor
    {
        typedef hash_buckets<Alloc, Grouped> buckets;
        typedef typename buckets::node node;
        typedef typename buckets::real_node_ptr real_node_ptr;
        typedef typename buckets::value_type value_type;

        buckets& buckets_;
        real_node_ptr node_;
        bool node_constructed_;
        bool value_constructed_;

    public:

        hash_node_constructor(buckets& m) :
            buckets_(m),
            node_(),
            node_constructed_(false),
            value_constructed_(false)
        {
        }

        ~hash_node_constructor();
        void construct_preamble();










#line 241 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"

















        template <  class Arg0 > void construct(  Arg0 const& arg0 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 , arg4 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ); value_constructed_ = true; } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > void construct(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { construct_preamble(); construct_impl( (value_type*) 0, node_->address(),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 ); value_constructed_ = true; }
#line 260 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"



#line 264 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
        template <class K, class M>
        void construct_pair(K const& k, M*)
        {
            construct_preamble();
            new(node_->address()) value_type(k, M());                    
            value_constructed_ = true;
        }

        value_type& value() const
        {
            (void)( (!!(node_)) || (_wassert(L"node_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp", 274), 0) );
            return node_->value();
        }

        
        typename buckets::node_ptr release()
        {
            real_node_ptr p = node_;
            node_ = real_node_ptr();
            
            return buckets_.bucket_alloc().address(*p);
        }

    private:
        hash_node_constructor(hash_node_constructor const&);
        hash_node_constructor& operator=(hash_node_constructor const&);
    };
    
    

    template <class Alloc, class Grouped>
    inline hash_node_constructor<Alloc, Grouped>::~hash_node_constructor()
    {
        if (node_) {
            if (value_constructed_) {


#line 302 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
                boost::unordered_detail::destroy(node_->value_ptr());
            }

            if (node_constructed_)
                buckets_.node_alloc().destroy(node_);

            buckets_.node_alloc().deallocate(node_, 1);
        }
    }

    template <class Alloc, class Grouped>
    inline void hash_node_constructor<Alloc, Grouped>::construct_preamble()
    {
        if(!node_) {
            node_constructed_ = false;
            value_constructed_ = false;

            node_ = buckets_.node_alloc().allocate(1);
            buckets_.node_alloc().construct(node_, node());
            node_constructed_ = true;
        }
        else {
            (void)( (!!(node_constructed_ && value_constructed_)) || (_wassert(L"node_constructed_ && value_constructed_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp", 324), 0) );
            boost::unordered_detail::destroy(node_->value_ptr());
            value_constructed_ = false;
        }
    }
}}

#line 332 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/util.hpp"
#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"

namespace boost { namespace unordered_detail {
    
    
    
    
    template <class A, class G>
    inline std::size_t hash_buckets<A, G>::max_bucket_count() const {
        
        return prev_prime(this->bucket_alloc().max_size() - 1);
    }

    template <class A, class G>
    inline typename hash_buckets<A, G>::bucket_ptr
        hash_buckets<A, G>::get_bucket(std::size_t num) const
    {
        return buckets_ + static_cast<std::ptrdiff_t>(num);
    }

    template <class A, class G>
    inline typename hash_buckets<A, G>::bucket_ptr
        hash_buckets<A, G>::bucket_ptr_from_hash(std::size_t hashed) const
    {
        return get_bucket(hashed % bucket_count_);
    }
    
    template <class A, class G>
    std::size_t hash_buckets<A, G>::bucket_size(std::size_t index) const
    {
        if(!buckets_) return 0;
        bucket_ptr ptr = get_bucket(index)->next_;
        std::size_t count = 0;
        while(ptr) {
            ++count;
            ptr = ptr->next_;
        }
        return count;
    }

    template <class A, class G>
    inline typename hash_buckets<A, G>::node_ptr
        hash_buckets<A, G>::bucket_begin(std::size_t num) const
    {
        return buckets_ ? get_bucket(num)->next_ : node_ptr();
    }

    
    

    template <class A, class G>
    inline void hash_buckets<A, G>::delete_node(node_ptr b)
    {
        node* raw_ptr = static_cast<node*>(&*b);
        boost::unordered_detail::destroy(raw_ptr->value_ptr());
        real_node_ptr n(node_alloc().address(*raw_ptr));
        node_alloc().destroy(n);
        node_alloc().deallocate(n, 1);
    }

    template <class A, class G>
    inline void hash_buckets<A, G>::clear_bucket(bucket_ptr b)
    {
        node_ptr node_it = b->next_;
        b->next_ = node_ptr();

        while(node_it) {
            node_ptr node_to_delete = node_it;
            node_it = node_it->next_;
            delete_node(node_to_delete);
        }
    }

    template <class A, class G>
    inline void hash_buckets<A, G>::delete_buckets()
    {      
        bucket_ptr end = this->get_bucket(this->bucket_count_);

        for(bucket_ptr begin = this->buckets_; begin != end; ++begin) {
            clear_bucket(begin);
        }

        
        ++end;
        for(bucket_ptr begin = this->buckets_; begin != end; ++begin) {
            bucket_alloc().destroy(begin);
        }

        bucket_alloc().deallocate(this->buckets_, this->bucket_count_ + 1);

        this->buckets_ = bucket_ptr();
    }

    template <class A, class G>
    inline std::size_t hash_buckets<A, G>::delete_nodes(
        node_ptr begin, node_ptr end)
    {
        std::size_t count = 0;
        while(begin != end) {
            node_ptr n = begin;
            begin = begin->next_;
            delete_node(n);
            ++count;
        }
        return count;
    }

    
    

    template <class A, class G>
    inline hash_buckets<A, G>::hash_buckets(
        node_allocator const& a, std::size_t bucket_count)
      : buckets_(),
        bucket_count_(bucket_count),
        allocators_(a,a)
    {
    }

    template <class A, class G>
    inline hash_buckets<A, G>::~hash_buckets()
    {
        if(this->buckets_) { this->delete_buckets(); }
    }
    
    template <class A, class G>
    inline void hash_buckets<A, G>::create_buckets()
    {
        
        
        allocator_array_constructor<bucket_allocator>
            constructor(bucket_alloc());

        
        constructor.construct(bucket(), this->bucket_count_ + 1);

        
        bucket_ptr sentinel = constructor.get() +
            static_cast<std::ptrdiff_t>(this->bucket_count_);
        sentinel->next_ = sentinel;

        
        
        this->buckets_ = constructor.release();
    }

    
    

    
    template <class A, class G>
    inline void hash_buckets<A, G>::move(hash_buckets& other)
    {
        (void)( (!!(node_alloc() == other.node_alloc())) || (_wassert(L"node_alloc() == other.node_alloc()", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp", 166), 0) );
        if(this->buckets_) { this->delete_buckets(); }
        this->buckets_ = other.buckets_;
        this->bucket_count_ = other.bucket_count_;
        other.buckets_ = bucket_ptr();
        other.bucket_count_ = 0;
    }

    template <class A, class G>
    inline void hash_buckets<A, G>::swap(hash_buckets<A, G>& other)
    {
        (void)( (!!(node_alloc() == other.node_alloc())) || (_wassert(L"node_alloc() == other.node_alloc()", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp", 177), 0) );
        std::swap(buckets_, other.buckets_);
        std::swap(bucket_count_, other.bucket_count_);
    }
}}

#line 184 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/buckets.hpp"
#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"

namespace boost { namespace unordered_detail {

    
    

    
    template <class T>
    inline bool hash_table<T>::equal(
        key_type const& k, value_type const& v) const
    {
        return this->key_eq()(k, get_key(v));
    }

    
    template <class T>
    template <class Key, class Pred>
    inline typename T::node_ptr
        hash_table<T>::find_iterator(bucket_ptr bucket, Key const& k,
            Pred const& eq) const
    {
        node_ptr it = bucket->next_;
        while (it &&
            !eq(k, get_key(node::get_value(it))))
        {
            it = node::next_group(it);
        }

        return it;
    }

    
    template <class T>
    inline typename T::node_ptr
        hash_table<T>::find_iterator(
            bucket_ptr bucket, key_type const& k) const
    {
        node_ptr it = bucket->next_;
        while (it &&
            !equal(k, node::get_value(it)))
        {
            it = node::next_group(it);
        }

        return it;
    }

    
    
    template <class T>
    inline typename T::node_ptr
        hash_table<T>::find_iterator(key_type const& k) const
    {
        return find_iterator(this->get_bucket(this->bucket_index(k)), k);
    }

    
    template <class T>
    inline typename T::node_ptr*
        hash_table<T>::find_for_erase(
            bucket_ptr bucket, key_type const& k) const
    {
        node_ptr* it = &bucket->next_;
        while(*it &&
            !equal(k, node::get_value(*it)))
        {
            it = &node::next_group(*it);
        }

        return it;
    }

    
    

    
    template <class T>
    std::size_t hash_table<T>::max_size() const
    {
        using namespace std;

        
        return double_to_size_t(ceil(
                (double) this->mlf_ * this->max_bucket_count())) - 1;
    }

    
    template <class T>
    inline std::size_t hash_table<T>::bucket_index(
        key_type const& k) const
    {
        
        return this->hash_function()(k) % this->bucket_count_;
    }


    
    template <class T>
    inline std::size_t hash_table<T>::calculate_max_load()
    {
        using namespace std;

        
        
        return double_to_size_t(ceil((double) mlf_ * this->bucket_count_));
    }

    template <class T>
    void hash_table<T>::max_load_factor(float z)
    {
        (void)( (!!(z > 0)) || (_wassert(L"z > 0", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 128), 0) );
        mlf_ = (std::max)(z, minimum_max_load_factor);
        this->max_load_ = this->calculate_max_load();
    }

    
    template <class T>
    inline std::size_t hash_table<T>::min_buckets_for_size(
        std::size_t size) const
    {
        (void)( (!!(this->mlf_ != 0)) || (_wassert(L"this->mlf_ != 0", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 138), 0) );

        using namespace std;

        
        
        
        
        
        
        return next_prime(double_to_size_t(floor(size / (double) mlf_)) + 1);
    }

    
    

    

    template <class T>
    inline void hash_table<T>::init_buckets()
    {
        if (this->size_) {
            this->cached_begin_bucket_ = this->buckets_;
            while (!this->cached_begin_bucket_->next_)
                ++this->cached_begin_bucket_;
        } else {
            this->cached_begin_bucket_ = this->get_bucket(this->bucket_count_);
        }
        this->max_load_ = calculate_max_load();
    }

    
    
    
    

    template <class T>
    inline void hash_table<T>::recompute_begin_bucket(bucket_ptr b)
    {
        (void)( (!!(!(b < this->cached_begin_bucket_))) || (_wassert(L"!(b < this->cached_begin_bucket_)", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 177), 0) );

        if(b == this->cached_begin_bucket_)
        {
            if (this->size_ != 0) {
                while (!this->cached_begin_bucket_->next_)
                    ++this->cached_begin_bucket_;
            } else {
                this->cached_begin_bucket_ =
                    this->get_bucket(this->bucket_count_);
            }
        }
    }

    
    
    

    template <class T>
    inline void hash_table<T>::recompute_begin_bucket(
        bucket_ptr b1, bucket_ptr b2)
    {
        (void)( (!!(!(b1 < this->cached_begin_bucket_) && !(b2 < b1))) || (_wassert(L"!(b1 < this->cached_begin_bucket_) && !(b2 < b1)", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 199), 0) );
        (void)( (!!(b2->next_)) || (_wassert(L"b2->next_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 200), 0) );

        if(b1 == this->cached_begin_bucket_ && !b1->next_)
            this->cached_begin_bucket_ = b2;
    }

    
    template <class T>
    inline float hash_table<T>::load_factor() const
    {
        (void)( (!!(this->bucket_count_ != 0)) || (_wassert(L"this->bucket_count_ != 0", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 210), 0) );
        return static_cast<float>(this->size_)
            / static_cast<float>(this->bucket_count_);
    }

    
    

    template <class T>
    hash_table<T>::hash_table(std::size_t num_buckets,
        hasher const& hf, key_equal const& eq, node_allocator const& a)
      : buckets(a, next_prime(num_buckets)),
        base(hf, eq),
        size_(),
        mlf_(1.0f),
        cached_begin_bucket_(),
        max_load_(0)
    {
    }

    

    template <class T>
    hash_table<T>::hash_table(hash_table const& x,
        node_allocator const& a)
      : buckets(a, x.min_buckets_for_size(x.size_)),
        base(x),
        size_(x.size_),
        mlf_(x.mlf_),
        cached_begin_bucket_(),
        max_load_(0)
    {
        if(x.size_) {
            x.copy_buckets_to(*this);
            this->init_buckets();
        }
    }

    

    template <class T>
    hash_table<T>::hash_table(hash_table& x, move_tag)
      : buckets(x.node_alloc(), x.bucket_count_),
        base(x),
        size_(0),
        mlf_(1.0f),
        cached_begin_bucket_(),
        max_load_(0)
    {
        this->partial_swap(x);
    }

    template <class T>
    hash_table<T>::hash_table(hash_table& x,
        node_allocator const& a, move_tag)
      : buckets(a, x.bucket_count_),
        base(x),
        size_(0),
        mlf_(x.mlf_),
        cached_begin_bucket_(),
        max_load_(0)
    {
        if(a == x.node_alloc()) {
            this->partial_swap(x);
        }
        else if(x.size_) {
            x.copy_buckets_to(*this);
            this->size_ = x.size_;
            this->init_buckets();
        }
    }

    template <class T>
    hash_table<T>& hash_table<T>::operator=(
        hash_table const& x)
    {
        hash_table tmp(x, this->node_alloc());
        this->fast_swap(tmp);
        return *this;
    }

    
    
    
    
    
    
    
    
    

    template <class T>
    inline void hash_table<T>::partial_swap(hash_table& x)
    {
        this->buckets::swap(x); 
        std::swap(this->size_, x.size_);
        std::swap(this->mlf_, x.mlf_);
        std::swap(this->cached_begin_bucket_, x.cached_begin_bucket_);
        std::swap(this->max_load_, x.max_load_);
    }

    template <class T>
    inline void hash_table<T>::fast_swap(hash_table& x)
    {
        
        
        
        {
            set_hash_functions<hasher, key_equal> op1(*this, x);
            set_hash_functions<hasher, key_equal> op2(x, *this);
            op1.commit();
            op2.commit();
        }
        this->buckets::swap(x); 
        std::swap(this->size_, x.size_);
        std::swap(this->mlf_, x.mlf_);
        std::swap(this->cached_begin_bucket_, x.cached_begin_bucket_);
        std::swap(this->max_load_, x.max_load_);
    }

    template <class T>
    inline void hash_table<T>::slow_swap(hash_table& x)
    {
        if(this == &x) return;

        {
            
            
            
            set_hash_functions<hasher, key_equal> op1(*this, x);
            set_hash_functions<hasher, key_equal> op2(x, *this);
        
            
            
            
        
            buckets b1(this->node_alloc(), x.min_buckets_for_size(x.size_));
            if(x.size_) x.copy_buckets_to(b1);
        
            buckets b2(x.node_alloc(), this->min_buckets_for_size(this->size_));
            if(this->size_) copy_buckets_to(b2);
        
            
        
            b1.swap(*this);
            b2.swap(x);
            op1.commit();
            op2.commit();
        }
        
        std::swap(this->size_, x.size_);

        if(this->buckets_) this->init_buckets();
        if(x.buckets_) x.init_buckets();
    }

    template <class T>
    void hash_table<T>::swap(hash_table& x)
    {
        if(this->node_alloc() == x.node_alloc()) {
            if(this != &x) this->fast_swap(x);
        }
        else {
            this->slow_swap(x);
        }
    }

    
    
    
    
    
    
    

    template <class T>
    void hash_table<T>::move(hash_table& x)
    {
        
        
        
        set_hash_functions<hasher, key_equal> new_func_this(*this, x);

        if(this->node_alloc() == x.node_alloc()) {
            this->buckets::move(x); 
            this->size_ = x.size_;
            this->cached_begin_bucket_ = x.cached_begin_bucket_;
            this->max_load_ = x.max_load_;
            x.size_ = 0;
        }
        else {
            
            
            
            
            buckets b(this->node_alloc(), x.min_buckets_for_size(x.size_));
            if(x.size_) x.copy_buckets_to(b);

            
            this->size_ = x.size_;
            b.swap(*this);
            this->init_buckets();
        }

        
        this->mlf_ = x.mlf_;
        new_func_this.commit();
    }
    
    
    

    
    template <class T>
    inline void hash_table<T>::create_for_insert(std::size_t size)
    {
        this->bucket_count_ = (std::max)(this->bucket_count_,
            this->min_buckets_for_size(size));
        this->create_buckets();
        this->init_buckets();
    }

    
    template <class T>
    inline bool hash_table<T>::reserve_for_insert(std::size_t size)
    {
        if(size >= max_load_) {
            std::size_t num_buckets
                = this->min_buckets_for_size((std::max)(size,
                    this->size_ + (this->size_ >> 1)));
            if(num_buckets != this->bucket_count_) {
                rehash_impl(num_buckets);
                return true;
            }
        }
        
        return false;
    }

    
    

    template <class T>
    inline void hash_table<T>::rehash(std::size_t min_buckets)
    {
        using namespace std;

        if(!this->size_) {
            if(this->buckets_) this->delete_buckets();
            this->bucket_count_ = next_prime(min_buckets);
        }
        else {
            
            min_buckets = next_prime((std::max)(min_buckets,
                    double_to_size_t(floor(this->size_ / (double) mlf_)) + 1));
            if(min_buckets != this->bucket_count_) rehash_impl(min_buckets);
        }
    }

    
    

    template <class T>
    void hash_table<T>
        ::rehash_impl(std::size_t num_buckets)
    {    
        hasher const& hf = this->hash_function();
        std::size_t size = this->size_;
        bucket_ptr end = this->get_bucket(this->bucket_count_);

        buckets dst(this->node_alloc(), num_buckets);
        dst.create_buckets();

        buckets src(this->node_alloc(), this->bucket_count_);
        src.swap(*this);
        this->size_ = 0;

        for(bucket_ptr bucket = this->cached_begin_bucket_;
            bucket != end; ++bucket)
        {
            node_ptr group = bucket->next_;
            while(group) {
                

                
                bucket_ptr dst_bucket = dst.bucket_ptr_from_hash(
                    hf(get_key_from_ptr(group)));

                node_ptr& next_group = node::next_group(group);
                bucket->next_ = next_group;
                next_group = dst_bucket->next_;
                dst_bucket->next_ = group;
                group = bucket->next_;
            }
        }

        
        
        this->size_ = size;
        dst.swap(*this);                        
        this->init_buckets();
    }

    
    

    
    
    
    

    template <class T>
    void hash_table<T>
        ::copy_buckets_to(buckets& dst) const
    {
        (void)( (!!(this->buckets_ && !dst.buckets_)) || (_wassert(L"this->buckets_ && !dst.buckets_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 525), 0) );

        hasher const& hf = this->hash_function();
        bucket_ptr end = this->get_bucket(this->bucket_count_);

        node_constructor a(dst);
        dst.create_buckets();

        
        for(bucket_ptr i = this->cached_begin_bucket_; i != end; ++i) {
            
            for(node_ptr it = i->next_; it;) {
                
                bucket_ptr dst_bucket = dst.bucket_ptr_from_hash(
                    hf(get_key_from_ptr(it)));
                

                node_ptr group_end = node::next_group(it);

                a.construct(node::get_value(it));
                node_ptr n = a.release();
                node::add_to_bucket(n, *dst_bucket);
        
                for(it = it->next_; it != group_end; it = it->next_) {
                    a.construct(node::get_value(it));
                    node::add_after_node(a.release(), n);
                }
            }
        }
    }

    
    

    

    
    
    

    template <class T>
    std::size_t hash_table<T>::count(key_type const& k) const
    {
        if(!this->size_) return 0;
        node_ptr it = find_iterator(k); 
        return it ? node::group_count(it) : 0;
    }

    
    
    
    template <class T>
    typename T::iterator_base
        hash_table<T>::find(key_type const& k) const
    {
        if(!this->size_) return this->end();

        bucket_ptr bucket = this->get_bucket(this->bucket_index(k));
        node_ptr it = find_iterator(bucket, k);

        if (it)
            return iterator_base(bucket, it);
        else
            return this->end();
    }

    template <class T>
    template <class Key, class Hash, class Pred>
    typename T::iterator_base hash_table<T>::find(Key const& k,
        Hash const& h, Pred const& eq) const
    {
        if(!this->size_) return this->end();

        bucket_ptr bucket = this->get_bucket(h(k) % this->bucket_count_);
        node_ptr it = find_iterator(bucket, k, eq);

        if (it)
            return iterator_base(bucket, it);
        else
            return this->end();
    }

    template <class T>
    typename T::value_type&
        hash_table<T>::at(key_type const& k) const
    {
        if(!this->size_)
            boost::throw_exception(std::out_of_range("Unable to find key in unordered_map."));

        bucket_ptr bucket = this->get_bucket(this->bucket_index(k));
        node_ptr it = find_iterator(bucket, k);

        if (!it)
            boost::throw_exception(std::out_of_range("Unable to find key in unordered_map."));

        return node::get_value(it);
    }

    
    
    
    template <class T>
    typename T::iterator_pair
        hash_table<T>::equal_range(key_type const& k) const
    {
        if(!this->size_)
            return iterator_pair(this->end(), this->end());

        bucket_ptr bucket = this->get_bucket(this->bucket_index(k));
        node_ptr it = find_iterator(bucket, k);
        if (it) {
            iterator_base first(iterator_base(bucket, it));
            iterator_base second(first);
            second.increment_bucket(node::next_group(second.node_));
            return iterator_pair(first, second);
        }
        else {
            return iterator_pair(this->end(), this->end());
        }
    }
    
    
    
    
    template <class T>
    void hash_table<T>::clear()
    {
        if(!this->size_) return;

        bucket_ptr end = this->get_bucket(this->bucket_count_);
        for(bucket_ptr begin = this->buckets_; begin != end; ++begin) {
            this->clear_bucket(begin);
        }

        this->size_ = 0;
        this->cached_begin_bucket_ = end;
    }

    template <class T>
    inline std::size_t hash_table<T>::erase_group(
        node_ptr* it, bucket_ptr bucket)
    {
        node_ptr pos = *it;
        node_ptr end = node::next_group(pos);
        *it = end;
        std::size_t count = this->delete_nodes(pos, end);
        this->size_ -= count;
        this->recompute_begin_bucket(bucket);
        return count;
    }
    
    template <class T>
    std::size_t hash_table<T>::erase_key(key_type const& k)
    {
        if(!this->size_) return 0;
    
        
        bucket_ptr bucket = this->get_bucket(this->bucket_index(k));
        node_ptr* it = this->find_for_erase(bucket, k);

        
        return *it ? this->erase_group(it, bucket) : 0;
    }

    template <class T>
    void hash_table<T>::erase(iterator_base r)
    {
        (void)( (!!(r.node_)) || (_wassert(L"r.node_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 692), 0) );
        --this->size_;
        node::unlink_node(*r.bucket_, r.node_);
        this->delete_node(r.node_);
        
        this->recompute_begin_bucket(r.bucket_);
    }

    template <class T>
    typename T::iterator_base
        hash_table<T>::erase_return_iterator(iterator_base r)
    {
        (void)( (!!(r.node_)) || (_wassert(L"r.node_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 704), 0) );
        iterator_base next = r;
        next.increment();
        --this->size_;
        node::unlink_node(*r.bucket_, r.node_);
        this->delete_node(r.node_);
        
        this->recompute_begin_bucket(r.bucket_, next.bucket_);
        return next;
    }

    template <class T>
    typename T::iterator_base
        hash_table<T>::erase_range(
            iterator_base r1, iterator_base r2)
    {
        if(r1 != r2)
        {
            (void)( (!!(r1.node_)) || (_wassert(L"r1.node_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 722), 0) );
            if (r1.bucket_ == r2.bucket_) {
                node::unlink_nodes(*r1.bucket_, r1.node_, r2.node_);
                this->size_ -= this->delete_nodes(r1.node_, r2.node_);

                
                
                
                 (void)( (!!(r1.bucket_->next_)) || (_wassert(L"r1.bucket_->next_", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 730), 0) );
            }
            else {
                bucket_ptr end_bucket = r2.node_ ?
                    r2.bucket_ : this->get_bucket(this->bucket_count_);
                (void)( (!!(r1.bucket_ < end_bucket)) || (_wassert(L"r1.bucket_ < end_bucket", L"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp", 735), 0) );
                node::unlink_nodes(*r1.bucket_, r1.node_, node_ptr());
                this->size_ -= this->delete_nodes(r1.node_, node_ptr());

                bucket_ptr i = r1.bucket_;
                for(++i; i != end_bucket; ++i) {
                    this->size_ -= this->delete_nodes(i->next_, node_ptr());
                    i->next_ = node_ptr();
                }

                if(r2.node_) {
                    node_ptr first = r2.bucket_->next_;
                    node::unlink_nodes(*r2.bucket_, r2.node_);
                    this->size_ -= this->delete_nodes(first, r2.node_);
                }

                
                
                this->recompute_begin_bucket(r1.bucket_, end_bucket);
            }
        }

        return r2;
    }

    template <class T>
    typename hash_table<T>::iterator_base
        hash_table<T>::emplace_empty_impl_with_node(
            node_constructor& a, std::size_t size)
    {
        key_type const& k = get_key(a.value());
        std::size_t hash_value = this->hash_function()(k);
        if(this->buckets_) this->reserve_for_insert(size);
        else this->create_for_insert(size);
        bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value);
        node_ptr n = a.release();
        node::add_to_bucket(n, *bucket);
        ++this->size_;
        this->cached_begin_bucket_ = bucket;
        return iterator_base(bucket, n);
    }
}}

#line 779 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"
#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"








#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 10 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"























#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 26 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"

































































































#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"


#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"





#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/integral_constant.hpp"





















































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/bool.hpp"







































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






























#line 50 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"























































































































#line 185 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_def.hpp"
#line 41 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"

namespace boost {

namespace detail{
template <class T>
struct is_volatile_rval_filter
{


#line 51 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"
   static const bool value = ::boost::detail::cv_traits_imp<T*>::is_volatile;
#line 53 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"
};





template <class T>
struct is_volatile_rval_filter<T&&>
{
   static const bool value = false;
};
#line 65 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"
}



#line 70 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"


template< typename T > struct is_volatile : public ::boost::integral_constant<bool,::boost::detail::is_volatile_rval_filter<T>::value> { public:   }; 
template< typename T > struct is_volatile< T& > : public ::boost::integral_constant<bool,false> { public:  };









#line 84 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"






























































#line 147 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/bool_trait_undef.hpp"



























#line 151 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"

#line 153 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/is_volatile.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/broken_compiler_spec.hpp"





















































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/cv_traits_impl.hpp"

































































































#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/config.hpp"






































































#line 18 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/detail/workaround.hpp"











































































































































































































































































#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"





#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"


#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/int.hpp"






















#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/template_arity_fwd.hpp"























#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/preprocessor/params.hpp"

































































#line 13 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/lambda.hpp"
































#line 14 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/config/overload_resolution.hpp"





























#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/mpl/aux_/lambda_support.hpp"









































































































































































#line 16 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_def.hpp"




















































#line 28 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"

namespace boost {



namespace detail {

template <typename T, bool is_vol>
struct remove_const_helper
{
    typedef T type;
};

template <typename T>
struct remove_const_helper<T, true>
{
    typedef T volatile type;
};


template <typename T>
struct remove_const_impl
{
    typedef typename remove_const_helper<
          typename cv_traits_imp<T*>::unqualified_type
        , ::boost::is_volatile<T>::value
        >::type type;
};






template <typename T>
struct remove_const_impl<T&&>
{
    typedef T&& type;
};
#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"

} 



template< typename T > struct remove_const { public: typedef typename boost::detail::remove_const_impl<T>::type type;  }; 
template< typename T > struct remove_const<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_const<T const[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_const<T const volatile[N]> { public: typedef T volatile type[N]; };
#line 79 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"





#line 85 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"

} 

#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 89 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"

#line 91 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/type_traits/remove_const.hpp"
#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/fwd.hpp"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"

namespace boost {
namespace unordered_detail {

    
    
    
    
    
    
    
    
    

    struct no_key {
        no_key() {}
        template <class T> no_key(T const&) {}
    };

    template <class ValueType>
    struct set_extractor
    {
        typedef ValueType value_type;
        typedef ValueType key_type;

        static key_type const& extract(key_type const& v)
        {
            return v;
        }

        static no_key extract()
        {
            return no_key();
        }
        







#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"
        template <class Arg>
        static no_key extract(Arg const&)
        {
            return no_key();
        }

        template <class Arg>
        static no_key extract(Arg const&, Arg const&)
        {
            return no_key();
        }
#line 67 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"

        static bool compare_mapped(value_type const&, value_type const&)
        {
            return true;
        }
    };

    template <class Key, class ValueType>
    struct map_extractor
    {
        typedef ValueType value_type;
        typedef typename boost::remove_const<Key>::type key_type;

        static key_type const& extract(value_type const& v)
        {
            return v.first;
        }
            
        static key_type const& extract(key_type const& v)
        {
            return v;
        }

        template <class Second>
        static key_type const& extract(std::pair<key_type, Second> const& v)
        {
            return v.first;
        }

        template <class Second>
        static key_type const& extract(
            std::pair<key_type const, Second> const& v)
        {
            return v.first;
        }














#line 117 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"
        template <class Arg1>
        static key_type const& extract(key_type const& k, Arg1 const&)
        {
            return k;
        }

        static no_key extract()
        {
            return no_key();
        }

        template <class Arg>
        static no_key extract(Arg const&)
        {
            return no_key();
        }

        template <class Arg, class Arg1>
        static no_key extract(Arg const&, Arg1 const&)
        {
            return no_key();
        }
#line 140 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"

        static bool compare_mapped(value_type const& x, value_type const& y)
        {
            return x.second == y.second;
        }
    };
}}

#line 149 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"
#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"

namespace boost { namespace unordered_detail {

    template <class T>
    class hash_equivalent_table : public T::table
    {
    public:
        typedef typename T::hasher hasher;
        typedef typename T::key_equal key_equal;
        typedef typename T::value_allocator value_allocator;
        typedef typename T::key_type key_type;
        typedef typename T::value_type value_type;
        typedef typename T::table table;
        typedef typename T::node_constructor node_constructor;

        typedef typename T::node node;
        typedef typename T::node_ptr node_ptr;
        typedef typename T::bucket_ptr bucket_ptr;
        typedef typename T::iterator_base iterator_base;
        typedef typename T::extractor extractor;

        

        hash_equivalent_table(std::size_t n,
            hasher const& hf, key_equal const& eq, value_allocator const& a)
          : table(n, hf, eq, a) {}
        hash_equivalent_table(hash_equivalent_table const& x)
          : table(x, x.node_alloc()) {}
        hash_equivalent_table(hash_equivalent_table const& x,
            value_allocator const& a)
          : table(x, a) {}
        hash_equivalent_table(hash_equivalent_table& x, move_tag m)
          : table(x, m) {}
        hash_equivalent_table(hash_equivalent_table& x,
            value_allocator const& a, move_tag m)
          : table(x, a, m) {}
        ~hash_equivalent_table() {}

        

        iterator_base emplace_impl(node_constructor& a);
        void emplace_impl_no_rehash(node_constructor& a);

        

        bool equals(hash_equivalent_table const&) const;

        inline node_ptr add_node(node_constructor& a,
            bucket_ptr bucket, node_ptr pos);






#line 68 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"





        template < class Arg0> iterator_base emplace( Arg0 const& arg0); template < class Arg0 , class Arg1> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1); template < class Arg0 , class Arg1 , class Arg2> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2); template < class Arg0 , class Arg1 , class Arg2 , class Arg3> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> iterator_base emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8);
#line 75 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"


#line 78 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"

        template <class I>
        void insert_for_range(I i, I j, forward_traversal_tag);
        template <class I>
        void insert_for_range(I i, I j, boost::incrementable_traversal_tag);
        template <class I>
        void insert_range(I i, I j);
    };

    template <class H, class P, class A>
    struct multiset : public types<
        typename A::value_type,
        typename A::value_type,
        H, P, A,
        set_extractor<typename A::value_type>,
        grouped>
    {
        typedef hash_equivalent_table<multiset<H, P, A> > impl;
        typedef hash_table<multiset<H, P, A> > table;
    };

    template <class K, class H, class P, class A>
    struct multimap : public types<
        K, typename A::value_type,
        H, P, A,
        map_extractor<K, typename A::value_type>,
        grouped>
    {
        typedef hash_equivalent_table<multimap<K, H, P, A> > impl;
        typedef hash_table<multimap<K, H, P, A> > table;
    };

    
    

    template <class T>
    bool hash_equivalent_table<T>
        ::equals(hash_equivalent_table<T> const& other) const
    {
        if(this->size_ != other.size_) return false;
        if(!this->size_) return true;

        bucket_ptr end = this->get_bucket(this->bucket_count_);
        for(bucket_ptr i = this->cached_begin_bucket_; i != end; ++i)
        {
            node_ptr it1 = i->next_;
            while(it1)
            {
                node_ptr it2 = other.find_iterator(this->get_key_from_ptr(it1));
                if(!it2) return false;
                
                node_ptr end1 = node::next_group(it1);
                node_ptr end2 = node::next_group(it2);

                do {
                    if(!extractor::compare_mapped(
                        node::get_value(it1), node::get_value(it2)))
                        return false;
                    it1 = it1->next_;
                    it2 = it2->next_;
                } while(it1 != end1 && it2 != end2);
                if(it1 != end1 || it2 != end2) return false;
            }
        }

        return true;
    }

    
    

    template <class T>
    inline typename hash_equivalent_table<T>::node_ptr
        hash_equivalent_table<T>
            ::add_node(node_constructor& a, bucket_ptr bucket, node_ptr pos)
    {
        node_ptr n = a.release();
        if(pos) {
            node::add_after_node(n, pos);                
        }
        else {
            node::add_to_bucket(n, *bucket);
            if(bucket < this->cached_begin_bucket_)
                this->cached_begin_bucket_ = bucket;
        }
        ++this->size_;
        return n;
    }

    
    

    template <class T>
    inline typename
        hash_equivalent_table<T>::iterator_base
        hash_equivalent_table<T>::emplace_impl(node_constructor& a)
    {
        key_type const& k = this->get_key(a.value());
        std::size_t hash_value = this->hash_function()(k);
        
        if(!this->size_) {
            return this->emplace_empty_impl_with_node(a, 1);
        }
        else {
            bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value);
            node_ptr position = this->find_iterator(bucket, k);

            
            
            if(this->reserve_for_insert(this->size_ + 1))
                bucket = this->bucket_ptr_from_hash(hash_value);

            return iterator_base(bucket, add_node(a, bucket, position));
        }
    }
    
    template <class T>
    inline void hash_equivalent_table<T>
            ::emplace_impl_no_rehash(node_constructor& a)
    {
        key_type const& k = this->get_key(a.value());
        bucket_ptr bucket = this->get_bucket(this->bucket_index(k));
        add_node(a, bucket, this->find_iterator(bucket, k));
    }






















#line 225 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"













    template <class T> template < class Arg0> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0) { node_constructor a(*this); a.construct( arg0); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1) { node_constructor a(*this); a.construct( arg0 , arg1); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); return emplace_impl(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> typename hash_equivalent_table<T>::iterator_base hash_equivalent_table<T> ::emplace( Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); return emplace_impl(a); }
#line 240 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"


#line 243 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"

    
    

    
    
    template <class T>
    template <class I>
    inline void hash_equivalent_table<T>
        ::insert_for_range(I i, I j, forward_traversal_tag)
    {
        if(i == j) return;
        std::size_t distance = unordered_detail::distance(i, j);
        if(distance == 1) {
            emplace(*i);
        }
        else {
            node_constructor a(*this);

            
            if(this->size_) {
                this->reserve_for_insert(this->size_ + distance);
            }
            else {
                a.construct(*i++);
                this->emplace_empty_impl_with_node(a, distance);
            }

            for (; i != j; ++i) {
                a.construct(*i);
                emplace_impl_no_rehash(a);
            }
        }
    }

    
    
    template <class T>
    template <class I>
    inline void hash_equivalent_table<T>
        ::insert_for_range(I i, I j, boost::incrementable_traversal_tag)
    {
        node_constructor a(*this);
        for (; i != j; ++i) {
            a.construct(*i);
            emplace_impl(a);
        }
    }

    
    
    template <class T>
    template <class I>
    void hash_equivalent_table<T>::insert_range(I i, I j)
    {
        typename boost::iterator_traversal<I>::type
            iterator_traversal_tag;
        insert_for_range(i, j, iterator_traversal_tag);
    }
}}

#line 305 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/equivalent.hpp"
#line 20 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"









#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/table.hpp"










































































































































































































































































































































































































































































































































































































































































































































































































#line 11 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"
#line 1 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/extract_key.hpp"




















































































































































#line 12 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"

namespace boost { namespace unordered_detail {

    template <class T>
    class hash_unique_table : public T::table
    {
    public:
        typedef typename T::hasher hasher;
        typedef typename T::key_equal key_equal;
        typedef typename T::value_allocator value_allocator;
        typedef typename T::key_type key_type;
        typedef typename T::value_type value_type;
        typedef typename T::table table;
        typedef typename T::node_constructor node_constructor;

        typedef typename T::node node;
        typedef typename T::node_ptr node_ptr;
        typedef typename T::bucket_ptr bucket_ptr;
        typedef typename T::iterator_base iterator_base;
        typedef typename T::extractor extractor;
        
        typedef std::pair<iterator_base, bool> emplace_return;

        

        hash_unique_table(std::size_t n, hasher const& hf, key_equal const& eq,
            value_allocator const& a)
          : table(n, hf, eq, a) {}
        hash_unique_table(hash_unique_table const& x)
          : table(x, x.node_alloc()) {}
        hash_unique_table(hash_unique_table const& x, value_allocator const& a)
          : table(x, a) {}
        hash_unique_table(hash_unique_table& x, move_tag m)
          : table(x, m) {}
        hash_unique_table(hash_unique_table& x, value_allocator const& a,
            move_tag m)
          : table(x, a, m) {}
        ~hash_unique_table() {}

        

        emplace_return emplace_impl_with_node(node_constructor& a);
        value_type& operator[](key_type const& k);

        

        bool equals(hash_unique_table const&) const;

        node_ptr add_node(node_constructor& a, bucket_ptr bucket);
        










#line 73 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"















        template < class Arg0> emplace_return emplace(  Arg0 const& arg0); template < class Arg0> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0); template < class Arg0> emplace_return emplace_impl(no_key,  Arg0 const& arg0); template < class Arg0> emplace_return emplace_empty_impl(  Arg0 const& arg0); template < class Arg0 , class Arg1> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1); template < class Arg0 , class Arg1> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1); template < class Arg0 , class Arg1> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1); template < class Arg0 , class Arg1> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1); template < class Arg0 , class Arg1 , class Arg2> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2); template < class Arg0 , class Arg1 , class Arg2> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2); template < class Arg0 , class Arg1 , class Arg2> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2); template < class Arg0 , class Arg1 , class Arg2> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2); template < class Arg0 , class Arg1 , class Arg2 , class Arg3> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3); template < class Arg0 , class Arg1 , class Arg2 , class Arg3> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3); template < class Arg0 , class Arg1 , class Arg2 , class Arg3> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3); template < class Arg0 , class Arg1 , class Arg2 , class Arg3> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> emplace_return emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> emplace_return emplace_impl(key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> emplace_return emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8); template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> emplace_return emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8);
#line 90 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"



#line 94 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"

        
        
        template <class InputIt>
        void insert_range(InputIt i, InputIt j);
        template <class InputIt>
        void insert_range_impl(key_type const&, InputIt i, InputIt j);
        template <class InputIt>
        void insert_range_impl2(node_constructor&, key_type const&, InputIt i, InputIt j);
        template <class InputIt>
        void insert_range_impl(no_key, InputIt i, InputIt j);
    };

    template <class H, class P, class A>
    struct set : public types<
        typename A::value_type,
        typename A::value_type,
        H, P, A,
        set_extractor<typename A::value_type>,
        ungrouped>
    {        
        typedef hash_unique_table<set<H, P, A> > impl;
        typedef hash_table<set<H, P, A> > table;
    };

    template <class K, class H, class P, class A>
    struct map : public types<
        K, typename A::value_type,
        H, P, A,
        map_extractor<K, typename A::value_type>,
        ungrouped>
    {
        typedef hash_unique_table<map<K, H, P, A> > impl;
        typedef hash_table<map<K, H, P, A> > table;
    };

    
    

    template <class T>
    bool hash_unique_table<T>
        ::equals(hash_unique_table<T> const& other) const
    {
        if(this->size_ != other.size_) return false;
        if(!this->size_) return true;

        bucket_ptr end = this->get_bucket(this->bucket_count_);
        for(bucket_ptr i = this->cached_begin_bucket_; i != end; ++i)
        {
            node_ptr it1 = i->next_;
            while(it1)
            {
                node_ptr it2 = other.find_iterator(this->get_key_from_ptr(it1));
                if(!it2) return false;
                if(!extractor::compare_mapped(
                    node::get_value(it1), node::get_value(it2)))
                    return false;
                it1 = it1->next_;
            }
        }

        return true;
    }

    
    

    template <class T>
    inline typename hash_unique_table<T>::node_ptr
        hash_unique_table<T>::add_node(node_constructor& a,
            bucket_ptr bucket)
    {
        node_ptr n = a.release();
        node::add_to_bucket(n, *bucket);
        ++this->size_;
        if(bucket < this->cached_begin_bucket_)
            this->cached_begin_bucket_ = bucket;
        return n;
    }
        
    
    

    
    
    template <class T>
    typename hash_unique_table<T>::value_type&
        hash_unique_table<T>::operator[](key_type const& k)
    {
        typedef typename value_type::second_type mapped_type;

        std::size_t hash_value = this->hash_function()(k);
        bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value);
        
        if(!this->buckets_) {
            node_constructor a(*this);
            a.construct_pair(k, (mapped_type*) 0);
            return *this->emplace_empty_impl_with_node(a, 1);
        }

        node_ptr pos = this->find_iterator(bucket, k);

        if (pos) {
            return node::get_value(pos);
        }
        else {
            

            
            
            node_constructor a(*this);
            a.construct_pair(k, (mapped_type*) 0);

            
            
            if(this->reserve_for_insert(this->size_ + 1))
                bucket = this->bucket_ptr_from_hash(hash_value);

            

            return node::get_value(add_node(a, bucket));
        }
    }

    template <class T>
    inline typename hash_unique_table<T>::emplace_return
    hash_unique_table<T>::emplace_impl_with_node(node_constructor& a)
    {
        
        key_type const& k = this->get_key(a.value());
        std::size_t hash_value = this->hash_function()(k);
        bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value);
        node_ptr pos = this->find_iterator(bucket, k);
        
        if (pos) {
            
            return emplace_return(iterator_base(bucket, pos), false);
        } else {
            
            
            if(this->reserve_for_insert(this->size_ + 1))
                bucket = this->bucket_ptr_from_hash(hash_value);

            

            return emplace_return(
                iterator_base(bucket, add_node(a, bucket)),
                true);
        }
    }






























































#line 307 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"























































    template <class T> template < class Arg0> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0) { node_constructor a(*this); a.construct( arg0); return emplace_impl_with_node(a); } template <class T> template < class Arg0> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0) { node_constructor a(*this); a.construct( arg0); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1) { node_constructor a(*this); a.construct( arg0 , arg1); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1) { node_constructor a(*this); a.construct( arg0 , arg1); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace_impl( key_type const& k,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { std::size_t hash_value = this->hash_function()(k); bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value); node_ptr pos = this->find_iterator(bucket, k); if (pos) { return emplace_return(iterator_base(bucket, pos), false); } else { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); if(this->reserve_for_insert(this->size_ + 1)) bucket = this->bucket_ptr_from_hash(hash_value); return emplace_return(iterator_base(bucket, add_node(a, bucket)), true); } } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_impl(no_key,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); return emplace_impl_with_node(a); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> inline typename hash_unique_table<T>::emplace_return hash_unique_table<T>:: emplace_empty_impl(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { node_constructor a(*this); a.construct( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); return emplace_return(this->emplace_empty_impl_with_node(a, 1), true); }
#line 364 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"



#line 368 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"





















#line 390 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"

    template <class T>
    template <class Arg0>
    typename hash_unique_table<T>::emplace_return
        hash_unique_table<T>::emplace(Arg0 const& arg0)
    {
        return this->size_ ?
            emplace_impl(extractor::extract(arg0), arg0) :
            emplace_empty_impl(arg0);
    }















    template <class T> template < class Arg0 , class Arg1> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1) : emplace_empty_impl(  arg0 , arg1); } template <class T> template < class Arg0 , class Arg1 , class Arg2> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2) : emplace_empty_impl(  arg0 , arg1 , arg2); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3 , arg4) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3 , arg4); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7); } template <class T> template < class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8> typename hash_unique_table<T>::emplace_return hash_unique_table<T>::emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8) { return this->size_ ? emplace_impl(extractor::extract(arg0, arg1),  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8) : emplace_empty_impl(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8); }
#line 417 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"



#line 421 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"
    
    
    

    template <class T>
    template <class InputIt>
    inline void hash_unique_table<T>::insert_range_impl2(
        node_constructor& a, key_type const& k, InputIt i, InputIt j)
    {
        
        std::size_t hash_value = this->hash_function()(k);
        bucket_ptr bucket = this->bucket_ptr_from_hash(hash_value);
        node_ptr pos = this->find_iterator(bucket, k);

        if (!pos) {
            
            

            
            
            a.construct(*i);

            
            
            if(this->size_ + 1 >= this->max_load_) {
                this->reserve_for_insert(this->size_ + insert_size(i, j));
                bucket = this->bucket_ptr_from_hash(hash_value);
            }

            
            add_node(a, bucket);
        }
    }

    template <class T>
    template <class InputIt>
    inline void hash_unique_table<T>::insert_range_impl(
        key_type const&, InputIt i, InputIt j)
    {
        node_constructor a(*this);

        if(!this->size_) {
            a.construct(*i);
            this->emplace_empty_impl_with_node(a, 1);
            ++i;
            if(i == j) return;
        }

        do {
            
            
            
            
            
            
            
            insert_range_impl2(a, extractor::extract(*i), i, j);
        } while(++i != j);
    }

    template <class T>
    template <class InputIt>
    inline void hash_unique_table<T>::insert_range_impl(
        no_key, InputIt i, InputIt j)
    {
        node_constructor a(*this);

        if(!this->size_) {
            a.construct(*i);
            this->emplace_empty_impl_with_node(a, 1);
            ++i;
            if(i == j) return;
        }

        do {
            
            a.construct(*i);
            emplace_impl_with_node(a);
        } while(++i != j);
    }

    
    
    template <class T>
    template <class InputIt>
    void hash_unique_table<T>::insert_range(InputIt i, InputIt j)
    {
        if(i != j)
            return insert_range_impl(extractor::extract(*i), i, j);
    }
}}

#line 514 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/detail/unique.hpp"
#line 21 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"



#line 25 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"



#line 29 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"


#pragma warning(push)

#pragma warning(disable:4396) 
                              
                              
#line 37 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
#line 38 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

namespace boost
{
    template <class K, class T, class H, class P, class A>
    class unordered_map
    {
    public:
        typedef K key_type;
        typedef std::pair<const K, T> value_type;
        typedef T mapped_type;
        typedef H hasher;
        typedef P key_equal;
        typedef A allocator_type;


    private:
#line 55 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        typedef typename
            boost::unordered_detail::rebind_wrap<
                allocator_type, value_type>::type
            value_allocator;

        typedef boost::unordered_detail::map<K, H, P,
            value_allocator> types;
        typedef typename types::impl table;

        typedef typename types::iterator_base iterator_base;

    public:

        typedef typename
            value_allocator::pointer pointer;
        typedef typename
            value_allocator::const_pointer const_pointer;
        typedef typename
            value_allocator::reference reference;
        typedef typename
            value_allocator::const_reference const_reference;

        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;

        typedef boost::unordered_detail::hash_const_local_iterator<
            value_allocator, boost::unordered_detail::ungrouped>
                const_local_iterator;
        typedef boost::unordered_detail::hash_local_iterator<
            value_allocator, boost::unordered_detail::ungrouped>
                local_iterator;
        typedef boost::unordered_detail::hash_const_iterator<
            value_allocator, boost::unordered_detail::ungrouped>
                const_iterator;
        typedef boost::unordered_detail::hash_iterator<
            value_allocator, boost::unordered_detail::ungrouped>
                iterator;


    private:
#line 97 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        table table_;
        
        typename types::iterator_base const&
            get(const_iterator const& it)
        {
            return boost::unordered_detail::iterator_access::get(it);
        }

    public:

        

        explicit unordered_map(
                size_type n = boost::unordered_detail::default_bucket_count,
                const hasher &hf = hasher(),
                const key_equal &eql = key_equal(),
                const allocator_type &a = allocator_type())
          : table_(n, hf, eql, a)
        {
        }

        explicit unordered_map(allocator_type const& a)
          : table_(boost::unordered_detail::default_bucket_count,
                hasher(), key_equal(), a)
        {
        }

        unordered_map(unordered_map const& other, allocator_type const& a)
          : table_(other.table_, a)
        {
        }

        template <class InputIt>
        unordered_map(InputIt f, InputIt l)
          : table_(boost::unordered_detail::initial_size(f, l),
                hasher(), key_equal(), allocator_type())
        {
            table_.insert_range(f, l);
        }

        template <class InputIt>
        unordered_map(InputIt f, InputIt l,
                size_type n,
                const hasher &hf = hasher(),
                const key_equal &eql = key_equal())
          : table_(boost::unordered_detail::initial_size(f, l, n),
                hf, eql, allocator_type())
        {
            table_.insert_range(f, l);
        }

        template <class InputIt>
        unordered_map(InputIt f, InputIt l,
                size_type n,
                const hasher &hf,
                const key_equal &eql,
                const allocator_type &a)
          : table_(boost::unordered_detail::initial_size(f, l, n), hf, eql, a)
        {
            table_.insert_range(f, l);
        }

        ~unordered_map() {}


        unordered_map(unordered_map const& other)
          : table_(other.table_)
        {
        }

        unordered_map(unordered_map&& other)
          : table_(other.table_, boost::unordered_detail::move_tag())
        {
        }

        unordered_map(unordered_map&& other, allocator_type const& a)
          : table_(other.table_, a, boost::unordered_detail::move_tag())
        {
        }

        unordered_map& operator=(unordered_map const& x)
        {
            table_ = x.table_;
            return *this;
        }

        unordered_map& operator=(unordered_map&& x)
        {
            table_.move(x.table_);
            return *this;
        }















#line 205 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"




















#line 226 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        allocator_type get_allocator() const
        {
            return table_.node_alloc();
        }

        

        bool empty() const
        {
            return table_.size_ == 0;
        }

        size_type size() const
        {
            return table_.size_;
        }

        size_type max_size() const
        {
            return table_.max_size();
        }

        

        iterator begin()
        {
            return iterator(table_.begin());
        }

        const_iterator begin() const
        {
            return const_iterator(table_.begin());
        }

        iterator end()
        {
            return iterator(table_.end());
        }

        const_iterator end() const
        {
            return const_iterator(table_.end());
        }

        const_iterator cbegin() const
        {
            return const_iterator(table_.begin());
        }

        const_iterator cend() const
        {
            return const_iterator(table_.end());
        }

        














#line 297 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        
        std::pair<iterator, bool> emplace(value_type const& v = value_type())
        {
            return boost::unordered_detail::pair_cast<iterator, bool>(
                table_.emplace(v));
        }

        iterator emplace_hint(const_iterator,
            value_type const& v = value_type())
        {
            return iterator(table_.emplace(v).first);
        }
        #line 311 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"


























        template <  class Arg0 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 )); } template <  class Arg0 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 ) { return iterator(table_.emplace(  arg0).first); } template <  class Arg0 , class Arg1 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 )); } template <  class Arg0 , class Arg1 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 ) { return iterator(table_.emplace(  arg0 , arg1).first); } template <  class Arg0 , class Arg1 , class Arg2 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 )); } template <  class Arg0 , class Arg1 , class Arg2 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7).first); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > std::pair<iterator, bool> emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { return boost::unordered_detail::pair_cast<iterator, bool>( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8).first); }
#line 339 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"



#line 343 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        std::pair<iterator, bool> insert(const value_type& obj)
        {
            return boost::unordered_detail::pair_cast<iterator, bool>(
                    table_.emplace(obj));
        }

        iterator insert(const_iterator, const value_type& obj)
        {
            return iterator(table_.emplace(obj).first);
        }

        template <class InputIt>
            void insert(InputIt first, InputIt last)
        {
            table_.insert_range(first, last);
        }






#line 367 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        iterator erase(const_iterator position)
        {
            return iterator(table_.erase_return_iterator(get(position)));
        }

        size_type erase(const key_type& k)
        {
            return table_.erase_key(k);
        }

        iterator erase(const_iterator first, const_iterator last)
        {
            return iterator(table_.erase_range(get(first), get(last)));
        }

        void quick_erase(const_iterator position)
        {
            table_.erase(get(position));
        }

        void erase_return_void(const_iterator position)
        {
            table_.erase(get(position));
        }

        void clear()
        {
            table_.clear();
        }

        void swap(unordered_map& other)
        {
            table_.swap(other.table_);
        }

        

        hasher hash_function() const
        {
            return table_.hash_function();
        }

        key_equal key_eq() const
        {
            return table_.key_eq();
        }

        mapped_type& operator[](const key_type &k)
        {
            return table_[k].second;
        }

        mapped_type& at(const key_type& k)
        {
            return table_.at(k).second;
        }

        mapped_type const& at(const key_type& k) const
        {
            return table_.at(k).second;
        }

        

        iterator find(const key_type& k)
        {
            return iterator(table_.find(k));
        }

        const_iterator find(const key_type& k) const
        {
            return const_iterator(table_.find(k));
        }

        template <class CompatibleKey, class CompatibleHash,
            class CompatiblePredicate>
        iterator find(
            CompatibleKey const& k,
            CompatibleHash const& hash,
            CompatiblePredicate const& eq)
        {
            return iterator(table_.find(k, hash, eq));
        }

        template <class CompatibleKey, class CompatibleHash,
            class CompatiblePredicate>
        const_iterator find(
            CompatibleKey const& k,
            CompatibleHash const& hash,
            CompatiblePredicate const& eq) const
        {
            return iterator(table_.find(k, hash, eq));
        }

        size_type count(const key_type& k) const
        {
            return table_.count(k);
        }

        std::pair<iterator, iterator>
            equal_range(const key_type& k)
        {
            return boost::unordered_detail::pair_cast<
                iterator, iterator>(
                    table_.equal_range(k));
        }

        std::pair<const_iterator, const_iterator>
            equal_range(const key_type& k) const
        {
            return boost::unordered_detail::pair_cast<
                const_iterator, const_iterator>(
                    table_.equal_range(k));
        }

        

        size_type bucket_count() const
        {
            return table_.bucket_count_;
        }

        size_type max_bucket_count() const
        {
            return table_.max_bucket_count();
        }

        size_type bucket_size(size_type n) const
        {
            return table_.bucket_size(n);
        }

        size_type bucket(const key_type& k) const
        {
            return table_.bucket_index(k);
        }

        local_iterator begin(size_type n)
        {
            return local_iterator(table_.bucket_begin(n));
        }

        const_local_iterator begin(size_type n) const
        {
            return const_local_iterator(table_.bucket_begin(n));
        }

        local_iterator end(size_type)
        {
            return local_iterator();
        }

        const_local_iterator end(size_type) const
        {
            return const_local_iterator();
        }

        const_local_iterator cbegin(size_type n) const
        {
            return const_local_iterator(table_.bucket_begin(n));
        }

        const_local_iterator cend(size_type) const
        {
            return const_local_iterator();
        }

        

        float load_factor() const
        {
            return table_.load_factor();
        }

        float max_load_factor() const
        {
            return table_.mlf_;
        }

        void max_load_factor(float m)
        {
            table_.max_load_factor(m);
        }

        void rehash(size_type n)
        {
            table_.rehash(n);
        }
        

        friend bool operator==<K, T, H, P, A>(
            unordered_map const&, unordered_map const&);
        friend bool operator!=<K, T, H, P, A>(
            unordered_map const&, unordered_map const&);
#line 563 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
    }; 

    template <class K, class T, class H, class P, class A>
    inline bool operator==(unordered_map<K, T, H, P, A> const& m1,
        unordered_map<K, T, H, P, A> const& m2)
    {


#line 572 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        return m1.table_.equals(m2.table_);
    }

    template <class K, class T, class H, class P, class A>
    inline bool operator!=(unordered_map<K, T, H, P, A> const& m1,
        unordered_map<K, T, H, P, A> const& m2)
    {


#line 582 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        return !m1.table_.equals(m2.table_);
    }

    template <class K, class T, class H, class P, class A>
    inline void swap(unordered_map<K, T, H, P, A> &m1,
            unordered_map<K, T, H, P, A> &m2)
    {


#line 592 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        m1.swap(m2);
    }

    template <class K, class T, class H, class P, class A>
    class unordered_multimap
    {
    public:

        typedef K key_type;
        typedef std::pair<const K, T> value_type;
        typedef T mapped_type;
        typedef H hasher;
        typedef P key_equal;
        typedef A allocator_type;


    private:
#line 610 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        typedef typename
            boost::unordered_detail::rebind_wrap<
                allocator_type, value_type>::type
            value_allocator;

        typedef boost::unordered_detail::multimap<K, H, P,
            value_allocator> types;
        typedef typename types::impl table;

        typedef typename types::iterator_base iterator_base;

    public:

        typedef typename
            value_allocator::pointer pointer;
        typedef typename
            value_allocator::const_pointer const_pointer;
        typedef typename
            value_allocator::reference reference;
        typedef typename
            value_allocator::const_reference const_reference;

        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;

        typedef boost::unordered_detail::hash_const_local_iterator<
            value_allocator, boost::unordered_detail::grouped>
                const_local_iterator;
        typedef boost::unordered_detail::hash_local_iterator<
            value_allocator, boost::unordered_detail::grouped>
                local_iterator;
        typedef boost::unordered_detail::hash_const_iterator<
            value_allocator, boost::unordered_detail::grouped>
                const_iterator;
        typedef boost::unordered_detail::hash_iterator<
            value_allocator, boost::unordered_detail::grouped>
                iterator;


    private:
#line 652 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        table table_;
        
        typename types::iterator_base const&
            get(const_iterator const& it)
        {
            return boost::unordered_detail::iterator_access::get(it);
        }

    public:

        

        explicit unordered_multimap(
                size_type n = boost::unordered_detail::default_bucket_count,
                const hasher &hf = hasher(),
                const key_equal &eql = key_equal(),
                const allocator_type &a = allocator_type())
          : table_(n, hf, eql, a)
        {
        }

        explicit unordered_multimap(allocator_type const& a)
          : table_(boost::unordered_detail::default_bucket_count,
                hasher(), key_equal(), a)
        {
        }

        unordered_multimap(unordered_multimap const& other,
            allocator_type const& a)
          : table_(other.table_, a)
        {
        }

        template <class InputIt>
        unordered_multimap(InputIt f, InputIt l)
          : table_(boost::unordered_detail::initial_size(f, l),
                hasher(), key_equal(), allocator_type())
        {
            table_.insert_range(f, l);
        }

        template <class InputIt>
        unordered_multimap(InputIt f, InputIt l,
                size_type n,
                const hasher &hf = hasher(),
                const key_equal &eql = key_equal())
          : table_(boost::unordered_detail::initial_size(f, l, n),
                hf, eql, allocator_type())
        {
            table_.insert_range(f, l);
        }

        template <class InputIt>
        unordered_multimap(InputIt f, InputIt l,
                size_type n,
                const hasher &hf,
                const key_equal &eql,
                const allocator_type &a)
          : table_(boost::unordered_detail::initial_size(f, l, n), hf, eql, a)
        {
            table_.insert_range(f, l);
        }

        ~unordered_multimap() {}


        unordered_multimap(unordered_multimap const& other)
          : table_(other.table_)
        {
        }

        unordered_multimap(unordered_multimap&& other)
          : table_(other.table_, boost::unordered_detail::move_tag())
        {
        }

        unordered_multimap(unordered_multimap&& other, allocator_type const& a)
          : table_(other.table_, a, boost::unordered_detail::move_tag())
        {
        }

        unordered_multimap& operator=(unordered_multimap const& x)
        {
            table_ = x.table_;
            return *this;
        }

        unordered_multimap& operator=(unordered_multimap&& x)
        {
            table_.move(x.table_);
            return *this;
        }















#line 761 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"




















#line 782 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        allocator_type get_allocator() const
        {
            return table_.node_alloc();
        }

        

        bool empty() const
        {
            return table_.size_ == 0;
        }

        size_type size() const
        {
            return table_.size_;
        }

        size_type max_size() const
        {
            return table_.max_size();
        }

        

        iterator begin()
        {
            return iterator(table_.begin());
        }

        const_iterator begin() const
        {
            return const_iterator(table_.begin());
        }

        iterator end()
        {
            return iterator(table_.end());
        }

        const_iterator end() const
        {
            return const_iterator(table_.end());
        }

        const_iterator cbegin() const
        {
            return const_iterator(table_.begin());
        }

        const_iterator cend() const
        {
            return const_iterator(table_.end());
        }

        













#line 852 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        
        iterator emplace(value_type const& v = value_type())
        {
            return iterator(table_.emplace(v));
        }
        
        iterator emplace_hint(const_iterator,
            value_type const& v = value_type())
        {
            return iterator(table_.emplace(v));
        }
        #line 865 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"



























        template <  class Arg0 > iterator emplace(  Arg0 const& arg0 ) { return iterator( table_.emplace(  arg0 )); } template <  class Arg0 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 ) { return iterator(table_.emplace(  arg0 )); } template <  class Arg0 , class Arg1 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 ) { return iterator( table_.emplace(  arg0 , arg1 )); } template <  class Arg0 , class Arg1 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 ) { return iterator(table_.emplace(  arg0 , arg1 )); } template <  class Arg0 , class Arg1 , class Arg2 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 )); } template <  class Arg0 , class Arg1 , class Arg2 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > iterator emplace(  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { return iterator( table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 )); } template <  class Arg0 , class Arg1 , class Arg2 , class Arg3 , class Arg4 , class Arg5 , class Arg6 , class Arg7 , class Arg8 > iterator emplace_hint(const_iterator,  Arg0 const& arg0 , Arg1 const& arg1 , Arg2 const& arg2 , Arg3 const& arg3 , Arg4 const& arg4 , Arg5 const& arg5 , Arg6 const& arg6 , Arg7 const& arg7 , Arg8 const& arg8 ) { return iterator(table_.emplace(  arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 )); }
#line 894 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"



#line 898 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        iterator insert(const value_type& obj)
        {
            return iterator(table_.emplace(obj));
        }

        iterator insert(const_iterator, const value_type& obj)
        {
            return iterator(table_.emplace(obj));
        }

        template <class InputIt>
            void insert(InputIt first, InputIt last)
        {
            table_.insert_range(first, last);
        }






#line 921 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

        iterator erase(const_iterator position)
        {
            return iterator(table_.erase_return_iterator(get(position)));
        }

        size_type erase(const key_type& k)
        {
            return table_.erase_key(k);
        }

        iterator erase(const_iterator first, const_iterator last)
        {
            return iterator(table_.erase_range(get(first), get(last)));
        }

        void quick_erase(const_iterator position)
        {
            table_.erase(get(position));
        }

        void erase_return_void(const_iterator position)
        {
            table_.erase(get(position));
        }

        void clear()
        {
            table_.clear();
        }

        void swap(unordered_multimap& other)
        {
            table_.swap(other.table_);
        }

        

        hasher hash_function() const
        {
            return table_.hash_function();
        }

        key_equal key_eq() const
        {
            return table_.key_eq();
        }

        

        iterator find(const key_type& k)
        {
            return iterator(table_.find(k));
        }

        const_iterator find(const key_type& k) const
        {
            return const_iterator(table_.find(k));
        }

        template <class CompatibleKey, class CompatibleHash,
            class CompatiblePredicate>
        iterator find(
            CompatibleKey const& k,
            CompatibleHash const& hash,
            CompatiblePredicate const& eq)
        {
            return iterator(table_.find(k, hash, eq));
        }

        template <class CompatibleKey, class CompatibleHash,
            class CompatiblePredicate>
        const_iterator find(
            CompatibleKey const& k,
            CompatibleHash const& hash,
            CompatiblePredicate const& eq) const
        {
            return iterator(table_.find(k, hash, eq));
        }

        size_type count(const key_type& k) const
        {
            return table_.count(k);
        }

        std::pair<iterator, iterator>
            equal_range(const key_type& k)
        {
            return boost::unordered_detail::pair_cast<
                iterator, iterator>(
                    table_.equal_range(k));
        }

        std::pair<const_iterator, const_iterator>
            equal_range(const key_type& k) const
        {
            return boost::unordered_detail::pair_cast<
                const_iterator, const_iterator>(
                    table_.equal_range(k));
        }

        

        size_type bucket_count() const
        {
            return table_.bucket_count_;
        }

        size_type max_bucket_count() const
        {
            return table_.max_bucket_count();
        }

        size_type bucket_size(size_type n) const
        {
            return table_.bucket_size(n);
        }

        size_type bucket(const key_type& k) const
        {
            return table_.bucket_index(k);
        }

        local_iterator begin(size_type n)
        {
            return local_iterator(table_.bucket_begin(n));
        }

        const_local_iterator begin(size_type n) const
        {
            return const_local_iterator(table_.bucket_begin(n));
        }

        local_iterator end(size_type)
        {
            return local_iterator();
        }

        const_local_iterator end(size_type) const
        {
            return const_local_iterator();
        }

        const_local_iterator cbegin(size_type n) const
        {
            return const_local_iterator(table_.bucket_begin(n));
        }

        const_local_iterator cend(size_type) const
        {
            return const_local_iterator();
        }

        

        float load_factor() const
        {
            return table_.load_factor();
        }

        float max_load_factor() const
        {
            return table_.mlf_;
        }

        void max_load_factor(float m)
        {
            table_.max_load_factor(m);
        }

        void rehash(size_type n)
        {
            table_.rehash(n);
        }


        friend bool operator==<K, T, H, P, A>(
            unordered_multimap const&, unordered_multimap const&);
        friend bool operator!=<K, T, H, P, A>(
            unordered_multimap const&, unordered_multimap const&);
#line 1102 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
    }; 

    template <class K, class T, class H, class P, class A>
    inline bool operator==(unordered_multimap<K, T, H, P, A> const& m1,
        unordered_multimap<K, T, H, P, A> const& m2)
    {


#line 1111 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        return m1.table_.equals(m2.table_);
    }

    template <class K, class T, class H, class P, class A>
    inline bool operator!=(unordered_multimap<K, T, H, P, A> const& m1,
        unordered_multimap<K, T, H, P, A> const& m2)
    {


#line 1121 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        return !m1.table_.equals(m2.table_);
    }

    template <class K, class T, class H, class P, class A>
    inline void swap(unordered_multimap<K, T, H, P, A> &m1,
            unordered_multimap<K, T, H, P, A> &m2)
    {


#line 1131 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"
        m1.swap(m2);
    }

} 


#pragma warning(pop)
#line 1139 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

#line 1141 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered/unordered_map.hpp"

#line 17 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered_map.hpp"

#line 19 "C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\boost/unordered_map.hpp"
#line 13 "Y:\\mocha\\src\\mocha/roaster/lib/unordered_map.h"
namespace mocha {
namespace roastlib {
using boost::unordered_map;
}
}

#line 20 "Y:\\mocha\\src\\mocha/roaster/lib/unordered_map.h"
#line 21 "Y:\\mocha\\src\\mocha/roaster/lib/unordered_map.h"
#line 4 "Y:\\mocha\\src\\mocha/roaster/runtime/runtime.h"
#line 1 "Y:\\mocha\\src\\mocha/roaster/misc/class_traits/static.h"






namespace mocha {

  class Static{
    inline Static (){};
    inline Static (const Static&){};
    inline void operator = (const Static&){};
    inline void operator delete [] (void*) {};
  };
  
}

#line 19 "Y:\\mocha\\src\\mocha/roaster/misc/class_traits/static.h"

#line 5 "Y:\\mocha\\src\\mocha/roaster/runtime/runtime.h"
namespace mocha {
namespace runtime {
class Runtime : private Static {
  typedef std::pair<std::string,const char*> RuntimePair;
 public :
  typedef roastlib::unordered_map<std::string,const char*> RuntimeMap;
  static void BuildSource();
  static inline const RuntimeMap& runtime_map() { return map_; }
 private :
  static RuntimeMap map_;
};
}
}

#line 20 "Y:\\mocha\\src\\mocha/roaster/runtime/runtime.h"
#line 2 "..\\..\\..\\src\\mocha\\roaster\\runtime\\runtime.cc"
namespace mocha{
namespace runtime{
const char runtime[] = {47,42,42,13,10,32,42,64,97,117,116,104,111,114,32,84,97,107,101,116,111,115,104,105,32,65,111,110,111,13,10,32,42,64,102,105,108,101,79,118,101,114,118,105,101,119,13,10,32,42,64,108,105,99,101,110,115,101,13,10,32,42,67,111,112,121,114,105,103,104,116,32,40,99,41,32,50,48,49,49,32,84,97,107,101,116,111,115,104,105,32,65,111,110,111,13,10,32,42,76,105,99,101,110,115,101,100,32,117,110,100,101,114,32,116,104,101,32,66,83,68,46,13,10,32,42,13,10,32,42,80,101,114,109,105,115,115,105,111,110,32,105,115,32,104,101,114,101,98,121,32,103,114,97,110,116,101,100,44,32,102,114,101,101,32,111,102,32,99,104,97,114,103,101,44,32,116,111,32,97,110,121,32,112,101,114,115,111,110,32,111,98,116,97,105,110,105,110,103,32,97,32,99,111,112,121,32,111,102,32,116,104,105,115,32,115,111,102,116,119,97,114,101,32,97,110,100,13,10,32,42,97,115,115,111,99,105,97,116,101,100,32,100,111,99,32,117,109,101,110,116,97,116,105,111,110,32,102,105,108,101,115,32,40,116,104,101,32,34,83,111,102,116,119,97,114,101,34,41,44,32,116,111,32,100,101,97,108,32,105,110,32,116,104,101,32,83,111,102,116,119,97,114,101,32,119,105,116,104,111,117,116,32,114,101,115,116,114,105,99,116,105,111,110,44,13,10,32,42,105,110,99,108,117,100,105,110,103,32,119,105,116,104,111,117,116,32,108,105,109,105,116,97,116,105,111,110,32,116,104,101,32,114,105,103,104,116,115,32,116,111,32,117,115,101,44,32,99,111,112,121,44,32,109,111,100,105,102,121,44,32,109,101,114,103,101,44,32,112,117,98,108,105,115,104,44,32,100,105,115,116,114,105,98,117,116,101,44,32,115,117,98,108,105,99,101,110,115,101,44,13,10,32,42,97,110,100,47,111,114,32,115,101,108,108,32,99,111,112,105,101,115,32,111,102,32,116,104,101,32,83,111,102,116,119,97,114,101,44,32,97,110,100,32,116,111,32,112,101,114,109,105,116,32,112,101,114,115,111,110,115,32,116,111,32,119,104,111,109,32,116,104,101,32,83,111,102,116,119,97,114,101,32,105,115,32,102,117,114,110,105,115,104,101,100,32,116,111,32,100,111,32,115,111,44,13,10,32,42,115,117,98,106,101,99,116,32,116,111,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,99,111,110,100,105,116,105,111,110,115,58,13,10,32,42,13,10,32,42,84,104,101,32,97,98,111,118,101,32,99,111,112,121,114,105,103,104,116,32,110,111,116,105,99,101,32,97,110,100,32,116,104,105,115,32,112,101,114,109,105,115,115,105,111,110,32,110,111,116,105,99,101,32,115,104,97,108,108,32,98,101,32,105,110,99,108,117,100,101,100,32,105,110,32,97,108,108,32,99,111,112,105,101,115,32,111,114,13,10,32,42,115,117,98,115,116,97,110,116,105,97,108,32,112,111,114,116,105,111,110,115,32,111,102,116,104,101,32,83,111,102,116,119,97,114,101,46,13,10,32,42,13,10,32,42,84,72,69,32,83,79,70,84,87,65,82,69,32,73,83,32,80,82,79,86,73,68,69,68,32,34,65,83,32,73,83,34,44,32,87,73,84,72,79,85,84,32,87,65,82,82,65,78,84,89,32,79,70,32,65,78,89,32,75,73,78,68,44,32,69,88,80,82,69,83,83,32,79,82,32,73,77,80,76,73,69,68,44,32,73,78,67,76,85,68,73,78,71,32,66,85,84,32,78,79,84,32,76,73,77,73,84,69,68,13,10,32,42,84,79,32,84,72,69,32,87,65,82,82,65,78,84,73,69,83,32,79,70,32,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,44,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,32,65,78,68,32,78,79,78,73,78,70,82,73,78,71,69,77,69,78,84,46,32,73,78,32,78,79,32,69,86,69,78,84,32,83,72,65,76,76,13,10,32,42,84,72,69,32,65,85,84,72,79,82,83,32,79,82,32,67,79,80,89,82,73,71,72,84,32,72,79,76,68,69,82,83,32,66,69,32,76,73,65,66,76,69,32,70,79,82,32,65,78,89,32,67,76,65,73,77,44,32,68,65,77,65,71,69,83,32,79,82,32,79,84,72,69,82,32,76,73,65,66,73,76,73,84,89,44,32,87,72,69,84,72,69,82,32,73,78,32,65,78,32,65,67,84,73,79,78,32,79,70,13,10,32,42,67,79,78,84,82,65,67,84,44,32,84,79,82,84,32,79,82,32,79,84,72,69,82,87,73,83,69,44,32,65,82,73,83,73,78,71,32,70,82,79,77,44,32,79,85,84,32,79,70,32,79,82,32,73,78,32,67,79,78,78,69,67,84,73,79,78,32,87,73,84,72,32,84,72,69,32,83,79,70,84,87,65,82,69,32,79,82,32,84,72,69,32,85,83,69,32,79,82,32,79,84,72,69,82,13,10,32,42,68,69,65,76,73,78,71,83,32,73,78,32,84,72,69,32,83,79,70,84,87,65,82,69,46,13,10,32,42,47,13,10,13,10,47,47,71,108,111,98,97,108,32,109,111,100,117,108,101,32,99,111,110,116,97,105,110,101,114,46,13,10,118,97,114,32,95,109,111,99,104,97,71,108,111,98,97,108,69,120,112,111,114,116,32,61,32,123,125,59,13,10,13,10,47,47,101,99,109,97,50,54,50,32,53,116,104,32,101,100,105,116,105,111,110,32,99,111,109,112,97,116,105,98,108,101,32,98,117,105,116,105,110,32,101,120,116,101,110,115,105,111,110,115,44,13,10,47,47,97,110,100,32,115,111,109,101,32,101,120,116,114,97,115,32,102,114,111,109,32,98,111,116,104,32,115,116,114,97,119,109,97,110,32,97,110,100,32,104,97,114,109,111,110,121,46,13,10,108,101,116,32,40,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,115,116,114,105,110,103,80,114,111,116,111,32,125,32,61,32,83,116,114,105,110,103,44,13,10,32,32,32,32,32,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,97,114,114,97,121,80,114,111,116,111,32,125,32,61,32,65,114,114,97,121,44,13,10,32,32,32,32,32,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,102,117,110,99,116,105,111,110,80,114,111,116,111,32,125,32,61,32,70,117,110,99,116,105,111,110,44,13,10,32,32,32,32,32,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,100,97,116,101,80,114,111,116,111,32,125,32,61,32,68,97,116,101,32,41,13,10,123,13,10,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,109,101,115,115,97,103,101,32,41,32,45,62,32,123,13,10,32,32,32,32,116,114,121,32,123,13,10,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,84,121,112,101,69,114,114,111,114,40,32,109,101,115,115,97,103,101,32,41,59,13,10,32,32,32,32,125,32,99,97,116,99,104,32,40,32,101,32,41,32,123,13,10,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,32,69,114,114,111,114,40,32,101,32,41,59,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,116,121,112,101,32,41,32,45,62,32,123,13,10,32,32,32,32,64,97,115,115,101,114,116,40,32,116,114,117,101,32,44,32,116,121,112,101,111,102,32,116,121,112,101,32,61,61,61,32,34,115,116,114,105,110,103,34,32,41,59,13,10,32,32,32,32,105,102,32,40,32,116,121,112,101,111,102,32,99,97,108,108,98,97,99,107,32,33,61,61,32,34,102,117,110,99,116,105,111,110,34,32,41,32,123,13,10,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,116,121,112,101,32,43,32,34,32,58,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,99,97,108,108,97,98,108,101,34,32,41,59,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,111,98,106,32,44,32,110,97,109,101,32,44,32,118,97,108,117,101,32,41,32,45,62,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,32,111,98,106,32,44,32,110,97,109,101,32,44,32,123,13,10,32,32,32,32,118,97,108,117,101,32,58,32,118,97,108,117,101,44,13,10,32,32,32,32,99,111,110,102,105,103,117,114,97,98,108,101,32,58,32,116,114,117,101,44,13,10,32,32,32,32,101,110,117,109,101,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,119,114,105,116,97,98,108,101,32,58,32,116,114,117,101,13,10,32,32,125,41,13,10,13,10,32,32,105,102,32,40,32,33,79,98,106,101,99,116,46,107,101,121,115,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,97,110,32,97,114,114,97,121,32,111,102,32,97,108,108,32,111,119,110,32,101,110,117,109,101,114,97,98,108,101,32,112,114,111,112,101,114,116,105,101,115,32,102,111,117,110,100,32,117,112,111,110,32,97,32,103,105,118,101,110,32,111,98,106,101,99,116,44,13,10,32,32,32,32,32,42,32,105,110,32,116,104,101,32,115,97,109,101,32,111,114,100,101,114,32,97,115,32,116,104,97,116,32,112,114,111,118,105,100,101,100,32,98,121,32,97,32,102,111,114,45,105,110,32,108,111,111,112,13,10,32,32,32,32,32,42,32,40,116,104,101,32,100,105,102,102,101,114,101,110,99,101,32,98,101,105,110,103,32,116,104,97,116,32,97,32,102,111,114,45,105,110,32,108,111,111,112,32,101,110,117,109,101,114,97,116,101,115,32,112,114,111,112,101,114,116,105,101,115,32,105,110,32,116,104,101,32,112,114,111,116,111,116,121,112,101,32,99,104,97,105,110,32,97,115,32,119,101,108,108,41,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,111,98,106,13,10,32,32,32,32,32,42,32,64,114,101,116,117,114,110,32,123,65,114,114,97,121,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,79,98,106,101,99,116,46,107,101,121,115,32,61,32,40,32,111,98,106,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,33,111,98,106,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,79,98,106,101,99,116,46,107,101,121,115,32,58,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,46,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,118,97,114,32,114,101,116,32,61,32,91,93,44,13,10,32,32,32,32,32,32,32,32,32,32,105,116,101,114,32,61,32,45,49,59,13,10,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,111,98,106,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,111,98,106,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,32,40,32,105,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,91,32,43,43,105,116,101,114,32,93,32,61,32,111,98,106,32,91,32,105,32,93,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,79,98,106,101,99,116,46,112,114,101,118,101,110,116,69,120,116,101,110,115,105,111,110,115,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,68,85,77,77,89,32,70,85,78,67,84,73,79,78,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,79,98,106,101,99,116,46,112,114,101,118,101,110,116,69,120,116,101,110,115,105,111,110,115,32,61,32,40,32,111,32,41,32,45,62,32,111,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,79,98,106,101,99,116,46,115,101,97,108,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,68,85,77,77,89,32,70,85,78,67,84,73,79,78,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,79,98,106,101,99,116,46,115,101,97,108,32,61,32,40,32,111,32,41,32,45,62,32,111,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,79,98,106,101,99,116,46,102,114,101,101,122,101,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,68,85,77,77,89,32,70,85,78,67,84,73,79,78,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,79,98,106,101,99,116,46,102,114,101,101,122,101,32,61,32,40,32,111,32,41,32,45,62,32,111,59,13,10,32,32,125,13,10,13,10,32,32,47,47,67,104,101,99,107,32,116,104,97,116,32,103,105,118,101,110,32,101,110,118,105,111,114,109,101,110,116,32,104,97,115,32,114,101,97,108,32,101,99,109,97,50,54,50,32,53,116,104,32,101,100,105,116,105,111,110,46,13,10,32,32,47,47,105,46,101,46,32,73,110,116,101,114,110,101,116,32,69,120,112,108,111,114,101,114,32,56,32,104,97,115,32,79,98,106,101,99,116,46,100,101,102,105,110,101,100,80,114,111,112,101,114,116,121,44,13,10,32,32,47,47,98,117,116,32,116,104,97,116,32,99,111,117,108,100,110,39,116,32,97,112,112,108,121,32,116,111,32,116,104,101,32,106,97,118,97,115,99,114,105,112,116,32,111,98,106,101,99,116,46,13,10,32,32,47,47,84,111,32,100,105,115,116,105,110,103,117,105,115,104,32,116,104,101,32,100,101,116,97,105,108,32,105,109,112,108,101,109,101,110,116,105,111,110,44,13,10,32,32,47,47,119,101,32,116,114,121,32,116,101,115,116,32,114,117,110,46,13,10,32,32,118,97,114,32,104,97,115,82,101,97,108,69,99,109,97,53,32,61,32,100,111,32,123,13,10,32,32,32,32,32,32,32,32,118,97,114,32,114,101,116,59,13,10,32,32,32,32,32,32,32,32,116,114,121,32,123,13,10,32,32,32,32,32,32,32,32,32,32,118,97,114,32,111,98,106,32,61,32,123,125,13,10,32,32,32,32,32,32,32,32,32,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,32,111,98,106,32,44,32,34,116,101,115,116,34,32,44,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,102,105,103,117,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,119,114,105,116,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,117,109,101,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,32,58,32,48,13,10,32,32,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,32,32,111,98,106,46,116,101,115,116,32,61,32,50,48,48,59,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,40,32,111,98,106,46,116,101,115,116,32,61,61,61,32,50,48,48,32,41,63,32,102,97,108,115,101,32,58,32,116,114,117,101,59,13,10,32,32,32,32,32,32,32,32,125,32,99,97,116,99,104,32,40,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,102,97,108,115,101,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,114,101,116,59,13,10,32,32,32,32,32,32,125,59,13,10,13,10,32,32,105,102,32,40,32,33,104,97,115,82,101,97,108,69,99,109,97,53,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,84,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,105,115,32,110,111,116,32,99,111,109,112,97,116,32,101,99,109,97,53,116,104,32,100,105,116,105,111,110,44,13,10,32,32,32,32,32,42,32,97,110,100,32,111,110,108,121,32,115,101,116,32,112,114,111,112,101,114,116,121,32,116,111,32,111,98,106,101,99,116,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,111,98,106,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,83,116,114,105,110,103,125,32,112,114,111,112,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,118,97,108,111,98,106,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,32,61,32,40,32,111,98,106,32,44,32,112,114,111,112,32,44,32,118,97,108,111,98,106,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,34,118,97,108,117,101,34,32,105,110,32,118,97,108,111,98,106,32,41,32,123,13,10,32,32,32,32,32,32,32,32,111,98,106,91,32,112,114,111,112,32,93,32,61,32,118,97,108,111,98,106,46,118,97,108,117,101,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,116,114,105,109,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,83,116,114,105,110,103,47,84,114,105,109,93,13,10,32,32,32,32,32,42,32,82,101,109,111,118,101,115,32,119,104,105,116,101,115,112,97,99,101,32,102,114,111,109,32,98,111,116,104,32,101,110,100,115,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46,13,10,32,32,32,32,32,42,32,64,114,101,116,117,114,110,32,123,83,116,114,105,110,103,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,115,116,114,105,110,103,80,114,111,116,111,46,116,114,105,109,32,61,32,45,62,32,116,104,105,115,46,114,101,112,108,97,99,101,40,32,115,116,114,105,110,103,80,114,111,116,111,46,116,114,105,109,46,114,116,114,105,109,32,44,32,34,34,32,41,59,13,10,32,32,32,32,47,47,84,111,32,97,118,111,105,100,32,99,108,111,115,117,114,101,44,32,119,101,32,115,101,116,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,32,102,117,110,99,116,105,111,110,39,115,32,112,114,111,112,101,114,116,121,46,13,10,32,32,32,32,115,116,114,105,110,103,80,114,111,116,111,46,116,114,105,109,46,114,116,114,105,109,32,61,32,47,94,92,115,42,124,92,115,42,36,47,103,59,13,10,32,32,125,13,10,13,10,32,32,47,47,72,97,114,109,111,110,121,32,101,120,116,114,97,115,32,40,32,102,114,111,109,32,115,116,114,97,119,109,97,110,32,41,32,98,101,103,105,110,13,10,32,32,105,102,32,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,114,101,112,101,97,116,32,41,32,123,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,115,116,114,105,110,103,80,114,111,116,111,32,44,32,34,114,101,112,101,97,116,34,32,44,32,40,32,110,117,109,32,41,32,45,62,32,65,114,114,97,121,40,32,110,117,109,32,43,32,49,32,41,46,106,111,105,110,40,32,116,104,105,115,46,116,111,83,116,114,105,110,103,40,41,32,41,32,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,115,116,97,114,116,115,87,105,116,104,32,41,32,123,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,115,116,114,105,110,103,80,114,111,116,111,32,44,32,34,115,116,97,114,116,115,87,105,116,104,34,32,44,32,40,32,115,116,114,32,41,32,45,62,32,33,116,104,105,115,46,105,110,100,101,120,79,102,40,32,115,116,114,32,41,32,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,101,110,100,115,87,105,116,104,32,41,32,123,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,115,116,114,105,110,103,80,114,111,116,111,32,44,32,34,101,110,100,115,87,105,116,104,34,32,44,32,40,32,115,116,114,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,116,32,61,32,83,116,114,105,110,103,40,32,115,116,114,32,41,44,13,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,32,61,32,116,104,105,115,46,108,97,115,116,73,110,100,101,120,79,102,40,32,116,32,41,59,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,105,110,100,101,120,32,62,61,32,48,32,38,38,32,105,110,100,101,120,32,61,61,61,32,116,104,105,115,46,108,101,110,103,116,104,32,45,32,116,46,108,101,110,103,116,104,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,99,111,110,116,97,105,110,115,32,41,32,123,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,115,116,114,105,110,103,80,114,111,116,111,32,44,32,34,99,111,110,116,97,105,110,115,34,32,44,40,32,115,116,114,32,41,32,45,62,32,116,104,105,115,46,105,110,100,101,120,79,102,40,32,115,116,114,32,41,32,33,61,61,32,45,49,32,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,115,116,114,105,110,103,80,114,111,116,111,46,116,111,65,114,114,97,121,32,41,32,123,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,115,116,114,105,110,103,80,114,111,116,111,32,44,32,34,116,111,65,114,114,97,121,34,32,44,32,40,32,115,116,114,32,41,32,45,62,32,116,104,105,115,46,115,112,108,105,116,40,34,34,41,32,41,59,13,10,32,32,125,13,10,32,32,47,47,72,97,114,109,111,110,121,32,101,120,116,114,97,115,32,101,110,100,46,13,10,13,10,13,10,32,32,105,102,40,32,33,102,117,110,99,116,105,111,110,80,114,111,116,111,46,98,105,110,100,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,70,117,110,99,116,105,111,110,47,66,105,110,100,93,13,10,32,32,32,32,32,42,32,67,114,101,97,116,101,115,32,97,32,110,101,119,32,102,117,110,99,116,105,111,110,32,116,104,97,116,44,32,119,104,101,110,32,99,97,108,108,101,100,44,13,10,32,32,32,32,32,42,32,105,116,115,101,108,102,32,99,97,108,108,115,32,116,104,105,115,32,102,117,110,99,116,105,111,110,32,105,110,32,116,104,101,32,99,111,110,116,101,120,116,32,111,102,32,116,104,101,32,112,114,111,118,105,100,101,100,32,116,104,105,115,32,118,97,108,117,101,44,13,10,32,32,32,32,32,42,32,119,105,116,104,32,97,32,103,105,118,101,110,32,115,101,113,117,101,110,99,101,32,111,102,32,97,114,103,117,109,101,110,116,115,32,112,114,101,99,101,100,105,110,103,32,97,110,121,32,112,114,111,118,105,100,101,100,32,119,104,101,110,32,116,104,101,32,110,101,119,32,102,117,110,99,116,105,111,110,32,119,97,115,32,99,97,108,108,101,100,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,44,32,110,117,108,108,97,98,108,101,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,46,46,46,97,114,103,115,125,32,45,62,32,98,105,110,100,105,110,103,32,97,114,103,117,109,101,110,116,115,32,108,105,115,116,46,13,10,32,32,32,32,32,42,32,64,114,101,116,117,114,110,32,123,70,117,110,99,116,105,111,110,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,102,117,110,99,116,105,111,110,80,114,111,116,111,32,44,32,34,98,105,110,100,34,32,44,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,97,114,103,65,114,114,97,121,32,61,32,97,114,114,97,121,80,114,111,116,111,46,115,108,105,99,101,46,99,97,108,108,32,40,32,97,114,103,117,109,101,110,116,115,32,41,44,13,10,32,32,32,32,32,32,32,32,32,32,99,111,110,116,101,120,116,32,61,32,97,114,103,65,114,114,97,121,46,115,104,105,102,116,32,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,45,62,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,114,32,97,114,103,115,32,61,32,97,114,103,65,114,114,97,121,46,99,111,110,99,97,116,32,40,32,97,114,114,97,121,80,114,111,116,111,46,115,108,105,99,101,46,99,97,108,108,32,40,32,97,114,103,117,109,101,110,116,115,32,41,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,33,61,61,32,110,117,108,108,32,38,38,32,116,104,105,115,32,33,61,61,32,119,105,110,100,111,119,32,38,38,32,116,104,105,115,32,105,110,115,116,97,110,99,101,111,102,32,114,101,116,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,46,99,111,110,116,101,120,116,46,97,112,112,108,121,32,40,32,116,104,105,115,32,44,32,97,114,103,115,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,46,99,111,110,116,101,120,116,46,97,112,112,108,121,40,32,99,111,110,116,101,120,116,32,44,32,97,114,103,115,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,47,47,65,118,111,105,100,32,99,108,111,115,117,114,101,46,13,10,32,32,32,32,32,32,114,101,116,46,112,114,111,116,111,116,121,112,101,32,61,32,116,104,105,115,46,112,114,111,116,111,116,121,112,101,59,13,10,32,32,32,32,32,32,114,101,116,46,99,111,110,116,101,120,116,32,61,32,116,104,105,115,59,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,102,111,114,69,97,99,104,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,70,111,114,69,97,99,104,93,13,10,32,32,32,32,32,42,32,69,120,101,99,117,116,101,115,32,97,32,112,114,111,118,105,100,101,100,32,102,117,110,99,116,105,111,110,32,111,110,99,101,32,112,101,114,32,97,114,114,97,121,32,101,108,101,109,101,110,116,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,99,117,114,114,101,110,116,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,13,10,32,32,32,32,32,42,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115,46,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,109,97,112,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,104,97,116,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,102,111,114,69,97,99,104,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,116,104,97,116,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,102,111,114,69,97,99,104,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,105,116,101,114,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,102,111,114,69,97,99,104,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,105,102,40,32,116,104,97,116,32,41,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,99,97,108,108,98,97,99,107,46,99,97,108,108,40,32,116,104,97,116,32,44,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,101,108,115,101,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,99,97,108,108,98,97,99,107,40,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,101,118,101,114,121,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,101,118,101,114,121,93,13,10,32,32,32,32,32,42,32,84,101,115,116,115,32,119,104,101,116,104,101,114,32,97,108,108,32,101,108,101,109,101,110,116,115,32,105,110,32,116,104,101,32,97,114,114,97,121,32,112,97,115,115,32,116,104,101,32,116,101,115,116,32,105,109,112,108,101,109,101,110,116,101,100,32,98,121,32,116,104,101,32,112,114,111,118,105,100,101,100,32,102,117,110,99,116,105,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,99,117,114,114,101,110,116,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115,46,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,109,97,112,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,104,97,116,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,101,118,101,114,121,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,116,104,97,116,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,101,118,101,114,121,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,105,116,101,114,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,101,118,101,114,121,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,105,102,40,32,116,104,97,116,32,41,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,33,32,40,32,99,97,108,108,98,97,99,107,46,99,97,108,108,40,32,116,104,97,116,32,44,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,101,108,115,101,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,33,40,32,99,97,108,108,98,97,99,107,40,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,117,101,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,115,111,109,101,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,83,111,109,101,93,13,10,32,32,32,32,32,42,32,84,101,115,116,115,32,119,104,101,116,104,101,114,32,115,111,109,101,32,101,108,101,109,101,110,116,32,105,110,32,116,104,101,32,97,114,114,97,121,32,112,97,115,115,101,115,32,116,104,101,32,116,101,115,116,32,105,109,112,108,101,109,101,110,116,101,100,32,98,121,32,116,104,101,32,112,114,111,118,105,100,101,100,32,102,117,110,99,116,105,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,99,117,114,114,101,110,116,32,44,32,105,110,100,101,120,32,44,97,114,114,97,121,32,41,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115,46,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,109,97,112,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,104,97,116,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,115,111,109,101,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,116,104,97,116,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,115,111,109,101,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,105,116,101,114,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,115,111,109,101,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,105,102,40,32,116,104,97,116,32,41,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,99,97,108,108,98,97,99,107,46,99,97,108,108,40,32,116,104,97,116,32,44,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,117,101,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,101,108,115,101,123,13,10,32,32,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,99,97,108,108,98,97,99,107,40,32,116,97,32,44,32,105,116,101,114,32,44,32,116,104,105,115,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,117,101,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,102,105,108,116,101,114,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,70,105,108,116,101,114,93,13,10,32,32,32,32,32,42,32,67,114,101,97,116,101,115,32,97,32,110,101,119,32,97,114,114,97,121,32,119,105,116,104,32,97,108,108,32,101,108,101,109,101,110,116,115,32,116,104,97,116,32,112,97,115,115,32,116,104,101,32,116,101,115,116,32,105,109,112,108,101,109,101,110,116,101,100,32,98,121,32,116,104,101,32,112,114,111,118,105,100,101,100,32,102,117,110,99,116,105,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,99,117,114,114,101,110,116,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115,46,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,109,97,112,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,104,97,116,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,102,105,108,116,101,114,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,116,104,97,116,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,102,105,108,116,101,114,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,44,13,10,32,32,32,32,32,32,32,32,32,32,105,116,101,114,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,91,93,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,102,105,108,116,101,114,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,105,102,40,32,116,104,97,116,32,41,123,13,10,32,32,32,32,32,32,32,32,102,111,114,40,32,118,97,114,32,105,32,61,32,48,44,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,59,32,105,32,60,32,108,101,110,59,32,43,43,105,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,40,32,99,97,108,108,98,97,99,107,46,99,97,108,108,40,32,116,104,97,116,32,44,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,91,32,43,43,105,116,101,114,32,93,32,61,32,116,97,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,101,108,115,101,123,13,10,32,32,32,32,32,32,32,32,102,111,114,40,32,118,97,114,32,105,32,61,32,48,44,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,59,32,105,32,60,32,108,101,110,59,32,43,43,105,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,40,32,99,97,108,108,98,97,99,107,40,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,91,32,43,43,105,116,101,114,32,93,32,61,32,116,97,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,105,110,100,101,120,79,102,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,105,110,100,101,120,79,102,93,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,116,104,101,32,102,105,114,115,116,32,105,110,100,101,120,32,97,116,32,119,104,105,99,104,32,97,32,103,105,118,101,110,32,101,108,101,109,101,110,116,32,99,97,110,32,98,101,32,102,111,117,110,100,32,105,110,32,116,104,101,32,97,114,114,97,121,44,32,111,114,32,45,49,32,105,102,32,105,116,32,105,115,32,110,111,116,32,112,114,101,115,101,110,116,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,115,117,98,106,101,99,116,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,78,117,109,98,101,114,125,32,102,114,111,109,73,110,100,101,120,32,45,62,32,73,110,100,101,120,32,116,104,97,116,32,98,101,103,105,110,32,115,101,97,114,99,104,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,105,110,100,101,120,79,102,34,32,44,32,40,32,115,117,98,106,101,99,116,32,44,32,102,114,111,109,73,110,100,101,120,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,105,116,101,114,32,61,32,40,32,102,114,111,109,73,110,100,101,120,32,41,63,32,102,114,111,109,73,110,100,101,120,32,45,32,49,32,58,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,105,110,100,101,120,79,102,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,46,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,43,43,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,105,102,40,32,116,97,32,61,61,61,32,115,117,98,106,101,99,116,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,32,61,32,105,116,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,98,114,101,97,107,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,105,110,100,101,120,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,108,97,115,116,73,110,100,101,120,79,102,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,108,97,115,116,73,110,100,101,120,79,102,93,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,116,104,101,32,108,97,115,116,32,105,110,100,101,120,32,97,116,32,119,104,105,99,104,32,97,32,103,105,118,101,110,32,101,108,101,109,101,110,116,32,99,97,110,32,98,101,32,102,111,117,110,100,32,105,110,32,116,104,101,32,97,114,114,97,121,44,32,111,114,32,45,49,32,105,102,32,105,116,32,105,115,32,110,111,116,32,112,114,101,115,101,110,116,46,13,10,32,32,32,32,32,42,32,84,104,101,32,97,114,114,97,121,32,105,115,32,115,101,97,114,99,104,101,100,32,98,97,99,107,119,97,114,100,115,44,32,115,116,97,114,116,105,110,103,32,97,116,32,102,114,111,109,73,110,100,101,120,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,97,114,103,101,116,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,78,117,109,98,101,114,125,32,102,114,111,109,73,110,100,101,120,32,45,62,32,73,110,100,101,120,32,116,104,97,116,32,98,101,103,105,110,32,115,101,97,114,99,104,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,108,97,115,116,73,110,100,101,120,79,102,34,32,44,32,40,32,116,97,114,103,101,116,32,44,32,102,114,111,109,73,110,100,101,120,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,44,13,10,32,32,32,32,32,32,32,32,32,32,105,116,101,114,32,61,32,40,32,102,114,111,109,73,110,100,101,120,32,41,63,32,102,114,111,109,73,110,100,101,120,32,43,32,49,32,58,32,108,101,110,44,13,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,108,97,115,116,73,110,100,101,120,79,102,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,46,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,119,104,105,108,101,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,45,45,105,116,101,114,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,105,102,40,32,116,97,32,61,61,61,32,116,97,114,103,101,116,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,32,61,32,105,116,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,98,114,101,97,107,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,105,110,100,101,120,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,109,97,112,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,109,97,112,93,13,10,32,32,32,32,32,42,32,67,114,101,97,116,101,115,32,97,32,110,101,119,32,97,114,114,97,121,32,119,105,116,104,32,116,104,101,32,114,101,115,117,108,116,115,32,111,102,32,99,97,108,108,105,110,103,32,97,32,112,114,111,118,105,100,101,100,32,102,117,110,99,116,105,111,110,32,111,110,32,101,118,101,114,121,32,101,108,101,109,101,110,116,32,105,110,32,116,104,105,115,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,99,117,114,114,101,110,116,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115,46,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,103,105,110,32,112,114,111,99,101,115,115,101,100,32,105,110,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,109,97,112,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,116,104,97,116,32,45,62,32,99,111,110,116,101,120,116,32,111,98,106,101,99,116,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,109,97,112,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,116,104,97,116,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,109,97,112,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,114,101,116,32,61,32,91,93,44,13,10,32,32,32,32,32,32,32,32,32,32,105,116,101,114,32,61,32,45,49,44,13,10,32,32,32,32,32,32,32,32,32,32,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,44,13,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,48,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,116,104,105,115,32,61,61,61,32,110,117,108,108,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,46,109,97,112,32,58,32,116,104,105,115,32,105,115,32,110,117,108,108,32,111,114,32,110,111,116,32,100,101,102,105,110,101,100,46,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,105,102,40,32,116,104,97,116,32,41,123,13,10,32,32,32,32,32,32,32,32,102,111,114,40,32,105,59,32,105,32,60,32,108,101,110,59,32,43,43,105,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,91,32,43,43,105,116,101,114,32,93,32,61,32,99,97,108,108,98,97,99,107,46,99,97,108,108,40,32,116,104,97,116,32,44,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,101,108,115,101,123,13,10,32,32,32,32,32,32,32,32,102,111,114,40,32,105,59,32,105,32,60,32,108,101,110,59,32,43,43,105,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,91,32,43,43,105,116,101,114,32,93,32,61,32,99,97,108,108,98,97,99,107,40,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,114,101,100,117,99,101,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,82,101,100,117,99,101,93,13,10,32,32,32,32,32,42,32,65,112,112,108,121,32,97,32,102,117,110,99,116,105,111,110,32,97,103,97,105,110,115,116,32,97,110,32,97,99,99,117,109,117,108,97,116,111,114,32,97,110,100,13,10,32,32,32,32,32,42,32,101,97,99,104,32,118,97,108,117,101,32,111,102,32,116,104,101,32,97,114,114,97,121,32,40,102,114,111,109,32,108,101,102,116,45,116,111,45,114,105,103,104,116,41,32,97,115,32,116,111,32,114,101,100,117,99,101,32,105,116,32,116,111,32,97,32,115,105,110,103,108,101,32,118,97,108,117,101,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,112,114,101,118,105,111,117,115,86,97,108,117,101,32,44,32,99,117,114,114,101,110,116,86,97,108,117,101,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,59,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,102,111,117,114,32,97,114,103,117,109,101,110,116,115,44,13,10,32,32,32,32,32,42,32,112,114,101,118,105,111,117,115,86,97,108,117,101,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,118,97,108,117,101,32,112,114,101,118,105,111,117,115,108,121,32,114,101,116,117,114,110,101,100,32,105,110,32,116,104,101,32,108,97,115,116,32,105,110,118,111,99,97,116,105,111,110,32,111,102,32,116,104,101,32,99,97,108,108,98,97,99,107,44,32,111,114,32,105,110,105,116,105,97,108,86,97,108,117,101,44,32,105,102,32,115,117,112,112,108,105,101,100,46,32,40,83,101,101,32,98,101,108,111,119,46,41,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,86,97,108,117,101,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,105,110,103,32,112,114,111,99,101,115,115,101,100,32,105,110,32,116,104,101,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,105,110,103,32,112,114,111,99,101,115,115,101,100,32,105,110,32,116,104,101,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,114,101,100,117,99,101,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,78,117,109,98,101,114,125,32,105,110,105,116,105,97,108,32,45,62,32,79,98,106,101,99,116,32,116,111,32,117,115,101,32,97,115,32,116,104,101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,116,104,101,32,102,105,114,115,116,32,99,97,108,108,32,111,102,32,116,104,101,32,99,97,108,108,98,97,99,107,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,44,32,34,114,101,100,117,99,101,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,105,110,105,116,105,97,108,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,114,101,100,117,99,101,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,114,101,116,32,61,32,105,110,105,116,105,97,108,32,124,124,32,116,104,105,115,91,32,48,32,93,44,13,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,40,32,105,110,105,116,105,97,108,32,41,63,32,48,32,58,32,49,44,13,10,32,32,32,32,32,32,32,32,32,32,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,40,32,108,101,110,32,61,61,61,32,48,32,124,124,32,108,101,110,32,61,61,61,32,110,117,108,108,32,41,32,38,38,32,97,114,103,117,109,101,110,116,115,46,108,101,110,103,116,104,32,60,32,50,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,32,108,101,110,103,116,104,32,105,115,32,48,32,97,110,100,32,110,111,32,115,101,99,111,110,100,32,97,114,103,117,109,101,110,116,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,102,111,114,40,32,105,59,32,105,32,60,32,108,101,110,59,32,43,43,105,32,41,123,13,10,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,99,97,108,108,98,97,99,107,40,32,114,101,116,32,44,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,13,10,13,10,32,32,105,102,40,32,33,97,114,114,97,121,80,114,111,116,111,46,114,101,100,117,99,101,82,105,103,104,116,32,41,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,82,101,100,117,99,101,82,105,103,104,116,93,13,10,32,32,32,32,32,42,32,65,112,112,108,121,32,97,32,102,117,110,99,116,105,111,110,32,115,105,109,117,108,116,97,110,101,111,117,115,108,121,32,97,103,97,105,110,115,116,13,10,32,32,32,32,32,42,32,116,119,111,32,118,97,108,117,101,115,32,111,102,32,116,104,101,32,97,114,114,97,121,32,40,102,114,111,109,32,114,105,103,104,116,45,116,111,45,108,101,102,116,41,32,97,115,32,116,111,32,114,101,100,117,99,101,32,105,116,32,116,111,32,97,32,115,105,110,103,108,101,32,118,97,108,117,101,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,70,117,110,99,116,105,111,110,125,32,99,97,108,108,98,97,99,107,32,45,62,32,70,117,110,99,116,105,111,110,40,32,112,114,101,118,105,111,117,115,86,97,108,117,101,32,44,32,99,117,114,114,101,110,116,86,97,108,117,101,32,44,32,105,110,100,101,120,32,44,32,97,114,114,97,121,32,41,59,13,10,32,32,32,32,32,42,32,67,97,108,108,98,97,99,107,32,102,117,110,99,116,105,111,110,32,116,97,107,105,110,103,32,102,111,117,114,32,97,114,103,117,109,101,110,116,115,44,13,10,32,32,32,32,32,42,32,112,114,101,118,105,111,117,115,86,97,108,117,101,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,118,97,108,117,101,32,112,114,101,118,105,111,117,115,108,121,32,114,101,116,117,114,110,101,100,32,105,110,32,116,104,101,32,108,97,115,116,32,105,110,118,111,99,97,116,105,111,110,32,111,102,32,116,104,101,32,99,97,108,108,98,97,99,107,44,32,111,114,32,105,110,105,116,105,97,108,86,97,108,117,101,44,32,105,102,32,115,117,112,112,108,105,101,100,46,32,40,83,101,101,32,98,101,108,111,119,46,41,13,10,32,32,32,32,32,42,32,99,117,114,114,101,110,116,86,97,108,117,101,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,105,110,103,32,112,114,111,99,101,115,115,101,100,32,105,110,32,116,104,101,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,105,110,100,101,120,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,105,110,100,101,120,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,108,101,109,101,110,116,32,98,101,105,110,103,32,112,114,111,99,101,115,115,101,100,32,105,110,32,116,104,101,32,97,114,114,97,121,46,13,10,32,32,32,32,32,42,32,97,114,114,97,121,13,10,32,32,32,32,32,42,32,32,32,124,45,32,84,104,101,32,97,114,114,97,121,32,114,101,100,117,99,101,32,119,97,115,32,99,97,108,108,101,100,32,117,112,111,110,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,78,117,109,98,101,114,125,32,105,110,105,116,105,97,108,32,45,62,32,79,98,106,101,99,116,32,116,111,32,117,115,101,32,97,115,32,116,104,101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,116,104,101,32,102,105,114,115,116,32,99,97,108,108,32,111,102,32,116,104,101,32,99,97,108,108,98,97,99,107,46,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,97,114,114,97,121,80,114,111,116,111,32,34,114,101,100,117,99,101,82,105,103,104,116,34,32,44,32,40,32,99,97,108,108,98,97,99,107,32,44,32,105,110,105,116,105,97,108,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,99,97,108,108,98,97,99,107,67,104,101,99,107,40,32,99,97,108,108,98,97,99,107,32,44,32,34,65,114,114,97,121,46,114,101,100,117,99,101,82,105,103,104,116,34,32,41,59,13,10,32,32,32,32,32,32,118,97,114,32,108,101,110,32,61,32,116,104,105,115,46,108,101,110,103,116,104,44,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,105,110,105,116,105,97,108,32,124,124,32,116,104,105,115,91,32,108,101,110,32,45,32,49,32,93,44,13,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,40,32,105,110,105,116,105,97,108,32,41,63,32,108,101,110,32,45,32,49,32,58,32,108,101,110,32,45,32,50,44,13,10,32,32,32,32,32,32,32,32,32,32,116,97,59,13,10,32,32,32,32,32,32,105,102,32,40,32,40,32,108,101,110,32,61,61,61,32,48,32,124,124,32,108,101,110,32,61,61,61,32,110,117,108,108,32,41,32,38,38,32,97,114,103,117,109,101,110,116,115,46,108,101,110,103,116,104,32,60,32,50,32,41,32,123,13,10,32,32,32,32,32,32,32,32,98,117,105,108,116,105,110,84,121,112,101,69,114,114,111,114,40,32,34,65,114,114,97,121,32,108,101,110,103,116,104,32,105,115,32,48,32,97,110,100,32,110,111,32,115,101,99,111,110,100,32,97,114,103,117,109,101,110,116,34,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,102,111,114,40,32,105,59,32,105,32,62,32,45,49,59,32,45,45,105,32,41,123,13,10,32,32,32,32,32,32,32,32,105,102,40,32,40,32,116,97,32,61,32,116,104,105,115,91,32,105,32,93,32,41,32,33,61,61,32,110,117,108,108,32,38,38,32,116,97,32,33,61,61,32,117,110,100,101,102,105,110,101,100,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,99,97,108,108,98,97,99,107,40,32,114,101,116,32,44,32,116,97,32,44,32,105,32,44,32,116,104,105,115,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,13,10,13,10,32,32,105,102,32,40,32,33,100,97,116,101,80,114,111,116,111,46,116,111,74,83,79,78,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,68,97,116,101,47,116,111,74,83,79,78,93,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,97,32,74,83,79,78,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,32,111,102,32,116,104,101,32,68,97,116,101,32,111,98,106,101,99,116,46,13,10,32,32,32,32,32,42,32,64,114,101,116,117,114,110,115,32,123,83,116,114,105,110,103,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,100,97,116,101,80,114,111,116,111,32,44,32,34,116,111,74,83,79,78,34,32,44,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,91,109,111,110,116,104,44,32,100,97,116,101,44,32,104,111,117,114,44,32,109,105,110,117,116,101,44,32,115,101,99,111,110,100,93,32,61,32,91,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,85,84,67,77,111,110,116,104,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,85,84,67,68,97,116,101,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,85,84,67,72,111,117,114,115,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,77,105,110,117,116,101,115,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,83,101,99,111,110,100,115,40,41,13,10,32,32,32,32,32,32,32,32,32,32,93,59,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,39,34,39,32,43,32,116,104,105,115,46,103,101,116,85,84,67,70,117,108,108,89,101,97,114,32,40,41,32,43,32,39,45,39,32,43,13,10,32,32,32,32,32,32,32,32,40,32,109,111,110,116,104,32,62,32,56,63,32,109,111,110,116,104,32,43,32,49,32,58,32,34,48,34,32,43,32,40,32,109,111,110,116,104,32,43,32,49,32,41,32,41,32,43,32,39,45,39,32,43,13,10,32,32,32,32,32,32,32,32,40,32,100,97,116,101,32,62,32,57,63,32,100,97,116,101,32,58,32,34,48,34,32,43,32,100,97,116,101,32,41,32,43,32,39,84,39,32,43,13,10,32,32,32,32,32,32,32,32,40,32,104,111,117,114,32,62,32,57,63,32,104,111,117,114,32,58,32,34,48,34,32,43,32,104,111,117,114,32,41,32,43,32,39,58,39,32,43,13,10,32,32,32,32,32,32,32,32,40,32,109,105,110,117,116,101,32,62,32,57,63,32,109,105,110,117,116,101,32,58,32,34,48,34,32,43,32,109,105,110,117,116,101,32,41,32,43,32,39,58,39,32,43,13,10,32,32,32,32,32,32,32,32,40,32,115,101,99,111,110,100,32,62,32,57,63,32,115,101,99,111,110,100,32,58,32,34,48,34,32,43,32,115,101,99,111,110,100,32,41,32,43,32,39,46,39,32,43,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,103,101,116,85,84,67,77,105,108,108,105,115,101,99,111,110,100,115,32,40,41,32,43,32,39,90,34,39,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,13,10,32,32,105,102,32,40,32,33,68,97,116,101,46,110,111,119,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,68,97,116,101,47,110,111,119,93,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,109,105,108,108,105,115,101,99,111,110,100,115,32,101,108,97,112,115,101,100,32,115,105,110,99,101,32,49,32,74,97,110,117,97,114,121,32,49,57,55,48,32,48,48,58,48,48,58,48,48,32,85,84,67,46,13,10,32,32,32,32,32,42,32,64,114,101,116,117,114,110,32,123,83,116,114,105,110,103,125,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,68,97,116,101,32,44,32,34,110,111,119,34,32,44,32,45,62,32,43,110,101,119,32,68,97,116,101,32,40,41,32,41,59,13,10,32,32,125,13,10,13,10,13,10,32,32,105,102,32,40,32,33,65,114,114,97,121,46,105,115,65,114,114,97,121,32,41,32,123,13,10,32,32,32,32,47,42,42,13,10,32,32,32,32,32,42,32,91,77,68,78,32,65,114,114,97,121,47,105,115,65,114,114,97,121,93,13,10,32,32,32,32,32,42,32,82,101,116,117,114,110,115,32,116,114,117,101,32,105,102,32,97,110,32,111,98,106,101,99,116,32,105,115,32,97,110,32,97,114,114,97,121,44,32,102,97,108,115,101,32,105,102,32,105,116,32,105,115,32,110,111,116,46,13,10,32,32,32,32,32,42,32,64,112,97,114,97,109,32,123,42,125,32,97,114,114,13,10,32,32,32,32,32,42,47,13,10,32,32,32,32,100,101,102,105,110,101,66,117,105,108,116,105,110,40,32,65,114,114,97,121,32,44,32,34,105,115,65,114,114,97,121,34,32,44,32,40,32,97,114,114,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,32,40,32,97,114,103,117,109,101,110,116,115,46,108,101,110,103,116,104,32,61,61,61,32,48,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,40,32,97,114,114,32,41,63,32,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,116,111,83,116,114,105,110,103,46,99,97,108,108,32,40,32,97,114,114,32,41,32,61,61,61,32,34,91,111,98,106,101,99,116,32,65,114,114,97,121,93,34,32,58,32,102,97,108,115,101,59,13,10,32,32,32,32,125,41,59,13,10,32,32,125,13,10,125,59,13,10,13,10,13,10,47,42,42,13,10,32,42,32,84,104,101,32,114,117,110,116,105,109,101,32,109,111,100,117,108,101,115,32,116,104,97,116,32,117,115,101,100,32,97,115,32,114,117,110,116,105,109,101,32,104,101,108,112,101,114,46,13,10,32,42,32,84,104,105,115,32,109,111,100,117,108,101,32,97,99,99,101,115,115,105,98,108,101,32,102,114,111,109,32,101,97,99,104,32,106,115,32,102,105,108,101,115,44,13,10,32,42,32,98,117,116,32,115,104,111,117,108,100,110,39,116,32,98,101,32,117,115,101,100,32,98,121,32,117,115,101,114,46,13,10,32,42,32,64,110,97,109,101,115,112,97,99,101,13,10,32,42,47,13,10,109,111,100,117,108,101,32,82,117,110,116,105,109,101,32,123,13,10,32,32,34,117,115,101,32,115,116,114,105,99,116,34,59,13,10,32,32,47,42,42,13,10,32,32,32,42,32,67,117,115,116,111,109,32,101,114,114,111,114,32,102,117,110,99,116,105,111,110,44,32,109,117,115,116,32,98,101,32,99,97,108,108,101,100,32,98,121,32,110,101,119,32,111,112,101,114,97,116,111,114,46,13,10,32,32,32,42,32,64,99,111,110,115,116,13,10,32,32,32,42,32,64,112,97,114,97,109,32,123,78,117,109,98,101,114,125,32,108,105,110,101,13,10,32,32,32,42,32,64,112,97,114,97,109,32,123,83,116,114,105,110,103,125,32,102,105,108,101,13,10,32,32,32,42,32,64,112,97,114,97,109,32,123,69,114,114,111,114,125,32,101,13,10,32,32,32,42,47,13,10,32,32,99,111,110,115,116,32,69,120,99,101,112,116,105,111,110,40,32,108,105,110,101,32,44,32,102,105,108,101,32,44,32,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,116,111,83,116,114,105,110,103,32,61,32,45,62,32,82,117,110,116,105,109,101,46,103,101,116,69,114,114,111,114,77,101,115,115,97,103,101,40,32,101,32,41,32,43,32,34,32,105,110,32,102,105,108,101,32,34,32,43,32,102,105,108,101,32,43,32,34,32,97,116,32,58,32,34,32,43,32,108,105,110,101,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,99,111,110,115,116,32,123,109,97,120,125,32,61,32,77,97,116,104,59,13,10,32,32,99,111,110,115,116,32,123,115,108,105,99,101,125,32,61,32,65,114,114,97,121,46,112,114,111,116,111,116,121,112,101,59,13,10,13,10,32,32,47,47,77,105,110,105,109,97,108,32,114,117,110,116,105,109,101,46,13,10,32,32,99,111,110,115,116,32,82,117,110,116,105,109,101,32,61,32,123,13,10,32,32,32,32,32,32,32,32,32,32,103,101,116,69,114,114,111,114,77,101,115,115,97,103,101,32,40,32,101,32,41,32,45,62,32,40,32,101,46,109,101,115,115,97,103,101,32,41,63,32,101,46,109,101,115,115,97,103,101,32,58,32,40,32,101,46,100,101,115,99,114,105,112,116,105,111,110,32,41,63,32,101,46,100,101,115,99,114,105,112,116,105,111,110,32,58,32,101,46,116,111,83,116,114,105,110,103,40,41,44,13,10,32,32,32,32,32,32,32,32,32,32,101,120,99,101,112,116,105,111,110,72,97,110,100,108,101,114,32,40,32,108,105,110,101,32,44,32,102,105,108,101,32,44,32,101,32,41,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,32,105,115,83,116,111,112,73,116,101,114,97,116,105,111,110,40,32,101,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,101,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,110,101,119,32,69,120,99,101,112,116,105,111,110,40,32,108,105,110,101,32,44,32,102,105,108,101,32,44,32,101,32,41,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,69,120,99,101,112,116,105,111,110,32,40,32,101,120,99,101,112,116,105,111,110,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,114,121,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,101,120,99,101,112,116,105,111,110,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,32,99,97,116,99,104,40,32,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,32,105,115,83,116,111,112,73,116,101,114,97,116,105,111,110,40,32,101,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,69,114,114,111,114,40,32,101,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,69,114,114,111,114,40,32,116,104,105,115,46,103,101,116,69,114,114,111,114,77,101,115,115,97,103,101,40,32,101,32,41,32,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,104,97,115,80,114,111,116,111,32,58,32,34,95,95,112,114,111,116,111,95,95,34,32,105,110,32,123,125,13,10,32,32,32,32,32,32,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,112,114,111,112,32,44,32,118,97,108,117,101,32,41,32,45,62,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,32,111,98,106,32,44,32,112,114,111,112,32,44,32,123,13,10,32,32,32,32,99,111,110,102,105,103,117,114,97,98,108,101,32,58,32,116,114,117,101,44,13,10,32,32,32,32,101,110,117,109,101,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,119,114,105,116,97,98,108,101,32,58,32,116,114,117,101,44,13,10,32,32,32,32,118,97,108,117,101,32,58,32,118,97,108,117,101,13,10,32,32,125,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,99,111,110,115,116,97,110,116,40,32,111,98,106,32,44,32,112,114,111,112,32,44,32,118,97,108,117,101,32,41,32,45,62,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,32,111,98,106,32,44,32,112,114,111,112,32,44,32,123,13,10,32,32,32,32,99,111,110,102,105,103,117,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,101,110,117,109,101,114,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,119,114,105,116,97,98,108,101,32,58,32,102,97,108,115,101,44,13,10,32,32,32,32,118,97,108,117,101,32,58,32,118,97,108,117,101,13,10,32,32,125,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,116,111,65,114,114,97,121,40,32,108,105,107,101,65,114,114,97,121,32,44,32,105,110,100,101,120,32,41,32,45,62,32,40,32,108,105,107,101,65,114,114,97,121,32,41,63,32,115,108,105,99,101,46,99,97,108,108,40,32,108,105,107,101,65,114,114,97,121,32,44,32,105,110,100,101,120,32,41,32,58,32,91,93,59,13,10,13,10,32,32,71,101,110,101,114,97,116,111,114,40,41,45,62,123,125,13,10,32,32,101,120,112,111,114,116,32,99,114,101,97,116,101,71,101,110,101,114,97,116,111,114,40,32,103,101,110,101,114,97,116,111,114,70,110,32,44,32,99,108,111,115,101,70,110,32,44,32,99,111,110,116,101,120,116,32,41,32,45,62,32,123,13,10,32,32,32,32,118,97,114,32,114,101,116,32,61,32,110,101,119,32,71,101,110,101,114,97,116,111,114,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,114,101,116,32,44,32,34,110,101,120,116,34,32,44,32,103,101,110,101,114,97,116,111,114,70,110,46,98,105,110,100,40,32,99,111,110,116,101,120,116,32,44,32,102,97,108,115,101,32,44,32,102,97,108,115,101,32,41,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,114,101,116,32,44,32,34,115,101,110,100,34,32,44,32,103,101,110,101,114,97,116,111,114,70,110,46,98,105,110,100,40,32,99,111,110,116,101,120,116,32,44,32,116,114,117,101,32,44,32,102,97,108,115,101,32,41,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,114,101,116,32,44,32,34,99,108,111,115,101,34,32,44,32,99,108,111,115,101,70,110,46,98,105,110,100,40,32,99,111,110,116,101,120,116,32,41,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,114,101,116,32,44,32,34,95,95,110,111,116,104,114,111,119,78,101,120,116,95,95,34,32,44,32,103,101,110,101,114,97,116,111,114,70,110,46,98,105,110,100,40,32,99,111,110,116,101,120,116,32,44,32,102,97,108,115,101,32,44,32,116,114,117,101,32,41,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,114,101,116,32,44,32,34,116,111,83,116,114,105,110,103,34,32,44,32,45,62,32,34,91,111,98,106,101,99,116,32,71,101,110,101,114,97,116,111,114,93,34,32,41,59,13,10,32,32,32,32,79,98,106,101,99,116,46,102,114,101,101,122,101,40,32,114,101,116,32,41,59,13,10,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,125,13,10,13,10,32,32,99,111,110,115,116,32,103,101,116,69,114,114,111,114,77,101,115,115,97,103,101,40,32,101,32,41,32,45,62,32,40,32,101,46,109,101,115,115,97,103,101,32,41,63,32,101,46,109,101,115,115,97,103,101,32,58,32,40,32,101,46,100,101,115,99,114,105,112,116,105,111,110,32,41,63,32,101,46,100,101,115,99,114,105,112,116,105,111,110,32,58,32,101,46,116,111,83,116,114,105,110,103,40,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,116,104,114,111,119,69,120,99,101,112,116,105,111,110,32,61,32,82,117,110,116,105,109,101,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,46,98,105,110,100,40,32,82,117,110,116,105,109,101,32,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,101,120,99,101,112,116,105,111,110,72,97,110,100,108,101,114,32,61,32,82,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,72,97,110,100,108,101,114,46,98,105,110,100,40,32,82,117,110,116,105,109,101,32,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,101,120,116,101,110,100,40,32,100,101,115,116,32,44,32,115,111,117,114,99,101,32,41,32,123,13,10,32,32,32,32,102,111,114,32,40,32,118,97,114,32,112,114,111,112,32,105,110,32,115,111,117,114,99,101,32,41,32,123,13,10,32,32,32,32,32,32,100,101,115,116,91,32,112,114,111,112,32,93,32,61,32,115,111,117,114,99,101,91,32,112,114,111,112,32,93,59,13,10,32,32,32,32,125,13,10,32,32,32,32,114,101,116,117,114,110,32,100,101,115,116,59,13,10,32,32,125,13,10,13,10,32,32,99,111,109,112,97,114,101,84,117,112,108,101,40,32,116,117,112,108,101,32,41,32,45,62,32,123,13,10,32,32,32,32,118,97,114,32,109,97,120,73,110,100,101,120,32,61,32,109,97,120,40,32,116,117,112,108,101,46,108,101,110,103,116,104,32,44,32,116,104,105,115,46,108,101,110,103,116,104,32,41,44,13,10,32,32,32,32,32,32,32,32,105,32,61,32,45,49,59,13,10,32,32,32,32,119,104,105,108,101,32,40,32,43,43,105,32,60,32,109,97,120,73,110,100,101,120,32,38,38,32,116,117,112,108,101,91,32,105,32,93,32,61,61,61,32,116,104,105,115,91,32,105,32,93,32,41,123,125,13,10,32,32,32,32,114,101,116,117,114,110,32,109,97,120,73,110,100,101,120,32,61,61,61,32,105,59,13,10,32,32,125,13,10,13,10,32,32,116,117,112,108,101,84,111,65,114,114,97,121,32,45,62,32,65,114,114,97,121,46,112,114,111,116,111,116,121,112,101,46,115,108,105,99,101,46,99,97,108,108,40,32,116,104,105,115,32,41,59,13,10,13,10,32,32,101,120,112,111,114,116,32,99,114,101,97,116,101,84,117,112,108,101,40,32,111,98,106,32,44,32,115,105,122,101,32,41,32,123,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,34,108,101,110,103,116,104,34,32,44,32,115,105,122,101,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,34,101,113,117,97,108,34,32,44,32,99,111,109,112,97,114,101,84,117,112,108,101,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,34,116,111,65,114,114,97,121,34,32,44,32,116,117,112,108,101,84,111,65,114,114,97,121,32,41,59,13,10,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,34,116,111,83,116,114,105,110,103,34,32,44,32,45,62,32,34,91,111,98,106,101,99,116,32,84,117,112,108,101,93,34,32,41,59,13,10,32,32,32,32,114,101,116,117,114,110,32,79,98,106,101,99,116,46,102,114,101,101,122,101,40,32,111,98,106,32,41,59,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,99,114,101,97,116,101,82,101,99,111,114,100,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,105,102,32,40,32,111,98,106,46,116,111,83,116,114,105,110,103,40,41,32,61,61,61,32,34,91,111,98,106,101,99,116,32,79,98,106,101,99,116,93,34,32,41,32,123,13,10,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,111,98,106,32,44,32,34,116,111,83,116,114,105,110,103,34,32,44,32,45,62,32,34,91,111,98,106,101,99,116,32,82,101,99,111,114,100,93,34,32,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,114,101,116,117,114,110,32,79,98,106,101,99,116,46,102,114,101,101,122,101,40,32,111,98,106,32,41,59,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,101,120,116,101,110,100,80,114,111,116,111,116,121,112,101,32,61,32,40,32,100,101,114,105,118,101,100,32,44,32,98,97,115,101,32,41,32,45,62,32,123,13,10,32,32,32,32,100,101,114,105,118,101,100,46,112,114,111,116,111,116,121,112,101,32,61,32,98,97,115,101,59,13,10,32,32,125,13,10,13,10,32,32,99,111,110,115,116,32,103,101,116,80,114,111,116,111,116,121,112,101,32,61,32,40,32,34,103,101,116,80,114,111,116,111,116,121,112,101,79,102,34,32,105,110,32,79,98,106,101,99,116,32,41,63,13,10,32,32,32,32,40,32,111,98,106,32,41,32,45,62,32,79,98,106,101,99,116,46,103,101,116,80,114,111,116,111,116,121,112,101,79,102,40,32,111,98,106,32,41,32,58,13,10,32,32,32,32,40,32,111,98,106,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,114,101,116,32,61,32,123,125,59,13,10,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,111,98,106,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,111,98,106,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,32,105,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,114,101,116,91,32,105,32,93,32,61,32,111,98,106,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,101,120,116,101,110,100,67,108,97,115,115,32,61,32,40,32,82,117,110,116,105,109,101,46,104,97,115,80,114,111,116,111,32,41,63,13,10,32,32,32,32,40,32,100,101,114,105,118,101,100,32,44,32,98,97,115,101,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,116,121,112,101,111,102,32,98,97,115,101,32,61,61,61,32,39,102,117,110,99,116,105,111,110,39,32,41,32,123,13,10,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,46,112,114,111,116,111,116,121,112,101,46,95,95,112,114,111,116,111,95,95,32,61,32,98,97,115,101,46,112,114,111,116,111,116,121,112,101,59,13,10,32,32,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,98,97,115,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,91,32,105,32,93,32,61,32,98,97,115,101,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,46,112,114,111,116,111,116,121,112,101,46,95,95,112,114,111,116,111,95,95,32,61,32,98,97,115,101,46,95,95,112,114,111,116,111,95,95,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,32,58,13,10,32,32,32,32,40,32,100,101,114,105,118,101,100,32,44,32,98,97,115,101,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,98,97,115,101,84,121,112,101,32,61,32,116,121,112,101,111,102,32,98,97,115,101,59,13,10,32,32,32,32,32,32,105,102,32,40,32,98,97,115,101,84,121,112,101,32,61,61,61,32,34,102,117,110,99,116,105,111,110,34,32,41,32,123,13,10,32,32,32,32,32,32,32,32,118,97,114,32,105,110,104,101,114,105,116,32,61,32,45,62,123,125,59,13,10,32,32,32,32,32,32,32,32,105,110,104,101,114,105,116,46,112,114,111,116,111,116,121,112,101,32,61,32,98,97,115,101,46,112,114,111,116,111,116,121,112,101,59,13,10,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,46,112,114,111,116,111,116,121,112,101,32,61,32,110,101,119,32,105,110,104,101,114,105,116,59,13,10,32,32,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,98,97,115,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,91,32,105,32,93,32,61,32,98,97,115,101,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,118,97,114,32,105,110,104,101,114,105,116,32,61,32,45,62,123,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,112,114,111,116,111,32,61,32,103,101,116,80,114,111,116,111,116,121,112,101,40,32,98,97,115,101,32,41,59,13,10,32,32,32,32,32,32,32,32,105,110,104,101,114,105,116,46,112,114,111,116,111,116,121,112,101,32,61,32,112,114,111,116,111,59,13,10,32,32,32,32,32,32,32,32,100,101,114,105,118,101,100,46,112,114,111,116,111,116,121,112,101,32,61,32,110,101,119,32,105,110,104,101,114,105,116,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,95,95,114,101,102,95,105,116,101,114,97,116,111,114,95,95,32,61,32,34,95,95,109,111,99,104,97,95,105,116,101,114,97,116,111,114,95,115,112,101,99,105,97,108,95,107,101,121,95,95,34,59,13,10,13,10,32,32,101,120,112,111,114,116,32,116,104,114,111,119,83,116,111,112,73,116,101,114,97,116,105,111,110,40,41,32,123,13,10,32,32,32,32,116,114,121,32,123,13,10,32,32,32,32,32,32,116,104,114,111,119,32,83,116,111,112,73,116,101,114,97,116,105,111,110,59,13,10,32,32,32,32,125,32,99,97,116,99,104,32,40,32,101,32,41,32,123,13,10,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,69,114,114,111,114,40,32,101,46,116,111,83,116,114,105,110,103,40,41,32,41,59,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,105,115,71,101,110,101,114,97,116,111,114,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,114,101,116,117,114,110,32,111,98,106,32,105,110,115,116,97,110,99,101,111,102,32,71,101,110,101,114,97,116,111,114,59,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,103,101,116,73,116,101,114,97,116,111,114,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,118,97,114,32,114,101,116,32,61,32,111,98,106,91,95,95,114,101,102,95,105,116,101,114,97,116,111,114,95,95,93,40,41,44,13,10,32,32,32,32,32,32,32,32,110,101,119,79,98,106,59,13,10,32,32,32,32,105,102,32,40,32,105,115,71,101,110,101,114,97,116,111,114,40,32,114,101,116,32,41,32,41,32,123,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,13,10,32,32,32,32,110,101,119,79,98,106,32,61,32,123,125,59,13,10,32,32,32,32,105,102,32,40,32,114,101,116,46,110,101,120,116,32,41,32,123,13,10,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,110,101,119,79,98,106,32,44,32,34,110,101,120,116,34,32,44,32,102,117,110,99,116,105,111,110,32,40,41,32,123,13,10,32,32,32,32,32,32,32,32,118,97,114,32,114,101,115,117,108,116,32,61,32,114,101,116,46,110,101,120,116,40,41,59,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,114,101,115,117,108,116,32,61,61,61,32,117,110,100,101,102,105,110,101,100,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,83,116,111,112,73,116,101,114,97,116,105,111,110,40,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,115,117,108,116,59,13,10,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,123,125,59,13,10,32,32,32,32,125,13,10,32,32,32,32,105,102,32,40,32,33,40,32,34,95,95,110,111,116,104,114,111,119,78,101,120,116,95,95,34,32,105,110,32,114,101,116,32,41,32,41,32,123,13,10,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,110,101,119,79,98,106,32,44,32,34,95,95,110,111,116,104,114,111,119,78,101,120,116,95,95,34,32,44,32,114,101,116,46,110,101,120,116,46,98,105,110,100,40,32,114,101,116,32,41,32,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,102,111,114,32,40,32,118,97,114,32,112,114,111,112,32,105,110,32,114,101,116,32,41,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,112,114,111,112,32,33,61,61,32,34,110,101,120,116,34,32,38,38,32,112,114,111,112,32,33,61,61,32,34,95,95,110,111,116,104,114,111,119,78,101,120,116,95,95,34,32,41,32,123,13,10,32,32,32,32,32,32,32,32,110,101,119,79,98,106,91,32,112,114,111,112,32,93,32,61,32,114,101,116,91,32,112,114,111,112,32,93,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,32,32,105,102,32,40,32,33,40,32,34,116,111,83,116,114,105,110,103,34,32,105,110,32,114,101,116,32,41,32,41,32,123,13,10,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,110,101,119,79,98,106,32,44,32,34,116,111,83,116,114,105,110,103,34,32,44,32,45,62,32,34,91,111,98,106,101,99,116,32,73,116,101,114,97,116,111,114,93,34,32,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,114,101,116,117,114,110,32,110,101,119,79,98,106,59,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,104,97,115,73,116,101,114,97,116,111,114,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,114,101,116,117,114,110,32,95,95,114,101,102,95,105,116,101,114,97,116,111,114,95,95,32,105,110,32,111,98,106,59,13,10,32,32,125,13,10,13,10,32,32,99,111,110,115,116,32,114,115,116,111,112,73,116,101,114,97,116,105,111,110,32,61,32,47,83,116,111,112,73,116,101,114,97,116,105,111,110,47,59,13,10,32,32,101,120,112,111,114,116,32,105,115,83,116,111,112,73,116,101,114,97,116,105,111,110,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,114,101,116,117,114,110,32,111,98,106,32,61,61,61,32,83,116,111,112,73,116,101,114,97,116,105,111,110,32,124,124,32,114,115,116,111,112,73,116,101,114,97,116,105,111,110,46,116,101,115,116,40,32,111,98,106,32,41,59,13,10,32,32,125,13,10,13,10,32,32,118,97,114,32,112,114,105,118,97,116,101,82,101,99,111,114,100,44,13,10,32,32,32,32,32,32,99,114,101,97,116,101,80,114,105,118,97,116,101,82,101,99,111,114,100,44,13,10,32,32,32,32,32,32,103,101,116,80,114,105,118,97,116,101,82,101,99,111,114,100,59,13,10,32,32,105,102,32,40,32,34,87,101,97,107,77,97,112,34,32,105,110,32,119,105,110,100,111,119,32,41,32,123,13,10,32,32,32,32,112,114,105,118,97,116,101,82,101,99,111,114,100,32,61,32,110,101,119,32,87,101,97,107,77,97,112,40,41,59,13,10,32,32,32,32,99,114,101,97,116,101,80,114,105,118,97,116,101,82,101,99,111,114,100,32,61,32,40,32,115,101,108,102,32,44,32,112,114,105,118,97,116,101,72,111,108,100,101,114,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,118,97,114,32,104,111,108,100,101,114,32,61,32,110,101,119,32,112,114,105,118,97,116,101,72,111,108,100,101,114,59,13,10,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,104,111,108,100,101,114,46,99,111,110,115,116,114,117,99,116,111,114,32,44,32,34,95,95,105,115,95,112,114,105,118,97,116,101,95,95,34,32,44,32,49,32,41,59,13,10,32,32,32,32,32,32,112,114,105,118,97,116,101,82,101,99,111,114,100,46,115,101,116,40,32,115,101,108,102,32,44,32,104,111,108,100,101,114,32,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,103,101,116,80,114,105,118,97,116,101,82,101,99,111,114,100,32,61,32,40,32,115,101,108,102,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,112,114,105,118,97,116,101,82,101,99,111,114,100,46,104,97,115,40,32,115,101,108,102,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,112,114,105,118,97,116,101,82,101,99,111,114,100,46,103,101,116,40,32,115,101,108,102,32,41,59,13,10,32,32,32,32,32,32,125,32,101,108,115,101,32,105,102,32,40,32,115,101,108,102,46,99,111,110,115,116,114,117,99,116,111,114,32,61,61,61,32,34,95,95,105,115,95,112,114,105,118,97,116,101,95,95,34,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,99,114,101,97,116,101,80,114,105,118,97,116,101,82,101,99,111,114,100,32,61,32,40,32,115,101,108,102,32,44,32,112,114,105,118,97,116,101,72,111,108,100,101,114,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,33,115,101,108,102,46,95,95,116,121,112,101,105,100,95,95,32,41,32,123,13,10,32,32,32,32,32,32,32,32,118,97,114,32,104,111,108,100,101,114,32,61,32,110,101,119,32,112,114,105,118,97,116,101,72,111,108,100,101,114,59,13,10,32,32,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,104,111,108,100,101,114,46,99,111,110,115,116,114,117,99,116,111,114,32,44,32,34,95,95,105,115,95,112,114,105,118,97,116,101,95,95,34,32,44,32,49,32,41,59,13,10,32,32,32,32,32,32,32,32,99,114,101,97,116,101,85,110,101,110,117,109,80,114,111,112,40,32,115,101,108,102,32,44,32,34,95,95,112,114,105,118,97,116,101,95,95,34,44,32,104,111,108,100,101,114,32,41,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,32,32,103,101,116,80,114,105,118,97,116,101,82,101,99,111,114,100,32,61,32,40,32,115,101,108,102,32,41,32,45,62,32,123,13,10,32,32,32,32,32,32,105,102,32,40,32,115,101,108,102,46,95,95,112,114,105,118,97,116,101,95,95,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,95,95,112,114,105,118,97,116,101,95,95,59,13,10,32,32,32,32,32,32,125,32,101,108,115,101,32,105,102,32,40,32,115,101,108,102,46,99,111,110,115,116,114,117,99,116,111,114,32,61,61,61,32,34,95,95,105,115,95,112,114,105,118,97,116,101,95,95,34,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,103,101,116,80,114,105,118,97,116,101,82,101,99,111,114,100,59,13,10,13,10,32,32,101,120,112,111,114,116,32,105,110,105,116,105,97,108,105,122,101,67,108,97,115,115,40,32,105,110,115,116,97,110,99,101,32,44,32,99,108,97,115,115,79,98,106,101,99,116,32,44,32,112,114,105,118,97,116,101,72,111,108,100,101,114,32,44,32,99,111,110,115,116,114,117,99,116,111,114,32,44,32,97,114,103,115,32,44,32,110,97,109,101,32,44,32,108,105,110,101,32,41,32,123,13,10,32,32,32,32,105,102,32,40,32,33,105,110,115,116,97,110,99,101,32,124,124,32,33,40,32,105,110,115,116,97,110,99,101,32,105,110,115,116,97,110,99,101,111,102,32,99,108,97,115,115,79,98,106,101,99,116,32,41,32,41,32,123,13,10,32,32,32,32,32,32,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,34,99,108,97,115,115,32,34,32,43,32,110,97,109,101,32,43,32,34,32,109,117,115,116,32,98,101,32,99,97,108,108,101,100,32,98,121,32,110,101,119,46,32,108,105,110,101,32,58,32,34,32,43,32,108,105,110,101,32,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,99,114,101,97,116,101,80,114,105,118,97,116,101,82,101,99,111,114,100,40,32,105,110,115,116,97,110,99,101,32,44,32,112,114,105,118,97,116,101,72,111,108,100,101,114,32,41,59,13,10,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,46,97,112,112,108,121,40,32,105,110,115,116,97,110,99,101,32,44,32,97,114,103,115,32,41,59,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,103,101,116,83,117,112,101,114,40,32,111,98,106,32,41,32,123,13,10,32,32,32,32,118,97,114,32,116,121,112,101,32,61,32,116,121,112,101,111,102,32,111,98,106,44,13,10,32,32,32,32,32,32,32,32,114,101,116,59,13,10,32,32,32,32,105,102,32,40,32,116,121,112,101,32,61,61,61,32,34,102,117,110,99,116,105,111,110,34,32,41,32,123,13,10,32,32,32,32,32,32,114,101,116,32,61,32,102,117,110,99,116,105,111,110,32,40,41,32,123,125,13,10,32,32,32,32,32,32,114,101,116,46,112,114,111,116,111,116,121,112,101,32,61,32,111,98,106,46,112,114,111,116,111,116,121,112,101,59,13,10,32,32,32,32,32,32,114,101,116,32,61,32,110,101,119,32,114,101,116,40,41,59,13,10,32,32,32,32,32,32,105,102,32,40,32,111,98,106,46,95,95,104,97,114,109,111,110,121,95,99,108,97,115,115,95,95,32,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,46,99,111,110,115,116,114,117,99,116,111,114,32,61,32,111,98,106,46,99,111,110,115,116,114,117,99,116,111,114,59,13,10,32,32,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,46,99,111,110,115,116,114,117,99,116,111,114,32,61,32,111,98,106,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,32,32,125,13,10,32,32,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,32,32,125,13,10,13,10,13,10,32,32,101,120,112,111,114,116,32,116,114,97,105,116,77,105,120,105,110,40,32,100,101,115,116,32,44,32,115,111,117,114,99,101,32,44,32,119,105,116,104,95,32,44,32,119,105,116,104,111,117,116,32,41,32,123,13,10,32,32,32,32,105,102,32,40,32,33,100,101,115,116,46,95,109,111,99,104,97,84,114,97,105,116,77,97,114,107,32,124,124,32,33,115,111,117,114,99,101,46,95,109,111,99,104,97,84,114,97,105,116,77,97,114,107,32,41,32,123,13,10,32,32,32,32,32,32,82,117,110,116,105,109,101,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,34,109,105,120,105,110,32,111,110,108,121,32,117,115,101,100,32,102,111,114,32,116,114,97,105,116,46,34,32,41,59,13,10,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,118,97,114,32,100,101,115,116,84,114,97,105,116,80,114,105,118,97,116,101,32,61,32,100,101,115,116,46,95,109,111,99,104,97,84,114,97,105,116,80,114,105,118,97,116,101,44,13,10,32,32,32,32,32,32,32,32,32,32,115,111,117,114,99,101,84,114,97,105,116,80,114,105,118,97,116,101,32,61,32,115,111,117,114,99,101,46,95,109,111,99,104,97,84,114,97,105,116,80,114,105,118,97,116,101,44,13,10,32,32,32,32,32,32,32,32,32,32,100,101,115,116,84,114,97,105,116,80,117,98,108,105,99,32,61,32,100,101,115,116,46,95,109,111,99,104,97,84,114,97,105,116,80,117,98,108,105,99,44,13,10,32,32,32,32,32,32,32,32,32,32,115,111,117,114,99,101,84,114,97,105,116,80,117,98,108,105,99,32,61,32,115,111,117,114,99,101,46,95,109,111,99,104,97,84,114,97,105,116,80,117,98,108,105,99,44,13,10,32,32,32,32,32,32,32,32,32,32,115,111,117,114,99,101,82,101,113,117,105,114,101,115,32,61,32,115,111,117,114,99,101,46,95,109,111,99,104,97,82,101,113,117,105,114,101,115,44,13,10,32,32,32,32,32,32,32,32,32,32,100,101,115,116,82,101,113,117,105,114,101,115,32,61,32,100,101,115,116,46,95,109,111,99,104,97,82,101,113,117,105,114,101,115,44,13,10,32,32,32,32,32,32,32,32,32,32,116,109,112,59,13,10,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,115,111,117,114,99,101,84,114,97,105,116,80,114,105,118,97,116,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,119,105,116,104,111,117,116,91,32,105,32,93,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,109,112,32,61,32,40,32,33,119,105,116,104,95,91,32,105,32,93,32,41,63,32,105,32,58,32,119,105,116,104,95,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,32,32,100,101,115,116,84,114,97,105,116,80,114,105,118,97,116,101,91,32,116,109,112,32,93,32,61,32,115,111,117,114,99,101,84,114,97,105,116,80,114,105,118,97,116,101,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,102,111,114,32,40,32,105,32,105,110,32,115,111,117,114,99,101,84,114,97,105,116,80,117,98,108,105,99,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,119,105,116,104,111,117,116,91,32,105,32,93,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,109,112,32,61,32,40,32,33,119,105,116,104,95,91,32,105,32,93,32,41,63,32,105,32,58,32,119,105,116,104,95,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,32,32,100,101,115,116,84,114,97,105,116,80,117,98,108,105,99,91,32,116,109,112,32,93,32,61,32,115,111,117,114,99,101,84,114,97,105,116,80,117,98,108,105,99,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,102,111,114,32,40,32,105,32,105,110,32,115,111,117,114,99,101,82,101,113,117,105,114,101,115,32,41,32,123,13,10,32,32,32,32,32,32,32,32,100,101,115,116,82,101,113,117,105,114,101,115,91,32,105,32,93,32,61,32,115,111,117,114,99,101,82,101,113,117,105,114,101,115,91,32,105,32,93,59,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,99,108,97,115,115,77,105,120,105,110,40,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,99,111,110,115,116,114,117,99,116,111,114,80,114,111,116,111,32,125,32,44,32,123,32,112,114,111,116,111,116,121,112,101,32,58,32,112,114,105,118,97,116,101,80,114,111,116,111,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,32,95,109,111,99,104,97,84,114,97,105,116,77,97,114,107,32,58,32,109,97,114,107,32,44,32,95,109,111,99,104,97,84,114,97,105,116,80,117,98,108,105,99,32,58,32,116,114,97,105,116,80,117,98,108,105,99,32,44,32,95,109,111,99,104,97,84,114,97,105,116,80,114,105,118,97,116,101,32,58,32,116,114,97,105,116,80,114,105,118,97,116,101,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,116,104,95,32,44,32,119,105,116,104,111,117,116,32,41,13,10,32,32,123,13,10,32,32,32,32,105,102,32,40,32,33,109,97,114,107,32,41,32,123,13,10,32,32,32,32,32,32,82,117,110,116,105,109,101,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,34,109,105,120,105,110,32,111,110,108,121,32,117,115,101,100,32,102,111,114,32,116,114,97,105,116,46,34,32,41,59,13,10,32,32,32,32,125,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,118,97,114,32,116,109,112,59,13,10,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,105,110,32,116,114,97,105,116,80,117,98,108,105,99,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,119,105,116,104,111,117,116,91,32,105,32,93,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,109,112,32,61,32,40,32,33,119,105,116,104,95,91,32,105,32,93,32,41,63,32,105,32,58,32,119,105,116,104,95,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,80,114,111,116,111,91,32,116,109,112,32,93,32,61,32,116,114,97,105,116,80,117,98,108,105,99,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,102,111,114,32,40,32,105,32,105,110,32,116,114,97,105,116,80,114,105,118,97,116,101,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,119,105,116,104,111,117,116,91,32,105,32,93,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,116,109,112,32,61,32,40,32,33,119,105,116,104,95,91,32,105,32,93,32,41,63,32,105,32,58,32,119,105,116,104,95,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,32,32,112,114,105,118,97,116,101,80,114,111,116,111,91,32,116,109,112,32,93,32,61,32,116,114,97,105,116,80,114,105,118,97,116,101,91,32,105,32,93,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,101,120,112,111,114,116,32,99,104,101,99,107,82,101,113,117,105,114,101,109,101,110,116,115,40,32,123,112,114,111,116,111,116,121,112,101,58,112,114,111,116,111,49,125,44,32,123,112,114,111,116,111,116,121,112,101,58,112,114,111,116,111,50,125,32,44,32,116,114,97,105,116,115,32,44,32,102,105,108,101,32,44,32,108,105,110,101,32,41,32,123,13,10,32,32,32,32,102,111,114,32,40,32,118,97,114,32,105,32,61,32,48,44,108,101,110,32,61,32,116,114,97,105,116,115,46,108,101,110,103,116,104,59,32,105,32,60,32,108,101,110,59,32,105,43,43,32,41,32,123,13,10,32,32,32,32,32,32,118,97,114,32,123,95,109,111,99,104,97,82,101,113,117,105,114,101,115,125,32,61,32,116,114,97,105,116,115,91,32,105,32,93,59,13,10,32,32,32,32,32,32,102,111,114,32,40,32,118,97,114,32,112,114,111,112,32,105,110,32,95,109,111,99,104,97,82,101,113,117,105,114,101,115,32,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,33,40,32,112,114,111,112,32,105,110,32,112,114,111,116,111,49,32,41,32,38,38,32,33,40,32,112,114,111,112,32,105,110,32,112,114,111,116,111,50,32,41,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,82,117,110,116,105,109,101,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,34,67,108,97,115,115,32,100,111,115,101,32,110,111,116,32,109,101,101,116,32,116,104,101,32,116,114,97,105,116,115,32,114,101,113,117,105,114,101,109,101,110,116,46,32,116,114,97,105,116,115,32,114,101,113,117,105,114,101,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,102,32,112,114,111,112,101,114,116,121,32,34,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,43,32,112,114,111,112,32,43,32,34,92,110,105,110,32,102,105,108,101,32,34,32,43,32,102,105,108,101,32,43,32,34,32,97,116,32,108,105,110,101,32,34,32,43,32,108,105,110,101,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,32,32,125,13,10,32,32,125,13,10,13,10,32,32,64,118,101,114,115,105,111,110,40,32,100,101,98,117,103,32,41,32,123,13,10,32,32,32,32,101,120,112,111,114,116,32,97,115,115,101,114,116,32,61,32,40,32,99,111,110,115,111,108,101,32,38,38,32,99,111,110,115,111,108,101,46,97,115,115,101,114,116,32,41,63,13,10,32,32,32,32,32,32,40,32,101,120,112,101,99,116,32,44,32,101,120,112,32,44,32,115,116,114,32,44,32,108,105,110,101,32,44,32,102,105,108,101,110,97,109,101,32,41,45,62,99,111,110,115,111,108,101,46,97,115,115,101,114,116,40,32,101,120,112,101,99,116,32,61,61,61,32,101,120,112,32,44,32,34,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,32,58,32,34,32,43,32,115,116,114,32,43,32,34,92,110,101,120,112,101,99,116,32,34,32,43,32,101,120,112,101,99,116,32,43,32,34,32,98,117,116,32,103,111,116,32,34,32,43,32,101,120,112,32,43,32,34,92,110,105,110,32,102,105,108,101,32,34,32,43,32,102,105,108,101,110,97,109,101,32,43,32,34,32,97,116,32,58,32,34,32,43,32,108,105,110,101,32,41,32,58,13,10,32,32,32,32,32,32,40,32,101,120,112,101,99,116,32,44,32,101,120,112,32,44,32,115,116,114,32,44,32,108,105,110,101,32,44,32,102,105,108,101,110,97,109,101,32,41,45,62,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,32,101,120,112,101,99,116,32,33,61,61,32,101,120,112,32,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,82,117,110,116,105,109,101,46,116,104,114,111,119,69,120,99,101,112,116,105,111,110,40,32,34,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,32,58,32,34,32,43,32,115,116,114,32,43,32,34,92,110,101,120,112,101,99,116,32,34,32,43,32,101,120,112,101,99,116,32,43,32,34,32,98,117,116,32,103,111,116,32,34,32,43,32,101,120,112,32,43,32,34,92,110,105,110,32,102,105,108,101,32,34,32,43,32,102,105,108,101,110,97,109,101,32,43,32,34,32,97,116,32,58,32,34,32,43,32,108,105,110,101,32,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,125,13,10,32,32,125,13,10,125,13,10,13,10,105,102,32,40,32,33,40,32,34,83,116,111,112,73,116,101,114,97,116,105,111,110,34,32,105,110,32,119,105,110,100,111,119,32,41,32,41,32,123,13,10,32,32,119,105,110,100,111,119,46,83,116,111,112,73,116,101,114,97,116,105,111,110,32,61,32,123,13,10,32,32,32,32,116,111,83,116,114,105,110,103,40,41,32,123,32,114,101,116,117,114,110,32,34,91,111,98,106,101,99,116,32,83,116,111,112,73,116,101,114,97,116,105,111,110,93,34,59,32,125,13,10,32,32,125,13,10,125,13,10,13,10,84,117,112,108,101,32,40,32,46,46,46,97,114,103,115,32,41,45,62,32,123,13,10,32,32,118,97,114,32,114,101,116,32,61,32,123,125,13,10,32,32,114,101,116,46,108,101,110,103,116,104,32,61,32,48,59,13,10,32,32,65,114,114,97,121,46,112,114,111,116,111,116,121,112,101,46,112,117,115,104,46,97,112,112,108,121,40,32,114,101,116,32,44,32,97,114,103,115,32,41,13,10,32,32,82,117,110,116,105,109,101,46,99,114,101,97,116,101,84,117,112,108,101,40,32,114,101,116,32,44,32,97,114,103,117,109,101,110,116,115,46,108,101,110,103,116,104,32,41,59,13,10,32,32,114,101,116,117,114,110,32,114,101,116,59,13,10,125,13,10,82,101,99,111,114,100,40,32,109,101,109,98,101,114,32,41,32,45,62,32,82,117,110,116,105,109,101,46,99,114,101,97,116,101,82,101,99,111,114,100,40,32,109,101,109,98,101,114,32,41,59,13,10,0};
const char iterators[] = {109,111,100,117,108,101,32,123,10,32,32,99,111,110,115,116,32,104,97,115,79,119,110,32,61,32,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,59,10,32,32,101,120,112,111,114,116,32,105,116,101,114,97,116,111,114,32,61,32,34,95,95,109,111,99,104,97,95,105,116,101,114,97,116,111,114,95,115,112,101,99,105,97,108,95,107,101,121,95,95,34,59,10,32,32,101,120,112,111,114,116,32,107,101,121,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,32,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,32,123,10,32,32,32,32,32,32,32,32,32,32,105,102,32,40,104,97,115,79,119,110,46,99,97,108,108,40,111,98,106,44,32,120,41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,120,59,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,10,32,32,101,120,112,111,114,116,32,118,97,108,117,101,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,32,123,10,32,32,32,32,32,32,32,32,32,32,105,102,32,40,104,97,115,79,119,110,46,99,97,108,108,40,111,98,106,44,32,120,41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,111,98,106,91,120,93,59,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,10,32,32,101,120,112,111,114,116,32,105,116,101,109,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,32,123,10,32,32,32,32,32,32,32,32,32,32,105,102,32,40,104,97,115,79,119,110,46,99,97,108,108,40,111,98,106,44,32,120,41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,91,120,44,32,111,98,106,91,120,93,93,59,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,101,120,112,111,114,116,32,97,108,108,75,101,121,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,10,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,120,59,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,101,120,112,111,114,116,32,97,108,108,86,97,108,117,101,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,10,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,111,98,106,91,120,93,59,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,101,120,112,111,114,116,32,97,108,108,73,116,101,109,115,40,111,98,106,41,32,123,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,91,105,116,101,114,97,116,111,114,93,58,32,45,62,32,45,62,32,123,10,32,32,32,32,32,32,32,32,102,111,114,32,40,118,97,114,32,120,32,105,110,32,111,98,106,41,10,32,32,32,32,32,32,32,32,32,32,121,105,101,108,100,32,91,120,44,32,111,98,106,91,120,93,93,59,10,32,32,32,32,32,32,125,40,41,10,32,32,32,32,125,59,10,32,32,125,10,32,32,10,125,0};
void Runtime::BuildSource() {
  map_.insert(RuntimePair("runtime",runtime));
  map_.insert(RuntimePair("iterators",iterators));
}
Runtime::RuntimeMap Runtime::map_;}}
