#!/usr/bin/python
# -*- coding: utf-8 -*-
title =  'mocha ES Next Translator'
after_compilation = '変換後は以下のようになります。'
after_compilation_en = 'After compilation.'
active_class = 'class="active"'
values = {
'nav.html' : {
        'index.html' : {
            'active_index' : active_class
            },
        'first_step_guide.html' : {
            'active_first_step' : active_class
            },
        'es_next_detail.html' : {
            'active_grammar' : active_class
            },
        'api_guide.html' : {
            'active_api' : active_class
            }
        },
'index.html' : {
        'ja' : {
            'hero_sub' : 'mochaはEcmascript262 5th edition 及び、現在策定中のEcmascript harmonyの文法とちょっとした拡張をブラウザで利用可能なjavascriptに変換するコンパイラです。',
            'sp_translate' : 'ES Nextからjavascriptへの変換',
            'sp_translate_sub' : 'ES Nextを使用して記述されたファイルをブラウザで実行可能なjavascriptへ変換します。',
            'sp_cmp' : '圧縮',
            'sp_cmp_sub' : '変換済みのjavascriptを圧縮します。変換から圧縮までをシームレスに行えるので他のツールを起動する必要がありません。',
            'sp_module' : 'ファイルのモジュール化',
            'sp_module_sub' : 'ES Nextの機能であるimport及び、module構文。、mochaの独自拡張を利用したファイルの読み込みによりモジュール化をサポートします。これらはコンパイル時に静的に結合されます',
            'sp_version' : '条件別コンパイル',
            'sp_version_sub' : 'コンパイラ命令としてversion演算子を導入しました。事前に定義したバージョン識別子の有無でコードブロックの削除が可能です。',
            'sp_error_handler' : 'デバッグ用エラーハンドラの挿入',
            'sp_error_handler_sub' : 'ファイルを結合した際に、エラーが起きた行数がわからなくなるのを避けるため、行数及び、ファイル名をスコープ、あるいはステートメント毎に挿入します。',
            'sp_test' : '外部テストツールとの連携',
            'sp_test_sub' : 'phantomjsなどのテスト用ツールを利用したテストも可能です。'
            },
        'en' : {
            'hero_sub' : 'mocha is the translator to translate the Ecmascript262 5th edition, the Ecmascript harmony that is now working out and, some extensions to a browser executable javascript.',
            'sp_translate' : 'Converte ES Next to javascript.',
            'sp_translate_sub' : 'Translate files that written by ES Next to the browser executable javascript.',
            'sp_cmp' : 'The compress',
            'sp_cmp_sub' : 'The mocha compress a translated javascript, and this done by seamless. So don\'t need to execute other tools.',
            'sp_module' : 'modules',
            'sp_module_sub' : 'The mocha support modules, by the ES Next\'s \'import\' and \'module statement\' and mocha\'s @include extension. That combined at the compilation time.',
            'sp_version' : 'versions',
            'sp_version_sub' : 'The mocha has version operator, so you can delete code block from compiled file by the version identifier that defined before the compilation.',
            'sp_error_handler' : 'The Error handler insertion.',
            'sp_error_handler_sub' : 'To easy debug, the mocha insert file name and line numbers, per statement or scope.',
            'sp_test' : 'The test.',
            'sp_test_sub' : 'You can use the phantomjs or other test libraries.'
            }
        },
'es_next_detail.html' : {
        'ja' : {
            'class_title' : """現在策定されているプロポーサルではclassが組み込まれる予定です。
		class機能自体はfunctionの糖衣構文になります。""",
            'class_imp_browsers' : '実装済み処理系 : 無し',
            'class_ex1_title' : 'まずは今までの書き方でクラスを生成してみます。',
            'class_ex1_comment1' : 'このクラスはTHREE.Meshを継承しています。',
            'class_ex1_comment2' : '親クラスのコンストラクタを呼び出します。',
            'class_ex1_comment3' : 'ecmascript5以降での継承です。',
            'class_ex1_comment4' : 'THREE.Mesh.prototypeを継承したprototypeオブジェクトを生成します。',
            'class_ex1_comment5' : '親クラスのupdateメソッドの呼び出し。',
            'class_ex2_title' : '次にES Nextで予定されているclassを使って書き換えてみます。',
            'class_ex2_comment1' : '継承を行うためにはclass \'drived\' extends \'super\'という構文を使う',
            'class_ex2_comment2' : 'superはコンストラクタ関数か、クラスである必要がある',
            'class_ex2_comment3' : '親クラスのコンストラクタを呼び出す。',
            'class_ex2_comment4' : 'THREE.Mesh.call(this, geometry, materials)に該当',
            'class_ex2_comment5' : 'publicなメンバはすべてpublic修飾子を宣言の前に付与する',
            'class_ex2_comment6' : '親クラスのメソッド呼び出し。',
            'class_ex2_commnet7' : 'THREE.Mesh.prototype.update.call(this)に該当',
            'class_ex3_title' : '次に基本的なクラスの構成要素の説明をします。',
            'class_ex3_comment1' : 'コンストラクタは以下のように定義します。',
            'class_ex3_comment2' : 'クラスのメンバはコンストラクタ内で指定します。',
            'class_ex3_comment3' : 'クラスのメソッドはpublicかprivateのアクセス修飾が可能です。',
            'class_ex3_comment4' : '指定しない場合はprivateになります。',
            'class_ex3_comment5' : '省略関数も利用可能です。',
            'class_ex3_comment6' : 'publicな関数以外のメンバはprototypenに設定され、',
            'class_ex3_comment7' : '全てのインスタンスで共通の値が使用されます。',
            'class_ex3_comment8' : 'constなメンバはコンストラクタか、定義時に初期化しなければ',
            'class_ex3_comment9' : '値の追加はできません。',
            'class_ex3_comment10' : 'static修飾が宣言されると変数はstaticな変数になります。',
            'class_ex3_comment11' : 'static修飾にはprivate,publicは設定できません。',
            'class_ex4_title' : after_compilation,
            'class_detail_title' : '詳細',
            'class_detail_sub' : 'mochaではclassはコンストラクタ関数と、プロトタイプの糖衣構文として機能します。なので、既存のjavascriptのクラスと100%の互換性を持っています。またクラスを使用することによるオーバーヘッドもできるだけ抑えてありますが、privateフィールドの実現のためにやや実行時にオーバーヘッドがあります。',
            'class_section1_title' : 'インターフェース',
            'class_section1_sub1' : """クラスを宣言します。class nameとbase class nameはjavascriptで使用可能な変数名を使用可能です。
		    const修飾子がついていた場合は、すべてのメンバが変更不可能になります。
		    継承の際にextendsを選ぶと、通常のプロトタイプの継承になります。prototypeを選ぶと、直接&lt;base class name or literal&gt;をprototypeとして使用します。""",
            'class_section1_sub2' : """コンストラクタを定義します。コンストラクタは必ずconstructorという関数名でなければなりません。
				  メンバ変数の初期化を行います。コンストラクタが定義されていなければ、mochaが自動で空のコンストラクタを生成します。""",
            'class_section1_sub3' : """メンバを定義します。public修飾子がついていた場合はメンバは外部からアクセス可能になります。
				  const修飾子がついていた場合は、メンバは変更不可能になります。
				  private修飾子がついていた場合は、外部からアクセス不可なメンバになります。
				  何も修飾子を付けなかった場合は、デフォルトでprivateになります。
				  static修飾子が宣言された場合はメンバはインスタンス無しにアクセス可能になりますが、static以外のメンバにはアクセス出来ません。
				  またstaticなメンバはprivate、publicといったアクセス修飾は現在は出来ません。""",
            'class_section1_sub4' : 'publicメンバにアクセスします。',
            'class_section1_sub5' : 'privateメンバにアクセスします。',
            'trait_title' : 'クラスの振る舞いのみを定義したオブジェクトです。',
            'trait_impl_sub' : '実装済み処理系 : 無し',
            'trait_ex1_title' : 'traitの定義は以下のように行います。',
            'trait_ex2_title' : after_compilation,
            'trait_detail_title' : '詳細',
            'trait_detail_sub1' : """クラスに対して振る舞いを注入します。traitはrequireプロパティを設定することで実装しなければならないメソッドを指定できます。
またmixin属性を設定することで、trait同士、あるいはclassとtraitを合成可能です。その際にmixin ... with &lt;method_name&gt; as &lt:new_name&gt;とすることでメソッド名の書き換えが可能です。またwithout属性を指定することで、特定のメソッドのmixinを無効化することが可能です。
public,privateなどの指定はclassを参照してください。""",
            'trait_interface_title' : 'インターフェース',
            'trait_interface_sub1' : 'traitを宣言します。',
            'trait_interface_sub2' : 'traitをmixinします。もし同名のメンバがあった場合は上書きされます。with ~ asが指定されていた場合はmember nameをnew member nameでリネームします。without ~が指定されていた場合はそのメソッドはmixinされません。 ',
            'destructuring_title' : '分割代入機能です。',
            'destructuring_impl_sub' : '実装済み処理系 : mozilla 1.6以降',
            'destructuring_ex1_title' : '配列',
            'destructuring_ex2_title' : after_compilation,
            'destructuring_ex3_title' : 'オブジェクト',
            'destructuring_ex4_title' : after_compilation,
            'destructuring_ex5_title' : '少々複雑な例',
            'destructuring_ex6_title' : after_compilation,
            'for_each_title' : 'for each構文です。',
            'for_each_impl_sub' : '実装済み処理系 : mozilla 1.6以降',
            'for_each_ex2_sub' : '変換後',
            'do_expression_title' : '簡易スコープです。',
            'do_expression_impl_sub' : '実装済み処理系 : なし',
            'do_expression_ex2_title' : '変換後',
            'short_function_title' : '関数の短縮構文です。',
            'short_function_impl_sub' : '実装済み処理系 : なし',
            'short_function_ex1_title' : '無名関数',
            'short_function_ex2_title' : after_compilation,
            'short_function_ex3_title' : '関数宣言',
            'short_function_ex4_title' : after_compilation,
            'short_function_ex5_title' : 'コンテキストの束縛',
            'short_function_ex6_title' : after_compilation,
            'import_title' : 'モジュールのインポート機能です。',
            'import_impl_sub' : '実装済み処理系 : なし',
            'import_ex1_title' : after_compilation,
            'import_detail' : '詳細',
            'import_detail_title1' : 'importのルール',
            'import_detail_sub1' : 'ファイルのインポートは以下のルールに沿って行われます。',
            'import_detail_sub2' : '記述',
            'import_detail_sub3' : '説明',
            'import_detail_sub4' : '現在のファイルがあるディレクトリから探します。',
            'import_detail_sub5' : 'ランタイムモジュール、あるいはoptionのmoduleDirプロパティから探します。',
            'module_title' : 'モジュール化機能です。',
            'module_impl_sub' : '実装済み処理系 : なし',
            'module_ex2_title' : after_compilation,
            'module_detail_title' : '詳細',
            'module_detail_sub1' : '各モジュールはファイルスコープ直下にしか置けません。モジュールに指定した名前が直接エクスポートされます。',
            'module_decl_title' : '宣言',
            'module_decl_sub1' : 'moduleを宣言します。moduleはネスト可能です。ネストした場合は親のモジュール以下に設定されます。',
            'module_decl_sub2' : '直接値をエクスポートします。この構文でモジュールを宣言すると、\'=\'で割り当てた値がmoduleの値になります。',
            'let_expression_title' : '新しいスコープを生成します。',
            'let_expression_impl_sub' : '実装済み処理系 : mozilla1.7以降',
            'let_expression_detail' : '詳細',
            'let_expression_detail_sub1' : 'スコープを生成します。let式の入り口に定義した値はlet式内のスコープでのみ有効になります。',
            'object_literal_extras_title' : 'オブジェクトリテラルの拡張構文です。',
            'object_literal_impl_sub' : '実装済み処理系 : なし',
            'object_literal_ex1_title' : after_compilation,
            'data_structure_extras_title' : 'データ構造の追加構文です。',
            'data_structure_extras_impl_sub' : '実装済み処理系 : なし',
            'data_structure_detail_title' : '詳細',
            'data_structure_extras_detail_sub1' : 'tupleを生成します。tupleは配列に似た値の集合ですが、imutableな値であり、変更不可能です。',
            'data_structure_extras_detail_th1' : '名前',
            'data_structure_extras_detail_th2' : 'インターフェース',
            'data_structure_extras_detail_th3' : '説明',
            'data_structure_extras_detail_sub2' : '２つのtupleを比較します。',
            'data_structure_extras_detail_sub3' : '配列に変換します。',
            'data_structure_extras_detail_sub4' : 'tupleの長さを返します。',
            'data_structure_extras_detail_sub5' : 'オブジェクトに似た連想配列を生成しますが、imutableであり、変更できません。',
            'data_structure_extras_detail_sub6' : '現在recordには特定のメソッドはありません。',
            'generator_iterator_title' : 'コルーチンや、列挙子を定義する拡張です。',
            'generator_iterator_impl_sub' : '実装済み処理系 : なし',
            'generator_iterator_ex1_comment1' : '通常のjavascript',
            'generator_iterator_mdn' : 'MDNからの引用',
            'generator_iterator_mdn_sub1' : """yield キーワードを含む関数がジェネレータです。これを呼ぶと、ジェネレータの仮引数は実引数と結び付きますが、本体は実際には評価されません。代わりにジェネレータ・イテレータが返ってきます。ジェネレータ・イテレータの next() メソッドを呼び出すたびに、繰り返しのアルゴリズムが 1 回ずつ実行されます。それぞれのステップでの値は、yield キーワードで指定された値です。yield をアルゴリズムの繰り返しの範囲を示すジェネレータ・イテレータ版の return だと考えましょう。毎回 next() を呼び出すたび、ジェネレータのコードは yield の次の文から再開します。
あなたはジェネレータ・イテレータを、その next() メソッドを繰り返し呼び出すことで、あなたが望んだ結果の状態にたどりつくまで反復させられます。この例では、私たちが欲しいだけの結果を手に入れるまで g.next() を呼び出し続けることで、私たちはどれだけでも多くのフィボナッチ数を得ることができます。""",
            'generator_iterator_mdn_link1' : 'https://developer.mozilla.org/ja/New_in_JavaScript_1.7#.E3.82.B8.E3.82.A7.E3.83.8D.E3.83.AC.E3.83.BC.E3.82.BF',
            'generator_iterator_mdn_sub2' : '簡単に説明すると関数をyieldキーワードの位置で一時停止し、二回目以降はその場所から実行を再開します。またnextだけではなく、yieldに対して、値を与えられるsendメソッドもあります。',
            'generator_iterator_mdn_sub3' : """一度 next() メソッドを呼び出してジェネレータをスタートさせると、与えた特定の値を最後の yield の結果として扱わせる send() を使うことができます。その際ジェネレータはその次の yield のオペランドを返します。
ジェネレータを勝手な時点から始めることはできません。特定の値を send() する前に必ず next() でジェネレータをスタートさせなければなりません。""",
            'generator_iterator_mdn_link2' : 'https://developer.mozilla.org/ja/New_in_JavaScript_1.7#.E3.82.B8.E3.82.A7.E3.83.8D.E3.83.AC.E3.83.BC.E3.82.BF',
            'generator_iterator_mdn_sub4' : 'sendの例',
            'generator_iterator_ex1_comment2' : 'generatorを使用すると...',
            'generator_iterator_ex2_comment1' : 'このようにsendに値を与えると、<code>yield i</code> の部分が引数に置き換わります。',
            'generator_iterator_detail_title' : '詳細',
            'generator_iterator_detail_sub1' : """この例のように、iteratorを生成するにはiteratorsモジュールのiteratorの値を、objectのプロパティにする必要があります。
ここで定義したiteratorはES Nextで追加されたfor of構文で使用されます。
詳しくはfor ofを参照してください。""",
            'for_of_sub1' : 'for of構文とは、Generator、あるいはiteratorのnextを呼び出して値を列挙する構文です。',
            'for_of_impl_sub' : '実装済み処理系 : なし',
            'for_of_detail_sub1' : 'generatorかiteratorの定義されたオブジェクトを与えることで、次々にnextを呼び出し、StopIterationが投げられると処理を終了します。'
            },
        'en' : {
            'class_title' : 'The class is going to be included in current proposal. The class is syntax sugar of the function and prototype definition.',
            'class_imp_browsers' : 'implementation : none',
            'class_ex1_title' : 'In any case, we create class with function and prototype.',
            'class_ex1_comment1' : 'This class inherit from THREE.Mesh.',
            'class_ex1_comment2' : 'Call the parent constructor.',
            'class_ex1_comment3' : 'Ecmascript5 inheritance.',
            'class_ex1_comment4' : 'Make prototype object that inherit from THREE.Mesh.prototype',
            'class_ex1_comment5' : 'Call super class\'s update member function.',
            'class_ex2_title' : 'Then, rewrite above code by ES Next\'s class.',
            'class_ex2_comment1' : 'To inherit, we use syntax like class \'derived\' extends \'super\'',
            'class_ex2_comment2' : 'The super is must be a constructor function or ES Next class.',
            'class_ex2_comment3' : 'Call the super class constructor.',
            'class_ex2_comment4' : 'This correspond to THREE.Mesh.call(this, geometry, materials).',
            'class_ex2_comment5' : 'A public member need public modifier before declaration. ',
            'class_ex2_comment6' : 'A call of super class\'s method.',
            'class_ex2_commnet7' : 'This correspond to THREE.Metsh.prototype.update.call(this).',
            'class_ex3_title' : 'Next, we explain basic component of class.',
            'class_ex3_comment1' : 'The constructor definition is like below.',
            'class_ex3_comment2' : 'The instance member define in the constructor.',
            'class_ex3_comment3' : 'The prototype method is qualifiable as public or private.',
            'class_ex3_comment4' : 'If you do not specify the modifiers, the modifiers is set as private by default.',
            'class_ex3_comment5' : 'The short function syntax can use too.',
            'class_ex3_comment6' : 'The member except for the public method and the instance member, all member set to prototype,',
            'class_ex3_comment7' : 'and all instance use the same value.',
            'class_ex3_comment8' : 'If you do not initialize the const member in constructor or definition time,',
            'class_ex3_comment9' : 'could not set value.',
            'class_ex3_comment10' : 'Decalred as the static, member is set to class static member.',
            'class_ex3_comment11' : 'The static modifier can not set private or public, and all static member is treat as public.',
            'class_ex4_title' : after_compilation_en,
            'class_detail_title' : 'Detail',
            'class_detail_sub' : 'In mocha. the class is behave as syntax sugar of the constructor function and the prototype, so it has 100% compatibility to existing javascript\'s class that declared as function and prototype. And the overhead of class is supressed as much as possible, but to realize private field, the class syntax has a little overhead.',
            'class_section1_title' : 'Interface',
            'class_section1_sub1' : """Declare class. A class name and a base class name is able to use javascript identifier.
		    If const modifier is set to before class declaration, all class member is become immutable.
		    If you select extends keyword as the inheritance, the inheritance is the normal prototype, if you select the prototype keyword, use the &lt;base class name or literal&gt; prototype as the direct prototype.""",
            'class_section1_sub2' : """Define constructor. The constructor name must be \'constructor\'.
				  Initialize instance member. If you do not define the constructor, mocha create default constructor.""",
            'class_section1_sub3' : """Define member. If public modifier is set, the member is accessible from caller.
				  If const modifier is set, that treat as immutable, and 
				  private modifier is set, that unaccessible from caller,
				  and if you do not specify the modifiers, the private modifier is set by default.
				  The member that has static modifier is able to access without instance, but can not access member except for static member,
				  and static member can not set modifier, it treat as public.""",
            'class_section1_sub4' : 'Access to the public member.',
            'class_section1_sub5' : 'Access to the private member.',
            'trait_title' : 'The object that define the class behaver.',
            'trait_impl_sub' : 'implementation : none',
            'trait_ex1_title' : 'The define trait is like below.',
            'trait_ex2_title' : after_compilation_en,
            'trait_detail_title' : 'Detail',
            'trait_detail_sub1' : """Inject dehaver into class. The trait can define requirements to set require property.
And The trait can composite the each trait or the trait and class, to set mixin property, and can rewrite member name or disable member to set with or without in the mixin property, like mixin ... with &lt;method_name&gt; as &lt:new_name&gt;
The modifier like public, private is see class.""",
            'trait_interface_title' : 'Interface',
            'trait_interface_sub1' : 'Declare trait.',
            'trait_interface_sub2' : 'Mixin trait. If member same name is there, it overwrite by after definition. And If with ~ as is set, member name is rewrite as new member name, and If without ~ is set, the specific member is not mixined.',
            'destructuring_title' : 'The destructuring assignment.',
            'destructuring_impl_sub' : 'implementation : mozilla 1.6 or later',
            'destructuring_ex1_title' : 'The Array',
            'destructuring_ex2_title' : after_compilation_en,
            'destructuring_ex3_title' : 'The Object.',
            'destructuring_ex4_title' : after_compilation_en,
            'destructuring_ex5_title' : 'A little complex example.',
            'destructuring_ex6_title' : after_compilation_en,
            'for_each_title' : 'for each statement.',
            'for_each_impl_sub' : 'implementation : mozilla 1.6 or later.',
            'for_each_ex2_sub' : after_compilation_en,
            'do_expression_title' : 'The easy scope.',
            'do_expression_impl_sub' : 'implementation : none',
            'do_expression_ex2_title' : after_compilation_en,
            'short_function_title' : 'The shorter function syntax.',
            'short_function_impl_sub' : 'implementation : none',
            'short_function_ex1_title' : 'Lambda.',
            'short_function_ex2_title' : after_compilation_en,
            'short_function_ex3_title' : 'Decalaration.',
            'short_function_ex4_title' : after_compilation_en,
            'short_function_ex5_title' : 'The context bindings.',
            'short_function_ex6_title' : after_compilation_en,
            'import_title' : 'The module import system.',
            'import_impl_sub' : 'implementation : none',
            'import_ex1_title' : after_compilation_en,
            'import_detail' : 'Detail',
            'import_detail_title1' : 'The rule of import syntax.',
            'import_detail_sub1' : 'The import of file is based on below rule.',
            'import_detail_sub2' : 'subscription',
            'import_detail_sub3' : 'explain',
            'import_detail_sub4' : 'Search the file from current directory.',
            'import_detail_sub5' : 'Search the runtime module, or search the file from directory that specified by option\'s moduleDir property.',
            'module_title' : 'Module system.',
            'module_impl_sub' : 'implementation : none',
            'module_ex2_title' : after_compilation_en,
            'module_detail_title' : 'Detail',
            'module_detail_sub1' : 'Each module only allowed direct child of the file scope. The module is directly export as name that specified as module name.',
            'module_decl_title' : 'Declaration',
            'module_decl_sub1' : 'Decalare module. The module is able to nested, and the nested module is set as parent module\'s child.',
            'module_decl_sub2' : 'Export the value directly.',
            'let_expression_title' : 'Create the new scope.',
            'let_expression_impl_sub' : 'implementation : mozilla1.7 or later',
            'let_expression_detail' : 'Detail',
            'let_expression_detail_sub1' : 'Create the scope. The values that define at the entrance of the let expression is enabled in the let expression scope.',
            'object_literal_extras_title' : 'The extensions of object literal.',
            'object_literal_impl_sub' : 'implementation : none',
            'object_literal_ex1_title' : after_compilation_en,
            'data_structure_extras_title' : 'The extension of the data structures.',
            'data_structure_extras_impl_sub' : 'implementation : none',
            'data_structure_detail_title' : 'Detail',
            'data_structure_extras_detail_sub1' : 'Create the tuple. The tuple is like the array, but imutable.',
            'data_structure_extras_detail_th1' : 'name',
            'data_structure_extras_detail_th2' : 'interface',
            'data_structure_extras_detail_th3' : 'explanation',
            'data_structure_extras_detail_sub2' : 'Compare the two tuple.',
            'data_structure_extras_detail_sub3' : 'Convert the tuple to array.',
            'data_structure_extras_detail_sub4' : 'Get the tuple length.',
            'data_structure_extras_detail_sub5' : 'Create Object like associative array, but immutable.',
            'data_structure_extras_detail_sub6' : 'The record has not method.',
            'generator_iterator_title' : 'Define corutine and enumrator.',
            'generator_iterator_impl_sub' : 'implementation : none',
            'generator_iterator_ex1_comment1' : 'Ecam262',
            'generator_iterator_mdn' : 'Quotation from MDN.',
            'generator_iterator_mdn_sub1' : """The function containing the yield keyword is a generator. When you call it, its formal parameters are bound to actual arguments, but its body isn't actually evaluated. Instead, a generator-iterator is returned. Each call to the generator-iterator's next() method performs another pass through the iterative algorithm. Each step's value is the value specified by the yield keyword. Think of yield as the generator-iterator version of return, indicating the boundary between each iteration of the algorithm. Each time you call next(), the generator code resumes from the statement following the yield.
You cycle a generator-iterator by repeatedly calling its next() method until you reach your desired result condition. In this example, we can obtain however many Fibonacci numbers we want by continuing to call g.next() until we have the number of results we want.""",
            'generator_iterator_mdn_link1' : 'https://developer.mozilla.org/en/New_in_JavaScript_1.7#Generators',
            'generator_iterator_mdn_sub2' : 'To explain it briefly, the generator function is called first time, yield is stop the function at the yield keyword, and second time or after, function start execution at this point. And the there are methods not only next, but also send that give the value to yield keyword.',
            'generator_iterator_mdn_sub3' : """Once a generator has been started by calling its next() method, you can use send(), passing a specific value that will be treated as the result of the last yield. The generator will then return the operand of the subsequent yield.
You can't start a generator at an arbitrary point; you must start it with next() before you can send() it a specific value.""",
            'generator_iterator_mdn_link2' : 'https://developer.mozilla.org/en/New_in_JavaScript_1.7#Resuming_a_generator_at_a_specific_point',
            'generator_iterator_mdn_sub4' : 'The example of send.',
            'generator_iterator_ex1_comment2' : 'If use generator...',
            'generator_iterator_ex2_comment1' : 'Give the value to send like this, The part of <code>yield i</code> is replaced by arguments.',
            'generator_iterator_detail_title' : 'Detail',
            'generator_iterator_detail_sub1' : """Like this example, to create iterator, you need to set key to iterators of iterators module.
The iterator is also used by for of statement,
see for of.""",
            'for_of_sub1' : 'The for of statement is enumerator of generator or iterator.',
            'for_of_impl_sub' : 'implementation : none',
            'for_of_detail_sub1' : 'The for of statement is gived generator or iterator, this call next method one by one, until throws StopIteration.'
            }
        },
'first_step_guide.html' : {
        'ja' : {
            'first_step_sub1' : 'mochaの基本的な使用方法です。まず、ターミナル、あるいはコマンドプロンプトを起動します。その後、',
            'first_step_sub2' : '&lt;mochaの実行ファイルのあるディレクトリ&gt;',
            'first_step_sub3' : 'と入力し、ディレクトリを移動します。移動先のディレクトリで、',
            'first_step_sub4' : 'と入力し、mochaを起動します。すると、',
            'first_step_sub5' : 'このようなプロンプトが表示されます。この状態で、pcのuserディレクトリを見ると、.mochaというディレクトリができているはずです。このディレクトリの中身は以下のような構成になっています。',
            'first_step_sub6' : 'config.jsの中を見てみましょう。デフォルトでは以下のようになっているはずです。',
            'first_step_sub7' : 'watch.jsが実装する必要のあるファイルです。.mochaの中にwatch.jsファイルを作ります。watch.js内では監視するjsファイルを、mochaの設定に追加していきます。以下がサンプルです。',
            'first_step_sub8' : '上記の記述で\'/home/foo/src/test.js\'が監視されます。test.jsを修正するたびに、\'/home/foo/src/deploy/\'フォルダに、\'test-deploy.js\'という名前でコンパイル済みファイルが保存されます。その後、mochaのコンソールで、',
            'first_step_sub9' : 'と入力し、watch.jsを読み込ませます。これでtest.jsの監視が始まります。',
            'first_step_sub10' : '以上が基本的なステップです。',
            'config_js_sub1' : 'mochaが初回起動時に生成する&lt;user_home&gt;/.mocha/config.jsの解説です。',
            'config_js_sub2' : '&lt;user_home&gt;は',
            'config_js_sub3' : 'C:\\Document and Setting\\<ユーザー名>\\',
            'config_js_sub4' : 'C:\\Users\\<ユーザー名>\\',
            'config_js_sub5' : '/Users/<ユーザー名>',
            'config_js_sub6' : '/home/<ユーザー名>',
            'config_js_sub7' : 'になります。 ',
            'config_js_sub8' : 'config.js内ではグローバルスコープにconfigオブジェクトが定義されます。このconfigオブジェクトに設定を追加することで、mochaの設定を行います。',
            'config_js_sub9' : '以下にmochaの生成するデフォルトのconfig.jsを提示します。',
            'config_js_sub10' : 'mochaはcompileSettingPathとlogFilePathプロパティを設定するファイルを生成します。以下がconfigオブジェクトに設定可能な値です。',
            'config_js_sub11' : '名前',
            'config_js_sub12' : '説明',
            'config_js_sub13' : 'jsファイルのコンパイル設定が記述されたファイルの場所です。',
            'config_js_sub14' : 'ログファイルが格納される場所です。',
            'config_js_sub15' : 'phantomjsがインストールされている場所です。',
            'comp_setting_sub1' : 'コンパイルの設定を記述するファイルです。configオブジェクトのcompileSettingPathによって場所が設定されます。このファイルは起動時に指定された場所から自動で読み込まれます。デフォルトではwatch.jsというファイル名になっています。',
            'comp_setting_sub2' : 'サンプル',
            'comp_setting_sub3' : 'scriptモジュールをインポート',
            'comp_setting_sub4' : '設定の追加',
            'comp_setting_sub5' : '対象のファイルネーム',
            'comp_setting_sub6' : 'deployするディレクトリ',
            'comp_setting_sub7' : 'deployする際のファイルネーム',
            'comp_setting_sub8' : 'ファイルのエンコーディング',
            'comp_setting_sub9' : '出力されるファイルのエンコーディング',
            'comp_setting_sub10' : 'コンパイルオプション',
            'comp_setting_sub11' : '人間の読みやすい形にする',
            'comp_setting_sub12' : '圧縮しない',
            'comp_setting_sub13' : 'デバッグモードでコンパイル',
            'comp_setting_sub14' : '各ファイル単位でスコープの生成',
            'comp_setting_sub15' : 'グルーバルスコープの生成',
            'comp_setting_sub16' : '基本的にはscriptモジュールのwatcherオブジェクトのaddSetting関数にファイル名、設定を追加していく形になります。以下が設定のフォーマットです。',
            'comp_setting_sub17' : 'プロパティ名',
            'comp_setting_sub18' : 'データタイプ',
            'comp_setting_sub19' : '説明',
            'comp_setting_sub20' : 'コンパイル結果を出力する場所です。',
            'comp_setting_sub21' : 'コンパイル結果のファイル名です。',
            'comp_setting_sub22' : '元ファイルのエンコーディングです。',
            'comp_setting_sub23' : '出力ファイルのエンコーディングです。',
            'comp_setting_sub24' : 'コンパイルのオプションを指定します。',
            'comp_setting_sub25' : 'optionsの中身です。',
            'comp_setting_sub26' : 'プロパティ名',
            'comp_setting_sub27' : 'データタイプ',
            'comp_setting_sub28' : '説明',
            'comp_setting_sub29' : '出力をフォーマットします。',
            'comp_setting_sub30' : '出力を圧縮します。',
            'comp_setting_sub31' : 'デバッグモードで実行します。',
            'comp_setting_sub32' : 'モジュールをロードするディレクトリを設定します。',
            'comp_setting_sub33' : 'バージョンを指定します。',
            'comp_setting_sub34' : 'ファイル単位でスコープを生成するかどうか指定します。デフォルトではtrueです。',
            'comp_setting_sub35' : 'グローバルなスコープを生成するかどうか指定します。デフォルトではtrueです。',
            'command_sub1' : 'mochaは設定ファイルの追加の際にコマンド設定の追加も可能です。コマンドは以下の方法で追加できます。',
            'command_sub2' : 'mocha.addCommandは第一引数にコマンド名、第二引数にコールバック関数、第三引数に説明を記述します。追加したコマンドは端末上から呼び出す事が可能になります。',
            'command_sub3' : '先ほどのfooコマンドを呼び出すには以下のようにします。',
            'command_sub4' : '組み込みコマンド',
            'command_sub5' : 'mochaは以下のコマンドをデフォルトで持っています。',
            'command_sub6' : '名前',
            'command_sub7' : 'インターフェース',
            'command_sub8' : '機能',
            'command_sub9' : '監視を再開します。',
            'command_sub10' : '監視を停止します。',
            'command_sub11' : '再度設定ファイルを読み込みます。',
            'command_sub12' : '指定したファイルをコンパイルします。predicateには関数か、文字列、正規表現を指定します。',
            'command_sub13' : '指定したファイルをテストします。predicateには関数か、文字列、正規表現を指定します。',
            'command_sub14' : 'mochaの監視下にあるファイルの一覧を表示します。showDeployが指定されるとdeploy情報を、showOptが指定されるとコンパイルオプションをそれぞれ追加で表示します。predicateには関数か、文字列、正規表現を指定します。',
            'command_sub15' : 'コマンド一覧を表示します。',
            'command_sub16' : 'mochaを終了します。',
            'comp_dir_sub1' : 'mochaはES Nextの文法に加え以下の独自拡張を持っています。',
            'comp_dir_sub2' : '名前',
            'comp_dir_sub3' : 'インターフェース',
            'comp_dir_sub4' : '機能',
            'comp_dir_sub5' : 'アサーションの実行です。versionにdebugが定義されている時のみコード生成されます。',
            'comp_dir_sub6' : 'バージョン分岐ブロックを生成します。',
            'comp_dir_sub7' : 'ファイルを読み込み、その場所に展開します。いっさいのコンパイルは行われません。',
            'comp_dir_sub8' : 'このように展開される',
            'comp_dir_sub9' : 'デバッグモードの時はx = 1',
            'comp_dir_sub10' : 'リリースモードの時はx = 2',
            'comp_dir_sub11' : '@includeの部分にjQueryのコードがそのまま挿入される',
            'comp_dir_sub12' : 'mochahはphantomjsgがインストールされていれば、直接起動が可能です。phantomjsはコマンドラインから使用できるwebkitでcssやhtmlもフルで使用可能です。',
            'comp_dir_sub13' : 'phantomjsnの指定方法',
            'comp_dir_sub14' : 'config.js内に',
            'comp_dir_sub15' : 'phantomjsのインストール先',
            'comp_dir_sub16' : 'の記述を追加します。あとは組み込みコマンドの.test()を使うと起動できます。.test()実行時にはversionsの値にtestという値が追加されます。',
            'comp_dir_sub17' : 'テスト',
            'comp_dir_sub18' : 'mocha自体はテスト機能を持たないのですが、既存のテストフレームワークを利用できます。jasmine,JsUnitなど。'
            },
        'en' : {
            'first_step_sub1' : 'The basic guide for mocha. In the beginning, Run terminal or command prompt, and type like below,',
            'first_step_sub2' : '&lt;mocha binary file directory&gt;',
            'first_step_sub3' : 'and change directory, and in the target directory type like below and execute mocha,',
            'first_step_sub4' : 'so',
            'first_step_sub5' : 'mocha show the prompt like this, and see the user home directory, the directory .mocha maybe created, this directory contents is like below.',
            'first_step_sub6' : 'Let\'s see config.js. The config.js file contents maybe like below by default.',
            'first_step_sub7' : 'The watch.js is file that need to implements. So we create watch.js in the directory .mocha, in watch.js, add files which want to observe to the mocha setting. See the below example.',
            'first_step_sub8' : 'When the above script is execute, the \'/home/foo/src/test.js\' file is observed by mocha. The mocha compile and save file to \'/home/foo/src/deploy/\' as \'test-deploy.js\' if test.js is modified. And after, in the mocha\'s console, input like below.',
            'first_step_sub9' : 'mocha reload watch.js and begin observing.',
            'first_step_sub10' : 'It\'s the basic steps.',
            'config_js_sub1' : 'The explanation of the file &lt;user_home&gt;/.mocha/config.js which is created by mocha first time.',
            'config_js_sub2' : 'The &lt;user_home&gt; is',
            'config_js_sub3' : 'C:\\Document and Setting\\&lt;user name&gt;\\',
            'config_js_sub4' : 'C:\\Users\\&lt;user name&gt;\\',
            'config_js_sub5' : '/Users/&lt;user name&gt;',
            'config_js_sub6' : '/home/&lt;user name&gt;',
            'config_js_sub7' : '',
            'config_js_sub8' : 'In the config.js, the config object is defined in the global object, so you can set setting by add setting to that config object.',
            'config_js_sub9' : 'The example of config.js is below.',
            'config_js_sub10' : 'The mocha create files that set compileSettingPath and logFilePath properties by default. The values which is able to set to the config object is below list.',
            'config_js_sub11' : 'name',
            'config_js_sub12' : 'explanation',
            'config_js_sub13' : 'The location which is the compile setting file.',
            'config_js_sub14' : 'The location which is the log file is there.',
            'config_js_sub15' : 'The location which phantomjs is installed.',
            'comp_setting_sub1' : 'The file that descript the compilation setting. The location of this file is decided by the config object\'s compileSettingPath property. This file is auto load by mocha at startup. By default, mocha set watch.js to this file\'s name.',
            'comp_setting_sub2' : 'example',
            'comp_setting_sub3' : 'Import the script module.',
            'comp_setting_sub4' : 'Add the setting.',
            'comp_setting_sub5' : 'Subject file name.',
            'comp_setting_sub6' : 'The directory which put the compiled file.',
            'comp_setting_sub7' : 'The name of compiled file.',
            'comp_setting_sub8' : 'The encoding of source file.',
            'comp_setting_sub9' : 'The encoding of output file.',
            'comp_setting_sub10' : 'Compilation options.',
            'comp_setting_sub11' : 'Output human readable source.',
            'comp_setting_sub12' : 'Do not compress.',
            'comp_setting_sub13' : 'Compile in the debug mode.',
            'comp_setting_sub14' : 'Create the scope per file.',
            'comp_setting_sub15' : 'Create the global scope.',
            'comp_setting_sub16' : 'In basis, the watch.js is call addSetting method of script module\'s watcher object, and pass the file name and options to the arguments.',
            'comp_setting_sub17' : 'property name',
            'comp_setting_sub18' : 'data type.',
            'comp_setting_sub19' : 'explanation',
            'comp_setting_sub20' : 'The location that ouput the compilation result.',
            'comp_setting_sub21' : 'The compilation result\'s file name.',
            'comp_setting_sub22' : 'The encoding of the source file.',
            'comp_setting_sub23' : 'The encoding of the output file.',
            'comp_setting_sub24' : 'Specify the compilation options.',
            'comp_setting_sub25' : 'The contents of the options.',
            'comp_setting_sub26' : 'property name',
            'comp_setting_sub27' : 'data type.',
            'comp_setting_sub28' : 'explanation.',
            'comp_setting_sub29' : 'Format the output.',
            'comp_setting_sub30' : 'Compress the output.',
            'comp_setting_sub31' : 'Add the line number and the file name to output file.',
            'comp_setting_sub32' : 'Specify the directories that search modules.',
            'comp_setting_sub33' : 'Specify the versions.',
            'comp_setting_sub34' : 'Specify create the per file\'s scope or not. This value is true by default.',
            'comp_setting_sub35' : 'Specify create the global scope or not. This value is false. by default',
            'command_sub1' : 'The mocha is able to add user definition commands, to add the commands, do like below.',
            'command_sub2' : 'The first arguments of mocha.addCommand is command name, second arguments is callback function and third arguments is the explanation. The command added by user is callable in the mocha\'s terminal.',
            'command_sub3' : 'To call the above foo command, do like below.',
            'command_sub4' : 'The builtin command.',
            'command_sub5' : 'The mocha has command below by default.',
            'command_sub6' : 'name',
            'command_sub7' : 'interface',
            'command_sub8' : 'explanation',
            'command_sub9' : 'Restart file observing.',
            'command_sub10' : 'Stop file observing.',
            'command_sub11' : 'Reload setting file.',
            'command_sub12' : 'Compile the specified file. A predicate must be a function or string or regular expression.',
            'command_sub13' : 'Test the specfied file. A predicate must be a function or string or regular expression.',
            'command_sub14' : 'Show the list of file which observed by mocha. If showDeploy is truesy value, show deploy information, If showOpt is truesy value, show compilation option. A predicate must be a function or string or regular expression.',
            'command_sub15' : 'Show all commands.',
            'command_sub16' : 'Exit mocha.',
            'comp_dir_sub1' : 'The mocha has the extensions below.',
            'comp_dir_sub2' : 'name',
            'comp_dir_sub3' : 'interface',
            'comp_dir_sub4' : 'explanation',
            'comp_dir_sub5' : 'Do assertion. The code is generated only the versions option has a debug version.',
            'comp_dir_sub6' : 'Create a junction block that depends on the versions option.',
            'comp_dir_sub7' : 'Load a file and extract at this point, that file is not compiled.',
            'comp_dir_sub8' : 'Extract like this.',
            'comp_dir_sub9' : 'In the debug mode, x = 1',
            'comp_dir_sub10' : 'In the release mode, x = 2',
            'comp_dir_sub11' : 'The code of jQuery is inserted In the position of @include.',
            'comp_dir_sub12' : 'The mocha is able to excute phantomjs directly, if installed.',
            'comp_dir_sub13' : 'How to specify the location of the phantomjs.',
            'comp_dir_sub14' : 'In config.js, add statement below.',
            'comp_dir_sub15' : 'the location of phantomjs',
            'comp_dir_sub16' : 'And call .test(), and running .test(), the test value is added to versions.',
            'comp_dir_sub17' : 'The test',
            'comp_dir_sub18' : 'The mocha has not the test functions, but the existing frameworks like jasmine, jsunit are usable.'
            }
        },
'api_guide.html' : {
        'ja' : {
            'member' : 'メンバ',
            'interface' : 'インターフェース',
            'explanation' : '説明',
            'instance_member' : 'インスタンスメンバ',
            'static_member' : 'スタティックメンバ',
            'fs_dir_sub' : 'コンストラクタです。引数で指定したディレクトリに対する操作を行います。',
            'fs_dir_entries_sub' : 'コンストラクタで指定したフォルダ内のエントリの数だけEntryクラスのインスタンスを配列で返します。',
            'fs_dir_mkdir_sub' : 'dirnameで指定されたディレクトリを生成します。',
            'fs_dir_rm_sub' : 'nameで指定されたファイル、ディレクトリを削除します。',
            'fs_dir_chdir_sub' : 'dirnameで指定されたディレクトリにカレントディレクトリを変更します。',
            'fs_entry_fullpath_sub' : 'エントリの絶対パスを返します。',
            'fs_entry_filename_sub' : 'エントリの名前のみを返します。',
            'fs_entry_dir_sub' : 'エントリの親ディレクトリを返します。',
            'fs_entry_isdir_sub' : 'エントリがディレクトリかどうかのフラグです。',
            'fs_entry_isfile_sub' : 'エントリがファイルかどうかのフラグです。',
            'fs_path_path_sub' : 'コンストラクタです。引数で指定したパスに対する操作を行います。',
            'fs_path_filename_sub' : 'コンストラクタで指定したパスの名前部分を返します。',
            'fs_path_directory_sub' : 'コンストラクタで指定したパスのディレクトリ部分を返します。',
            'fs_path_fullpath_sub' : 'コンストラクタで指定したパスの絶対パスを返します。',
            'fs_getcwd_sub' : '現在の作業ディレクトリを返します。',
            'fs_homeDir_sub' : 'ユーザーのホームディレクトリを返します。',
            'fs_stat_stat_sub' : 'コンストラクタです。引数で指定したパスの情報を取得します。',
            'fs_stat_isDir_sub' : 'コンストラクタで指定したパスがディレクトリかどうかを判定します。',
            'fs_stat_isReg_sub' : 'コンストラクタで指定したパスが通常のファイルかどうかを判定します。',
            'fs_stat_isChr_sub' : 'コンストラクタで指定したパスがキャラクターデバイスかどうかを判定します。',
            'fs_stat_isExist_sub' : 'コンストラクタで指定したパスが存在するかどうかを判定します。',
            'fs_stat_dev_sub' : 'コンストラクタで指定したパスがあるデバイスのidを返します。',
            'fs_stat_ino_sub' : 'コンストラクタで指定したパスのinode番号を返します。',
            'fs_stat_nlink_sub' : 'コンストラクタで指定したパスのハードリンクの数を返します。',
            'fs_stat_uid_sub' : 'コンストラクタで指定したパスの所有者のユーザIDを返します。',
            'fs_stat_gid_sub' : 'コンストラクタで指定したパスの所有者のグループIDを返します。',
            'fs_stat_rdev_sub' : 'コンストラクタで指定したパスのデバイスIDを返します。',
            'fs_stat_size_sub' : 'コンストラクタで指定したパスのサイズをバイト単位で返します。',
            'fs_stat_atime_sub' : 'コンストラクタで指定したパスの最終アクセス日時を文字列で返します。',
            'fs_stat_mtime_sub' : 'コンストラクタで指定したパスの最終更新日時を文字列で返します。',
            'fs_stat_ctime_sub' : 'コンストラクタで指定したパスの作成日時を文字列で返します。',
            'fs_path_isDir_static_sub' : 'pathがディレクトリかどうか判定します。',
            'fs_path_isFile_static_sub' : 'pathがファイルかどうか判定します。',
            'fs_fopen_sub' : '引数パスで指定されたファイルストリームをオープンし、Fileクラスのインスタンスを返します。引数flagsには以下のフラグを複数指定可能です。例 fopen(path , \'rw\');',
            'fs_fopen_flag_r_sub' : 'テキストファイルを読み出すために開きます。ストリームはファイルの先頭になります。',
            'fs_fopen_flag_rp_sub' : 'テキストファイルに書きだしと読み出しの両方で開きます。ストリームはファイルの先頭になります。',
            'fs_fopen_flag_w_sub' : 'テキストファイルに書きだすために開きます。ストリームはファイルの先頭になります。',
            'fs_fopen_flag_wp_sub' : 'テキストファイルに書きだすために開きます。ストリームはファイルの先頭になります。またファイルが存在しなければ新たに作成します。ファイルが存在していて、中身がすでにあった場合は全て消去します。',
            'fs_fopen_flag_a_sub' : 'テキストファイルへの追記のために開きます。ストリームはファイルの末尾になります。またファイルが存在しなければ新たに作成します。',
            'fs_fopen_flag_ap_sub' : 'テキストファイルへの追記と読み出しのために開きます。ストリームはファイルの先頭になりますが、書き込みは常にファイルの末尾になります。またファイルが存在しなければ新たに作成します。',
            'fs_fopen_flag_b_sub' : 'テキストファイルをバイナリファイルとして開きます。windowsの場合、改行が\n\rとして読まれるので注意してください。',
            'fs_file_writeTextContent_sub' : 'strをファイルに書き出します。',
            'fs_file_getTextContent_sub' : 'ファイルの中身を文字列で返します。',
            'fs_nativeConsole_printStdout_sub' : 'strを標準出力に書き出します。',
            'fs_nativeConsole_printStderr_sub' : 'strを標準エラー出力に書き出します。',
            'script_watcher_run_sub' : 'ファイル監視をスタートします。',
            'script_watcher_exit_sub' : 'ファイル監視を終了します。',
            'script_watcher_isRunning_sub' : 'ファイル監視が行われているかどうかを判定します。',
            'script_watcher_addSetting_sub' : '新たにファイルを監視対象に加えます。',
            'script_watcher_removeSetting_sub' : 'ファイルを監視対象から外します。',
            'script_roaster_compile_sub' : '文字列strをコンパイルし、結果を返します。',
            'script_roaster_compileFile_sub' : 'ファイルをコンパイルし、結果を返します。',
            'script_roaster_deploy_sub' : '設定ファイルに従って、登録されたファイルをコンパイルします。引数predでファイルを絞り込むことが可能です。predには関数か、正規表現、文字列のいずれかを指定してください。predに関数が渡された場合、引数として各option+ファイル名をプロパティに持つオブジェクトが渡されます。',
            'script_roaster_checkDependencies_sub' : '引数pathで指定されたファイルの依存関係を調べ、依存しているファイルを配列で返します。',
            'os_process_spawn_sub' : '引数pathで指定された実行ファイルを引数argと共に実行し、実行結果を文字列で返します。',
            'mocha_config_add_sub' : '引数keyで指定された設定に対してvalueを設定します。',
            'mocha_config_get_sub' : '引数keyで指定された設定を取得します。',
            'import_sub' : '引数pathで指定されたjsファイルを読み込みます。読み込みは以下の順で行われます。',
            'desc' : '記述',
            'import_sub2' : '現在のディレクトリからの相対パスでファイルを探します。',
            'import_sub3' : '最初にネイティブモジュールを検索し、なければ現在のディレクトリからの相対パスでファイルを探します。',
            'export_sub' : '引数nameで指定された名前でvalueをエクスポートします。エクスポートした値はimportから取得可能です。',
            'mocha_command_addCommand_sub' : '引数nameで指定された名前のコマンドを追加します。',
            'mocha_command_getCommand_sub' : '引数nameで指定された名前のコマンドを取得します。',
            'mocha_command_callCommand_sub' : '引数nameで指定された名前のコマンドをargsを引数に呼び出します。'
            }
        }
}
